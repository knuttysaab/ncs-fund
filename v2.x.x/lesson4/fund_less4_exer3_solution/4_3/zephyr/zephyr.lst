
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	80 15 00 20 f9 18 00 00 61 45 00 00 cd 18 00 00     ... ....aE......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	cd 18 00 00 cd 18 00 00 cd 18 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	9d 13 00 00 cd 18 00 00 00 00 00 00 49 13 00 00     ............I...
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	cd 18 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
			switch (*fmt) {
  c0:	4d 14 00 00 4d 14 00 00 4d 14 00 00 4d 14 00 00     M...M...M...M...
  d0:	4d 14 00 00 4d 14 00 00 4d 14 00 00                 M...M...M...

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
				align = VA_STACK_ALIGN(void *);
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
			switch (*fmt) {
     124:	f040 80c2 	bne.w	2ac <CONFIG_FLASH_SIZE+0xac>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
		buf = (void *) ROUND_UP(buf, align);
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
		if (is_str_arg) {
     160:	d928      	bls.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     162:	18eb      	adds	r3, r5, r3
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f108 37ff 	add.w	r7, r8, #4294967295
			int v = va_arg(ap, int);
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3

			if (buf0 != NULL) {
				*(int *)buf = v;
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
			}
			buf += sizeof(int);
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
				arg_idx--;
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
				parsing = false;
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
				continue;
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
				if (fmt[-1] == 'l') {
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
					if (fmt[-2] == 'l') {
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     18e:	192c      	adds	r4, r5, r4
				parsing = false;
     190:	f10c 33ff 	add.w	r3, ip, #4294967295
						align = VA_STACK_ALIGN(long long);
     194:	d204      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     196:	42a0      	cmp	r0, r4
				size = sizeof(void *);
     198:	d902      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
					v.ld = va_arg(ap, long double);
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	40d4      	lsrs	r4, r2
				buf = (void *) ROUND_UP(buf, align);
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
				if (buf0 != NULL) {
     1ae:	6073      	str	r3, [r6, #4]
					if (BUF_OFFSET + size > len) {
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
						*(long double *)buf = v.ld;
     1ba:	e7f1      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
				buf += size;
     1be:	1b43      	subs	r3, r0, r5
				parsing = false;
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
			if (*++fmt == '\0') {
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
			if (!parsing) {
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
				if (*fmt == '%') {
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
					arg_idx++;
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295
					parsing = true;
     1e4:	d204      	bcs.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1e6:	4598      	cmp	r8, r3
				align = VA_STACK_ALIGN(size_t);
     1e8:	d902      	bls.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
			switch (*fmt) {
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
				parsing = false;
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fe:	fb0c f707 	mul.w	r7, ip, r7
			long long v = va_arg(ap, long long);
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
				}
			}
			buf += sizeof(long long);
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
		} else if (size == sizeof(int)) {
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
			int v = va_arg(ap, int);
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (buf0 != NULL) {
     222:	e7c0      	b.n	1a6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x39>
		} else if (size == sizeof(long long)) {
     224:	f1c2 0320 	rsb	r3, r2, #32
			long long v = va_arg(ap, long long);
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
			if (buf0 != NULL) {
     234:	4303      	orrs	r3, r0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
			s = va_arg(ap, char *);
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
			if (is_ro && !do_ro) {
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     254:	d922      	bls.n	29c <CONFIG_FLASH_SIZE+0x9c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_FLASH_SIZE+0x68>
     25e:	4588      	cmp	r8, r1
				if (buf0 != NULL) {
     260:	d902      	bls.n	268 <CONFIG_FLASH_SIZE+0x68>
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
					str_ptr_arg[s_idx] = arg_idx;
     26c:	b29b      	uxth	r3, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 111c 	mls	r1, lr, ip, r1
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <CONFIG_FLASH_SIZE+0xa0>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295
						s_ro_cnt++;
     288:	d204      	bcs.n	294 <CONFIG_FLASH_SIZE+0x94>
				s_idx++;
     28a:	429f      	cmp	r7, r3
					if (BUF_OFFSET + size > len) {
     28c:	d902      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
			switch (*fmt) {
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e792      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <CONFIG_FLASH_SIZE+0x68>
				} else if (is_ro) {
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     2a4:	4660      	mov	r0, ip
					len += 1;
     2a6:	e7a3      	b.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     2a8:	4663      	mov	r3, ip
				} else if (rws_pos_en) {
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
					len += 2;
     2ac:	4283      	cmp	r3, r0
				} else if (rws_pos_en) {
     2ae:	d906      	bls.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b0:	b916      	cbnz	r6, 2b8 <CONFIG_FLASH_SIZE+0xb8>
					len += strlen(s) + 1 + 1;
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <CONFIG_FLASH_SIZE+0xb2>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <CONFIG_FLASH_SIZE+0xe8>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <CONFIG_FLASH_SIZE+0xde>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <CONFIG_FLASH_SIZE+0xe2>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2de:	4638      	mov	r0, r7
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7fa      	b.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
	*(char **)buf0 = NULL;
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	e7f8      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
	if (rws_pos_en) {
     2ec:	40bb      	lsls	r3, r7
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f2:	431c      	orrs	r4, r3
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
		for (i = 0; i < s_idx; i++) {
     2fc:	40b8      	lsls	r0, r7
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
		for (i = 0; i < s_idx; i++) {
     304:	fa0e f507 	lsl.w	r5, lr, r7
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
			*buf++ = str_ptr_arg[i];
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
	for (i = 0; i < s_idx; i++) {
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31e:	459a      	cmp	sl, r3
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	fa02 f207 	lsl.w	r2, r2, r7
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	d940      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295
			if (BUF_OFFSET + 1 > len) {
     32c:	d204      	bcs.n	338 <CONFIG_FLASH_SIZE+0x138>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_FLASH_SIZE+0x138>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     332:	f1a8 0002 	sub.w	r0, r8, #2
			if (BUF_OFFSET + 1 > len) {
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
			*buf++ = pos;
     33c:	b289      	uxth	r1, r1
		for (i = 0; i < s_idx; i++) {
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
		if (rws_pos_en) {
     350:	d92c      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     352:	1861      	adds	r1, r4, r1
			*buf++ = str_ptr_arg[i];
     354:	f108 33ff 	add.w	r3, r8, #4294967295
     358:	d204      	bcs.n	364 <CONFIG_FLASH_SIZE+0x164>
     35a:	458e      	cmp	lr, r1
			size = 0;
     35c:	d902      	bls.n	364 <CONFIG_FLASH_SIZE+0x164>
		if (BUF_OFFSET + 1 + size > len) {
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
		*buf++ = str_ptr_pos[i];
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
		memcpy(buf, s, size);
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_FLASH_SIZE+0x17e>
     378:	d106      	bne.n	388 <CONFIG_FLASH_SIZE+0x188>
     37a:	454d      	cmp	r5, r9
		buf += size;
     37c:	d204      	bcs.n	388 <CONFIG_FLASH_SIZE+0x188>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
	for (i = 0; i < s_idx; i++) {
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38a:	d0a6      	beq.n	2da <CONFIG_FLASH_SIZE+0xda>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
			size = strlen(s) + 1;
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
		return -EFAULT;
     3a6:	e798      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_FLASH_SIZE+0x138>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_FLASH_SIZE+0x164>

000003b0 <button_pressed>:

LOG_MODULE_REGISTER(Less4_Exer3,LOG_LEVEL_DBG);

void button_pressed(const struct device *dev, struct gpio_callback *cb,
            uint32_t pins)
{
     3b0:	b538      	push	{r3, r4, r5, lr}
  int i;
  int j;
  long int factorial;
  LOG_INF("Calculating the factorials of numbers 1 to %d:",MAX_NUMBER_FACT);
     3b2:	480b      	ldr	r0, [pc, #44]	; (3e0 <button_pressed+0x30>)
  for (i=1;i<=MAX_NUMBER_FACT;i++){
       factorial =1;
        for (j=1;j<=i;j++){
            factorial = factorial*j;
        }
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     3b4:	4d0b      	ldr	r5, [pc, #44]	; (3e4 <button_pressed+0x34>)
  LOG_INF("Calculating the factorials of numbers 1 to %d:",MAX_NUMBER_FACT);
     3b6:	220a      	movs	r2, #10
     3b8:	2149      	movs	r1, #73	; 0x49
     3ba:	f004 f8bc 	bl	4536 <z_log_minimal_printk>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     3be:	2401      	movs	r4, #1
        for (j=1;j<=i;j++){
     3c0:	2101      	movs	r1, #1
       factorial =1;
     3c2:	460b      	mov	r3, r1
            factorial = factorial*j;
     3c4:	434b      	muls	r3, r1
        for (j=1;j<=i;j++){
     3c6:	3101      	adds	r1, #1
     3c8:	42a1      	cmp	r1, r4
     3ca:	ddfb      	ble.n	3c4 <button_pressed+0x14>
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     3cc:	4622      	mov	r2, r4
     3ce:	2149      	movs	r1, #73	; 0x49
     3d0:	4628      	mov	r0, r5
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     3d2:	3401      	adds	r4, #1
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     3d4:	f004 f8af 	bl	4536 <z_log_minimal_printk>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     3d8:	2c0b      	cmp	r4, #11
     3da:	d1f1      	bne.n	3c0 <button_pressed+0x10>
  }
  /*Important note! 
  Code in ISR runs at a high priority, therefore, it should be written with timing in mind.
  Too lengthy or too complex tasks should not be performed by an ISR, they should be deferred to a thread or a workqueue 
  */
}
     3dc:	bd38      	pop	{r3, r4, r5, pc}
     3de:	bf00      	nop
     3e0:	00004fa0 	.word	0x00004fa0
     3e4:	00004fd4 	.word	0x00004fd4

000003e8 <main>:

static struct gpio_callback button_cb_data;

void main(void)
{
     3e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int ret;
    int exercise_num = 3;
    uint8_t data[] = {0x00, 0x01, 0x02, 0x03,
     3ea:	4b32      	ldr	r3, [pc, #200]	; (4b4 <CONFIG_MAIN_STACK_SIZE+0xb4>)
     3ec:	466a      	mov	r2, sp
     3ee:	f103 0608 	add.w	r6, r3, #8
     3f2:	4615      	mov	r5, r2
     3f4:	6818      	ldr	r0, [r3, #0]
     3f6:	6859      	ldr	r1, [r3, #4]
     3f8:	4614      	mov	r4, r2
     3fa:	c403      	stmia	r4!, {r0, r1}
     3fc:	3308      	adds	r3, #8
     3fe:	42b3      	cmp	r3, r6
     400:	4622      	mov	r2, r4
     402:	d1f7      	bne.n	3f4 <main+0xc>
     404:	6818      	ldr	r0, [r3, #0]
     406:	791b      	ldrb	r3, [r3, #4]
     408:	7123      	strb	r3, [r4, #4]
     40a:	6020      	str	r0, [r4, #0]
                      0x04, 0x05, 0x06, 0x07,
                      'H', 'e', 'l', 'l','o'};
    //Printf-like messages
    LOG_INF("nRF Connect SDK Fundamentals");
     40c:	2149      	movs	r1, #73	; 0x49
     40e:	482a      	ldr	r0, [pc, #168]	; (4b8 <CONFIG_MAIN_STACK_SIZE+0xb8>)
     410:	f004 f891 	bl	4536 <z_log_minimal_printk>
    LOG_INF("Exercise %d",exercise_num);    
     414:	2203      	movs	r2, #3
     416:	4829      	ldr	r0, [pc, #164]	; (4bc <CONFIG_MAIN_STACK_SIZE+0xbc>)
     418:	2149      	movs	r1, #73	; 0x49
     41a:	f004 f88c 	bl	4536 <z_log_minimal_printk>
    LOG_DBG("A log message in debug level");
     41e:	4828      	ldr	r0, [pc, #160]	; (4c0 <CONFIG_MAIN_STACK_SIZE+0xc0>)
     420:	2144      	movs	r1, #68	; 0x44
     422:	f004 f888 	bl	4536 <z_log_minimal_printk>
    LOG_WRN("A log message in warning level!");
     426:	4827      	ldr	r0, [pc, #156]	; (4c4 <CONFIG_MAIN_STACK_SIZE+0xc4>)
     428:	2157      	movs	r1, #87	; 0x57
     42a:	f004 f884 	bl	4536 <z_log_minimal_printk>
    LOG_ERR("A log message in error level!");
     42e:	4826      	ldr	r0, [pc, #152]	; (4c8 <CONFIG_MAIN_STACK_SIZE+0xc8>)
     430:	2145      	movs	r1, #69	; 0x45
     432:	f004 f880 	bl	4536 <z_log_minimal_printk>
    //Hexdump some data
    LOG_HEXDUMP_INF(data, sizeof(data),"Sample Data!"); 
     436:	4a25      	ldr	r2, [pc, #148]	; (4cc <CONFIG_MAIN_STACK_SIZE+0xcc>)
     438:	4825      	ldr	r0, [pc, #148]	; (4d0 <CONFIG_MAIN_STACK_SIZE+0xd0>)
     43a:	2149      	movs	r1, #73	; 0x49
     43c:	f004 f87b 	bl	4536 <z_log_minimal_printk>
     440:	220d      	movs	r2, #13
     442:	4629      	mov	r1, r5
     444:	2003      	movs	r0, #3
     446:	f000 fd2b 	bl	ea0 <z_log_minimal_hexdump_print>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     44a:	4c22      	ldr	r4, [pc, #136]	; (4d4 <CONFIG_MAIN_STACK_SIZE+0xd4>)
     44c:	4620      	mov	r0, r4
     44e:	f004 fafb 	bl	4a48 <z_device_is_ready>

	/* Only checking one since led.port and button.port point to the same device, &gpio0 */
	if (!device_is_ready(led.port)) {
     452:	b360      	cbz	r0, 4ae <CONFIG_MAIN_STACK_SIZE+0xae>
		return;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     454:	4820      	ldr	r0, [pc, #128]	; (4d8 <CONFIG_MAIN_STACK_SIZE+0xd8>)
     456:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     45a:	f003 fefd 	bl	4258 <gpio_pin_configure_dt>
	if (ret < 0) {
     45e:	2800      	cmp	r0, #0
     460:	db25      	blt.n	4ae <CONFIG_MAIN_STACK_SIZE+0xae>
		return;
	}

	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     462:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     466:	481d      	ldr	r0, [pc, #116]	; (4dc <CONFIG_MAIN_STACK_SIZE+0xdc>)
     468:	f003 fef6 	bl	4258 <gpio_pin_configure_dt>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     46c:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
     46e:	68a5      	ldr	r5, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     470:	681b      	ldr	r3, [r3, #0]
					     GPIO_INT_ENABLE_DISABLE_ONLY));
#else
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));
#endif /* CONFIG_GPIO_ENABLE_DISABLE_INTERRUPT */

	return api->pin_interrupt_configure(port, pin, mode, trig);
     472:	69ae      	ldr	r6, [r5, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     474:	f413 5f00 	tst.w	r3, #8192	; 0x2000
	return api->pin_interrupt_configure(port, pin, mode, trig);
     478:	bf14      	ite	ne
     47a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     47e:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     482:	210d      	movs	r1, #13
     484:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     488:	4620      	mov	r0, r4
     48a:	47b0      	blx	r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     48c:	4914      	ldr	r1, [pc, #80]	; (4e0 <CONFIG_MAIN_STACK_SIZE+0xe0>)
     48e:	4b15      	ldr	r3, [pc, #84]	; (4e4 <CONFIG_MAIN_STACK_SIZE+0xe4>)
     490:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     496:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     498:	69eb      	ldr	r3, [r5, #28]
     49a:	b113      	cbz	r3, 4a2 <CONFIG_MAIN_STACK_SIZE+0xa2>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     49c:	2201      	movs	r2, #1
     49e:	4620      	mov	r0, r4
     4a0:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4a2:	2100      	movs	r1, #0
     4a4:	f04f 7096 	mov.w	r0, #19660800	; 0x12c0000
     4a8:	f003 fcf6 	bl	3e98 <z_impl_k_sleep>
     4ac:	e7f9      	b.n	4a2 <CONFIG_MAIN_STACK_SIZE+0xa2>

	gpio_add_callback(button.port, &button_cb_data);
	while (1) {
        k_msleep(SLEEP_TIME_MS); 
	}
     4ae:	b004      	add	sp, #16
     4b0:	bd70      	pop	{r4, r5, r6, pc}
     4b2:	bf00      	nop
     4b4:	00004e60 	.word	0x00004e60
     4b8:	00004ff4 	.word	0x00004ff4
     4bc:	00005016 	.word	0x00005016
     4c0:	00005027 	.word	0x00005027
     4c4:	00005049 	.word	0x00005049
     4c8:	0000506e 	.word	0x0000506e
     4cc:	00005091 	.word	0x00005091
     4d0:	0000509e 	.word	0x0000509e
     4d4:	00004c80 	.word	0x00004c80
     4d8:	00004e78 	.word	0x00004e78
     4dc:	00004e80 	.word	0x00004e80
     4e0:	200001d8 	.word	0x200001d8
     4e4:	000003b1 	.word	0x000003b1

000004e8 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     4e8:	4b01      	ldr	r3, [pc, #4]	; (4f0 <char_out+0x8>)
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	4718      	bx	r3
     4ee:	bf00      	nop
     4f0:	20000000 	.word	0x20000000

000004f4 <__printk_hook_install>:
	_char_out = fn;
     4f4:	4b01      	ldr	r3, [pc, #4]	; (4fc <__printk_hook_install+0x8>)
     4f6:	6018      	str	r0, [r3, #0]
}
     4f8:	4770      	bx	lr
     4fa:	bf00      	nop
     4fc:	20000000 	.word	0x20000000

00000500 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     500:	b507      	push	{r0, r1, r2, lr}
     502:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     504:	2100      	movs	r1, #0
     506:	4602      	mov	r2, r0
     508:	9100      	str	r1, [sp, #0]
     50a:	4803      	ldr	r0, [pc, #12]	; (518 <vprintk+0x18>)
     50c:	f000 f914 	bl	738 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     510:	b003      	add	sp, #12
     512:	f85d fb04 	ldr.w	pc, [sp], #4
     516:	bf00      	nop
     518:	000004e9 	.word	0x000004e9

0000051c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     520:	8b05      	ldrh	r5, [r0, #24]
{
     522:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     524:	0728      	lsls	r0, r5, #28
{
     526:	4690      	mov	r8, r2
	if (processing) {
     528:	d411      	bmi.n	54e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     52a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     52c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     530:	f040 80cd 	bne.w	6ce <process_event+0x1b2>
			evt = process_recheck(mgr);
     534:	4620      	mov	r0, r4
     536:	f003 fec7 	bl	42c8 <process_recheck>
		}

		if (evt == EVT_NOP) {
     53a:	b178      	cbz	r0, 55c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     53c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     53e:	8b21      	ldrh	r1, [r4, #24]
     540:	2804      	cmp	r0, #4
     542:	d811      	bhi.n	568 <process_event+0x4c>
     544:	e8df f000 	tbb	[pc, r0]
     548:	856d10c3 	.word	0x856d10c3
     54c:	95          	.byte	0x95
     54d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     54e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     550:	bf0c      	ite	eq
     552:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     556:	f045 0520 	orrne.w	r5, r5, #32
     55a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     55c:	f388 8811 	msr	BASEPRI, r8
     560:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     568:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     56c:	45aa      	cmp	sl, r5
     56e:	f000 80a6 	beq.w	6be <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     572:	2700      	movs	r7, #0
     574:	46b9      	mov	r9, r7
     576:	463e      	mov	r6, r7
     578:	68a3      	ldr	r3, [r4, #8]
     57a:	2b00      	cmp	r3, #0
     57c:	f000 80bd 	beq.w	6fa <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     580:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     584:	8321      	strh	r1, [r4, #24]
     586:	f388 8811 	msr	BASEPRI, r8
     58a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     58e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     590:	2900      	cmp	r1, #0
     592:	f000 80bb 	beq.w	70c <process_event+0x1f0>
	return node->next;
     596:	680d      	ldr	r5, [r1, #0]
     598:	2900      	cmp	r1, #0
     59a:	f000 80b7 	beq.w	70c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     59e:	f8d1 8004 	ldr.w	r8, [r1, #4]
     5a2:	4633      	mov	r3, r6
     5a4:	4652      	mov	r2, sl
     5a6:	4620      	mov	r0, r4
     5a8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5aa:	2d00      	cmp	r5, #0
     5ac:	d076      	beq.n	69c <process_event+0x180>
     5ae:	682b      	ldr	r3, [r5, #0]
     5b0:	4629      	mov	r1, r5
     5b2:	461d      	mov	r5, r3
     5b4:	e7f0      	b.n	598 <process_event+0x7c>
     5b6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     5ba:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     5bc:	2a01      	cmp	r2, #1
     5be:	d81b      	bhi.n	5f8 <process_event+0xdc>
	list->head = NULL;
     5c0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5c2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     5c6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     5c8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ca:	b289      	uxth	r1, r1
	list->tail = NULL;
     5cc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     5d0:	d109      	bne.n	5e6 <process_event+0xca>
     5d2:	463b      	mov	r3, r7
     5d4:	e003      	b.n	5de <process_event+0xc2>
				mgr->refs += 1U;
     5d6:	8b62      	ldrh	r2, [r4, #26]
     5d8:	3201      	adds	r2, #1
     5da:	8362      	strh	r2, [r4, #26]
	return node->next;
     5dc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5de:	2b00      	cmp	r3, #0
     5e0:	d1f9      	bne.n	5d6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     5e6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     5e8:	4620      	mov	r0, r4
     5ea:	f003 fe6d 	bl	42c8 <process_recheck>
     5ee:	2800      	cmp	r0, #0
     5f0:	d07b      	beq.n	6ea <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5f2:	f041 0120 	orr.w	r1, r1, #32
     5f6:	e077      	b.n	6e8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     5f8:	2b04      	cmp	r3, #4
     5fa:	d10a      	bne.n	612 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5fc:	f021 0107 	bic.w	r1, r1, #7
     600:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     602:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     604:	4620      	mov	r0, r4
     606:	f003 fe5f 	bl	42c8 <process_recheck>
     60a:	b110      	cbz	r0, 612 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     60c:	f041 0120 	orr.w	r1, r1, #32
     610:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     612:	8b21      	ldrh	r1, [r4, #24]
     614:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     618:	45aa      	cmp	sl, r5
     61a:	d050      	beq.n	6be <process_event+0x1a2>
     61c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     61e:	46b9      	mov	r9, r7
     620:	e7aa      	b.n	578 <process_event+0x5c>
			transit = mgr->transitions->start;
     622:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     624:	f021 0107 	bic.w	r1, r1, #7
     628:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     62c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     62e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     632:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     634:	d12d      	bne.n	692 <process_event+0x176>
		    || (transit != NULL)) {
     636:	f1b9 0f00 	cmp.w	r9, #0
     63a:	d040      	beq.n	6be <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     63c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     640:	8321      	strh	r1, [r4, #24]
     642:	f388 8811 	msr	BASEPRI, r8
     646:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     64a:	493a      	ldr	r1, [pc, #232]	; (734 <process_event+0x218>)
     64c:	4620      	mov	r0, r4
     64e:	47c8      	blx	r9
     650:	e029      	b.n	6a6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     652:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     656:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     658:	f041 0104 	orr.w	r1, r1, #4
     65c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     65e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     660:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     664:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     666:	d0e6      	beq.n	636 <process_event+0x11a>
     668:	2700      	movs	r7, #0
		res = 0;
     66a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     66c:	f04f 0a04 	mov.w	sl, #4
     670:	e782      	b.n	578 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     672:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     676:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     678:	f041 0105 	orr.w	r1, r1, #5
     67c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     67e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     680:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     684:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     686:	d0d6      	beq.n	636 <process_event+0x11a>
     688:	2700      	movs	r7, #0
		res = 0;
     68a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     68c:	f04f 0a05 	mov.w	sl, #5
     690:	e772      	b.n	578 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     692:	2700      	movs	r7, #0
		res = 0;
     694:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     696:	f04f 0a06 	mov.w	sl, #6
     69a:	e76d      	b.n	578 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     69c:	462b      	mov	r3, r5
     69e:	e787      	b.n	5b0 <process_event+0x94>
			if (transit != NULL) {
     6a0:	f1b9 0f00 	cmp.w	r9, #0
     6a4:	d1d1      	bne.n	64a <process_event+0x12e>
	__asm__ volatile(
     6a6:	f04f 0320 	mov.w	r3, #32
     6aa:	f3ef 8811 	mrs	r8, BASEPRI
     6ae:	f383 8812 	msr	BASEPRI_MAX, r3
     6b2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     6b6:	8b23      	ldrh	r3, [r4, #24]
     6b8:	f023 0308 	bic.w	r3, r3, #8
     6bc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     6be:	8b25      	ldrh	r5, [r4, #24]
     6c0:	06ea      	lsls	r2, r5, #27
     6c2:	d52e      	bpl.n	722 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6c4:	f025 0310 	bic.w	r3, r5, #16
     6c8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     6ca:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     6ce:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6d0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     6d2:	2e00      	cmp	r6, #0
     6d4:	f6bf af6f 	bge.w	5b6 <process_event+0x9a>
	list->head = NULL;
     6d8:	2300      	movs	r3, #0
		*clients = mgr->clients;
     6da:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     6dc:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6e0:	f021 0107 	bic.w	r1, r1, #7
     6e4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6e8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6ea:	8b21      	ldrh	r1, [r4, #24]
     6ec:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6f0:	45aa      	cmp	sl, r5
     6f2:	f04f 0900 	mov.w	r9, #0
     6f6:	f47f af3f 	bne.w	578 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     6fa:	2f00      	cmp	r7, #0
     6fc:	d09b      	beq.n	636 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6fe:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     702:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     704:	f388 8811 	msr	BASEPRI, r8
     708:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     70c:	2f00      	cmp	r7, #0
     70e:	d0c7      	beq.n	6a0 <process_event+0x184>
	return node->next;
     710:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     712:	4639      	mov	r1, r7
     714:	4633      	mov	r3, r6
     716:	4652      	mov	r2, sl
     718:	4620      	mov	r0, r4
     71a:	f003 fe01 	bl	4320 <notify_one>
	list->head = node;
     71e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     720:	e7f4      	b.n	70c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     722:	06ab      	lsls	r3, r5, #26
     724:	f57f af1a 	bpl.w	55c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     728:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     72c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     72e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     732:	e6ff      	b.n	534 <process_event+0x18>
     734:	0000434d 	.word	0x0000434d

00000738 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     73c:	4681      	mov	r9, r0
     73e:	b095      	sub	sp, #84	; 0x54
     740:	468b      	mov	fp, r1
     742:	4617      	mov	r7, r2
     744:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     746:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     748:	7838      	ldrb	r0, [r7, #0]
     74a:	b908      	cbnz	r0, 750 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     74c:	4628      	mov	r0, r5
     74e:	e358      	b.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
			OUTC(*fp++);
     750:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     752:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     754:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     756:	d006      	beq.n	766 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     758:	4659      	mov	r1, fp
     75a:	47c8      	blx	r9
     75c:	2800      	cmp	r0, #0
     75e:	f2c0 8350 	blt.w	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     762:	3501      	adds	r5, #1
		if (bps == NULL) {
     764:	e1fb      	b.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		} state = {
     766:	2218      	movs	r2, #24
     768:	2100      	movs	r1, #0
     76a:	a80e      	add	r0, sp, #56	; 0x38
     76c:	f003 ff24 	bl	45b8 <memset>
	if (*sp == '%') {
     770:	787b      	ldrb	r3, [r7, #1]
     772:	2b25      	cmp	r3, #37	; 0x25
     774:	d07d      	beq.n	872 <__z_interrupt_stack_SIZEOF+0x32>
     776:	2300      	movs	r3, #0
     778:	1c78      	adds	r0, r7, #1
     77a:	4698      	mov	r8, r3
     77c:	469e      	mov	lr, r3
     77e:	469c      	mov	ip, r3
     780:	461e      	mov	r6, r3
     782:	4601      	mov	r1, r0
		switch (*sp) {
     784:	f810 2b01 	ldrb.w	r2, [r0], #1
     788:	2a2b      	cmp	r2, #43	; 0x2b
     78a:	f000 80a1 	beq.w	8d0 <__z_interrupt_stack_SIZEOF+0x90>
     78e:	f200 8098 	bhi.w	8c2 <__z_interrupt_stack_SIZEOF+0x82>
     792:	2a20      	cmp	r2, #32
     794:	f000 809f 	beq.w	8d6 <__z_interrupt_stack_SIZEOF+0x96>
     798:	2a23      	cmp	r2, #35	; 0x23
     79a:	f000 809f 	beq.w	8dc <__z_interrupt_stack_SIZEOF+0x9c>
     79e:	b12b      	cbz	r3, 7ac <z_cbvprintf_impl+0x74>
     7a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7a8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     7ac:	f1b8 0f00 	cmp.w	r8, #0
     7b0:	d005      	beq.n	7be <z_cbvprintf_impl+0x86>
     7b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7b6:	f043 0320 	orr.w	r3, r3, #32
     7ba:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     7be:	f1be 0f00 	cmp.w	lr, #0
     7c2:	d005      	beq.n	7d0 <z_cbvprintf_impl+0x98>
     7c4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7c8:	f043 0310 	orr.w	r3, r3, #16
     7cc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     7d0:	f1bc 0f00 	cmp.w	ip, #0
     7d4:	d005      	beq.n	7e2 <z_cbvprintf_impl+0xaa>
     7d6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7da:	f043 0308 	orr.w	r3, r3, #8
     7de:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     7e2:	b12e      	cbz	r6, 7f0 <z_cbvprintf_impl+0xb8>
     7e4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7e8:	f043 0304 	orr.w	r3, r3, #4
     7ec:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     7f0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     7f4:	f003 0044 	and.w	r0, r3, #68	; 0x44
     7f8:	2844      	cmp	r0, #68	; 0x44
     7fa:	d103      	bne.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		conv->flag_zero = false;
     7fc:	f36f 1386 	bfc	r3, #6, #1
     800:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     804:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     808:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     80e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     812:	d17f      	bne.n	914 <__z_interrupt_stack_SIZEOF+0xd4>
		conv->width_star = true;
     814:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     818:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     81c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     81e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     822:	781a      	ldrb	r2, [r3, #0]
     824:	2a2e      	cmp	r2, #46	; 0x2e
     826:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     82a:	bf0c      	ite	eq
     82c:	2101      	moveq	r1, #1
     82e:	2100      	movne	r1, #0
     830:	f361 0241 	bfi	r2, r1, #1, #1
     834:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     838:	d178      	bne.n	92c <__z_interrupt_stack_SIZEOF+0xec>
	if (*sp == '*') {
     83a:	785a      	ldrb	r2, [r3, #1]
     83c:	2a2a      	cmp	r2, #42	; 0x2a
     83e:	d06e      	beq.n	91e <__z_interrupt_stack_SIZEOF+0xde>
	++sp;
     840:	3301      	adds	r3, #1
	size_t val = 0;
     842:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     844:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     848:	4619      	mov	r1, r3
     84a:	f811 0b01 	ldrb.w	r0, [r1], #1
     84e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     852:	2e09      	cmp	r6, #9
     854:	f240 8095 	bls.w	982 <__z_interrupt_stack_SIZEOF+0x142>
	conv->unsupported |= ((conv->prec_value < 0)
     858:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     85c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     85e:	f3c1 0040 	ubfx	r0, r1, #1, #1
     862:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     866:	460a      	mov	r2, r1
     868:	f360 0241 	bfi	r2, r0, #1, #1
     86c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     870:	e05c      	b.n	92c <__z_interrupt_stack_SIZEOF+0xec>
		conv->specifier = *sp++;
     872:	1cba      	adds	r2, r7, #2
     874:	9203      	str	r2, [sp, #12]
     876:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     87a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     87e:	07da      	lsls	r2, r3, #31
     880:	f140 812e 	bpl.w	ae0 <__z_interrupt_stack_SIZEOF+0x2a0>
			width = va_arg(ap, int);
     884:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     888:	f1b8 0f00 	cmp.w	r8, #0
     88c:	da07      	bge.n	89e <__z_interrupt_stack_SIZEOF+0x5e>
				conv->flag_dash = true;
     88e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     892:	f042 0204 	orr.w	r2, r2, #4
     896:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     89a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     89e:	075e      	lsls	r6, r3, #29
     8a0:	f140 8127 	bpl.w	af2 <__z_interrupt_stack_SIZEOF+0x2b2>
			int arg = va_arg(ap, int);
     8a4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     8a8:	f1ba 0f00 	cmp.w	sl, #0
     8ac:	f280 8126 	bge.w	afc <__z_interrupt_stack_SIZEOF+0x2bc>
				conv->prec_present = false;
     8b0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     8b4:	f36f 0341 	bfc	r3, #1, #1
     8b8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     8bc:	f04f 3aff 	mov.w	sl, #4294967295
     8c0:	e11c      	b.n	afc <__z_interrupt_stack_SIZEOF+0x2bc>
		switch (*sp) {
     8c2:	2a2d      	cmp	r2, #45	; 0x2d
     8c4:	d00d      	beq.n	8e2 <__z_interrupt_stack_SIZEOF+0xa2>
     8c6:	2a30      	cmp	r2, #48	; 0x30
     8c8:	f47f af69 	bne.w	79e <z_cbvprintf_impl+0x66>
     8cc:	2301      	movs	r3, #1
	} while (loop);
     8ce:	e758      	b.n	782 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     8d0:	f04f 0c01 	mov.w	ip, #1
     8d4:	e755      	b.n	782 <z_cbvprintf_impl+0x4a>
     8d6:	f04f 0e01 	mov.w	lr, #1
     8da:	e752      	b.n	782 <z_cbvprintf_impl+0x4a>
     8dc:	f04f 0801 	mov.w	r8, #1
     8e0:	e74f      	b.n	782 <z_cbvprintf_impl+0x4a>
     8e2:	2601      	movs	r6, #1
     8e4:	e74d      	b.n	782 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     8e6:	fb0e 6202 	mla	r2, lr, r2, r6
     8ea:	3a30      	subs	r2, #48	; 0x30
     8ec:	4603      	mov	r3, r0
     8ee:	4618      	mov	r0, r3
     8f0:	f810 6b01 	ldrb.w	r6, [r0], #1
     8f4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     8f8:	f1bc 0f09 	cmp.w	ip, #9
     8fc:	d9f3      	bls.n	8e6 <__z_interrupt_stack_SIZEOF+0xa6>
	if (sp != wp) {
     8fe:	4299      	cmp	r1, r3
     900:	d08f      	beq.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
		conv->unsupported |= ((conv->width_value < 0)
     902:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     906:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     908:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     90a:	f362 0141 	bfi	r1, r2, #1, #1
     90e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     912:	e786      	b.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
     914:	460b      	mov	r3, r1
	size_t val = 0;
     916:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     918:	f04f 0e0a 	mov.w	lr, #10
     91c:	e7e7      	b.n	8ee <__z_interrupt_stack_SIZEOF+0xae>
		conv->prec_star = true;
     91e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     922:	f042 0204 	orr.w	r2, r2, #4
     926:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     92a:	3302      	adds	r3, #2
	switch (*sp) {
     92c:	781a      	ldrb	r2, [r3, #0]
     92e:	2a6c      	cmp	r2, #108	; 0x6c
     930:	d047      	beq.n	9c2 <__z_interrupt_stack_SIZEOF+0x182>
     932:	d82b      	bhi.n	98c <__z_interrupt_stack_SIZEOF+0x14c>
     934:	2a68      	cmp	r2, #104	; 0x68
     936:	d031      	beq.n	99c <__z_interrupt_stack_SIZEOF+0x15c>
     938:	2a6a      	cmp	r2, #106	; 0x6a
     93a:	d04b      	beq.n	9d4 <__z_interrupt_stack_SIZEOF+0x194>
     93c:	2a4c      	cmp	r2, #76	; 0x4c
     93e:	d051      	beq.n	9e4 <__z_interrupt_stack_SIZEOF+0x1a4>
	conv->specifier = *sp++;
     940:	461a      	mov	r2, r3
     942:	f812 3b01 	ldrb.w	r3, [r2], #1
     946:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     948:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     94a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     94e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     952:	f200 80be 	bhi.w	ad2 <__z_interrupt_stack_SIZEOF+0x292>
     956:	2b6d      	cmp	r3, #109	; 0x6d
     958:	d851      	bhi.n	9fe <__z_interrupt_stack_SIZEOF+0x1be>
     95a:	2b69      	cmp	r3, #105	; 0x69
     95c:	f200 80b9 	bhi.w	ad2 <__z_interrupt_stack_SIZEOF+0x292>
     960:	2b57      	cmp	r3, #87	; 0x57
     962:	d867      	bhi.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
     964:	2b41      	cmp	r3, #65	; 0x41
     966:	d003      	beq.n	970 <__z_interrupt_stack_SIZEOF+0x130>
     968:	3b45      	subs	r3, #69	; 0x45
     96a:	2b02      	cmp	r3, #2
     96c:	f200 80b1 	bhi.w	ad2 <__z_interrupt_stack_SIZEOF+0x292>
		conv->specifier_cat = SPECIFIER_FP;
     970:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     974:	2204      	movs	r2, #4
     976:	f362 0302 	bfi	r3, r2, #0, #3
     97a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     97e:	2301      	movs	r3, #1
			break;
     980:	e073      	b.n	a6a <__z_interrupt_stack_SIZEOF+0x22a>
		val = 10U * val + *sp++ - '0';
     982:	fb0c 0202 	mla	r2, ip, r2, r0
     986:	3a30      	subs	r2, #48	; 0x30
     988:	460b      	mov	r3, r1
     98a:	e75d      	b.n	848 <__z_interrupt_stack_SIZEOF+0x8>
	switch (*sp) {
     98c:	2a74      	cmp	r2, #116	; 0x74
     98e:	d025      	beq.n	9dc <__z_interrupt_stack_SIZEOF+0x19c>
     990:	2a7a      	cmp	r2, #122	; 0x7a
     992:	d1d5      	bne.n	940 <__z_interrupt_stack_SIZEOF+0x100>
		conv->length_mod = LENGTH_Z;
     994:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     998:	2106      	movs	r1, #6
     99a:	e00c      	b.n	9b6 <__z_interrupt_stack_SIZEOF+0x176>
		if (*++sp == 'h') {
     99c:	785a      	ldrb	r2, [r3, #1]
     99e:	2a68      	cmp	r2, #104	; 0x68
     9a0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9a4:	d106      	bne.n	9b4 <__z_interrupt_stack_SIZEOF+0x174>
			conv->length_mod = LENGTH_HH;
     9a6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     9a8:	f361 02c6 	bfi	r2, r1, #3, #4
     9ac:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     9b0:	3302      	adds	r3, #2
     9b2:	e7c5      	b.n	940 <__z_interrupt_stack_SIZEOF+0x100>
			conv->length_mod = LENGTH_H;
     9b4:	2102      	movs	r1, #2
     9b6:	f361 02c6 	bfi	r2, r1, #3, #4
     9ba:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     9be:	3301      	adds	r3, #1
     9c0:	e7be      	b.n	940 <__z_interrupt_stack_SIZEOF+0x100>
		if (*++sp == 'l') {
     9c2:	785a      	ldrb	r2, [r3, #1]
     9c4:	2a6c      	cmp	r2, #108	; 0x6c
     9c6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9ca:	d101      	bne.n	9d0 <__z_interrupt_stack_SIZEOF+0x190>
			conv->length_mod = LENGTH_LL;
     9cc:	2104      	movs	r1, #4
     9ce:	e7eb      	b.n	9a8 <__z_interrupt_stack_SIZEOF+0x168>
			conv->length_mod = LENGTH_L;
     9d0:	2103      	movs	r1, #3
     9d2:	e7f0      	b.n	9b6 <__z_interrupt_stack_SIZEOF+0x176>
		conv->length_mod = LENGTH_J;
     9d4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9d8:	2105      	movs	r1, #5
     9da:	e7ec      	b.n	9b6 <__z_interrupt_stack_SIZEOF+0x176>
		conv->length_mod = LENGTH_T;
     9dc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     9e0:	2107      	movs	r1, #7
     9e2:	e7e8      	b.n	9b6 <__z_interrupt_stack_SIZEOF+0x176>
		conv->unsupported = true;
     9e4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     9e8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     9ec:	f022 0202 	bic.w	r2, r2, #2
     9f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     9f4:	f042 0202 	orr.w	r2, r2, #2
     9f8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     9fc:	e7df      	b.n	9be <__z_interrupt_stack_SIZEOF+0x17e>
	switch (conv->specifier) {
     9fe:	3b6e      	subs	r3, #110	; 0x6e
     a00:	b2d9      	uxtb	r1, r3
     a02:	2301      	movs	r3, #1
     a04:	408b      	lsls	r3, r1
     a06:	f240 4182 	movw	r1, #1154	; 0x482
     a0a:	420b      	tst	r3, r1
     a0c:	d137      	bne.n	a7e <__z_interrupt_stack_SIZEOF+0x23e>
     a0e:	f013 0f24 	tst.w	r3, #36	; 0x24
     a12:	d151      	bne.n	ab8 <__z_interrupt_stack_SIZEOF+0x278>
     a14:	07d8      	lsls	r0, r3, #31
     a16:	d55c      	bpl.n	ad2 <__z_interrupt_stack_SIZEOF+0x292>
		conv->specifier_cat = SPECIFIER_PTR;
     a18:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a1c:	2103      	movs	r1, #3
     a1e:	f361 0302 	bfi	r3, r1, #0, #3
     a22:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     a26:	f002 0378 	and.w	r3, r2, #120	; 0x78
     a2a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     a2e:	424b      	negs	r3, r1
     a30:	414b      	adcs	r3, r1
     a32:	e01a      	b.n	a6a <__z_interrupt_stack_SIZEOF+0x22a>
	switch (conv->specifier) {
     a34:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     a38:	b2c9      	uxtb	r1, r1
     a3a:	2001      	movs	r0, #1
     a3c:	fa00 f101 	lsl.w	r1, r0, r1
     a40:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     a44:	d194      	bne.n	970 <__z_interrupt_stack_SIZEOF+0x130>
     a46:	f640 0601 	movw	r6, #2049	; 0x801
     a4a:	4231      	tst	r1, r6
     a4c:	d11d      	bne.n	a8a <__z_interrupt_stack_SIZEOF+0x24a>
     a4e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     a52:	d03e      	beq.n	ad2 <__z_interrupt_stack_SIZEOF+0x292>
		conv->specifier_cat = SPECIFIER_SINT;
     a54:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a58:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a5c:	f002 0278 	and.w	r2, r2, #120	; 0x78
     a60:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     a62:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     a66:	d034      	beq.n	ad2 <__z_interrupt_stack_SIZEOF+0x292>
	bool unsupported = false;
     a68:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     a6a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     a6e:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a72:	430b      	orrs	r3, r1
     a74:	f363 0241 	bfi	r2, r3, #1, #1
     a78:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     a7c:	e6fd      	b.n	87a <__z_interrupt_stack_SIZEOF+0x3a>
		conv->specifier_cat = SPECIFIER_UINT;
     a7e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a82:	2102      	movs	r1, #2
     a84:	f361 0302 	bfi	r3, r1, #0, #3
     a88:	e7e8      	b.n	a5c <__z_interrupt_stack_SIZEOF+0x21c>
     a8a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     a8e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     a90:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     a94:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a98:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     a9a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     a9e:	bf02      	ittt	eq
     aa0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     aa4:	f041 0101 	orreq.w	r1, r1, #1
     aa8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     aac:	2b63      	cmp	r3, #99	; 0x63
     aae:	d1db      	bne.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
			unsupported = (conv->length_mod != LENGTH_NONE);
     ab0:	1e13      	subs	r3, r2, #0
     ab2:	bf18      	it	ne
     ab4:	2301      	movne	r3, #1
     ab6:	e7d8      	b.n	a6a <__z_interrupt_stack_SIZEOF+0x22a>
		conv->specifier_cat = SPECIFIER_PTR;
     ab8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     abc:	2103      	movs	r1, #3
     abe:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     ac2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     ac6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     aca:	bf14      	ite	ne
     acc:	2301      	movne	r3, #1
     ace:	2300      	moveq	r3, #0
     ad0:	e7cb      	b.n	a6a <__z_interrupt_stack_SIZEOF+0x22a>
		conv->invalid = true;
     ad2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ad6:	f043 0301 	orr.w	r3, r3, #1
     ada:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     ade:	e7c3      	b.n	a68 <__z_interrupt_stack_SIZEOF+0x228>
		} else if (conv->width_present) {
     ae0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     ae4:	2a00      	cmp	r2, #0
			width = conv->width_value;
     ae6:	bfb4      	ite	lt
     ae8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     aec:	f04f 38ff 	movge.w	r8, #4294967295
     af0:	e6d5      	b.n	89e <__z_interrupt_stack_SIZEOF+0x5e>
		} else if (conv->prec_present) {
     af2:	0798      	lsls	r0, r3, #30
     af4:	f57f aee2 	bpl.w	8bc <__z_interrupt_stack_SIZEOF+0x7c>
			precision = conv->prec_value;
     af8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     afc:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     b00:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     b02:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     b06:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     b0a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     b0e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     b10:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     b14:	d133      	bne.n	b7e <__z_interrupt_stack_SIZEOF+0x33e>
			switch (length_mod) {
     b16:	1ecb      	subs	r3, r1, #3
     b18:	2b04      	cmp	r3, #4
     b1a:	d804      	bhi.n	b26 <__z_interrupt_stack_SIZEOF+0x2e6>
     b1c:	e8df f003 	tbb	[pc, r3]
     b20:	21464621 	.word	0x21464621
     b24:	21          	.byte	0x21
     b25:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     b26:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     b28:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     b2a:	ea4f 72e3 	mov.w	r2, r3, asr #31
     b2e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b32:	d11c      	bne.n	b6e <__z_interrupt_stack_SIZEOF+0x32e>
				value->sint = (signed char)value->sint;
     b34:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     b38:	17da      	asrs	r2, r3, #31
     b3a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     b3e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     b40:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     b44:	f013 0603 	ands.w	r6, r3, #3
     b48:	d050      	beq.n	bec <__z_interrupt_stack_SIZEOF+0x3ac>
			OUTS(sp, fp);
     b4a:	9b03      	ldr	r3, [sp, #12]
     b4c:	463a      	mov	r2, r7
     b4e:	4659      	mov	r1, fp
     b50:	4648      	mov	r0, r9
     b52:	f003 fcd8 	bl	4506 <outs>
     b56:	2800      	cmp	r0, #0
     b58:	f2c0 8153 	blt.w	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     b5c:	4405      	add	r5, r0
			continue;
     b5e:	9f03      	ldr	r7, [sp, #12]
     b60:	e5f2      	b.n	748 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b62:	f854 3b04 	ldr.w	r3, [r4], #4
     b66:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     b68:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     b6c:	e7e8      	b.n	b40 <__z_interrupt_stack_SIZEOF+0x300>
			} else if (length_mod == LENGTH_H) {
     b6e:	2902      	cmp	r1, #2
     b70:	d1e5      	bne.n	b3e <__z_interrupt_stack_SIZEOF+0x2fe>
				value->sint = (short)value->sint;
     b72:	b21a      	sxth	r2, r3
     b74:	f343 33c0 	sbfx	r3, r3, #15, #1
     b78:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b7c:	e7df      	b.n	b3e <__z_interrupt_stack_SIZEOF+0x2fe>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b7e:	2b02      	cmp	r3, #2
     b80:	d124      	bne.n	bcc <__z_interrupt_stack_SIZEOF+0x38c>
			switch (length_mod) {
     b82:	1ecb      	subs	r3, r1, #3
     b84:	2b04      	cmp	r3, #4
     b86:	d804      	bhi.n	b92 <__z_interrupt_stack_SIZEOF+0x352>
     b88:	e8df f003 	tbb	[pc, r3]
     b8c:	18101018 	.word	0x18101018
     b90:	18          	.byte	0x18
     b91:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     b92:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     b94:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b98:	f04f 0200 	mov.w	r2, #0
     b9c:	d014      	beq.n	bc8 <__z_interrupt_stack_SIZEOF+0x388>
			} else if (length_mod == LENGTH_H) {
     b9e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     ba0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     ba4:	d1cc      	bne.n	b40 <__z_interrupt_stack_SIZEOF+0x300>
				value->uint = (unsigned short)value->uint;
     ba6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     ba8:	930e      	str	r3, [sp, #56]	; 0x38
     baa:	e7c9      	b.n	b40 <__z_interrupt_stack_SIZEOF+0x300>
					(uint_value_type)va_arg(ap,
     bac:	3407      	adds	r4, #7
     bae:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     bb2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     bb6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     bba:	e7c1      	b.n	b40 <__z_interrupt_stack_SIZEOF+0x300>
					(uint_value_type)va_arg(ap, size_t);
     bbc:	f854 3b04 	ldr.w	r3, [r4], #4
     bc0:	930e      	str	r3, [sp, #56]	; 0x38
     bc2:	2300      	movs	r3, #0
     bc4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     bc6:	e7bb      	b.n	b40 <__z_interrupt_stack_SIZEOF+0x300>
				value->uint = (unsigned char)value->uint;
     bc8:	b2db      	uxtb	r3, r3
     bca:	e7cd      	b.n	b68 <__z_interrupt_stack_SIZEOF+0x328>
		} else if (specifier_cat == SPECIFIER_FP) {
     bcc:	2b04      	cmp	r3, #4
     bce:	d108      	bne.n	be2 <__z_interrupt_stack_SIZEOF+0x3a2>
					(sint_value_type)va_arg(ap, long long);
     bd0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     bd2:	f024 0407 	bic.w	r4, r4, #7
     bd6:	e9d4 2300 	ldrd	r2, r3, [r4]
     bda:	3408      	adds	r4, #8
     bdc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     be0:	e7ae      	b.n	b40 <__z_interrupt_stack_SIZEOF+0x300>
		} else if (specifier_cat == SPECIFIER_PTR) {
     be2:	2b03      	cmp	r3, #3
     be4:	d1ac      	bne.n	b40 <__z_interrupt_stack_SIZEOF+0x300>
			value->ptr = va_arg(ap, void *);
     be6:	f854 3b04 	ldr.w	r3, [r4], #4
     bea:	e7dd      	b.n	ba8 <__z_interrupt_stack_SIZEOF+0x368>
		switch (conv->specifier) {
     bec:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     bf0:	2878      	cmp	r0, #120	; 0x78
     bf2:	d8b4      	bhi.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
     bf4:	2862      	cmp	r0, #98	; 0x62
     bf6:	d81c      	bhi.n	c32 <__z_interrupt_stack_SIZEOF+0x3f2>
     bf8:	2825      	cmp	r0, #37	; 0x25
     bfa:	f43f adad 	beq.w	758 <z_cbvprintf_impl+0x20>
     bfe:	2858      	cmp	r0, #88	; 0x58
     c00:	d1ad      	bne.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
			bps = encode_uint(value->uint, conv, buf, bpe);
     c02:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c06:	9300      	str	r3, [sp, #0]
     c08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     c0c:	ab08      	add	r3, sp, #32
     c0e:	aa10      	add	r2, sp, #64	; 0x40
     c10:	f003 fc33 	bl	447a <encode_uint>
			if (precision >= 0) {
     c14:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     c18:	4607      	mov	r7, r0
			if (precision >= 0) {
     c1a:	f280 809a 	bge.w	d52 <__z_interrupt_stack_SIZEOF+0x512>
		if (bps == NULL) {
     c1e:	2f00      	cmp	r7, #0
     c20:	d09d      	beq.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		size_t nj_len = (bpe - bps);
     c22:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c26:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     c28:	2e00      	cmp	r6, #0
     c2a:	f000 80c1 	beq.w	db0 <__z_interrupt_stack_SIZEOF+0x570>
			nj_len += 1U;
     c2e:	3001      	adds	r0, #1
     c30:	e0be      	b.n	db0 <__z_interrupt_stack_SIZEOF+0x570>
		switch (conv->specifier) {
     c32:	3863      	subs	r0, #99	; 0x63
     c34:	2815      	cmp	r0, #21
     c36:	d892      	bhi.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
     c38:	a201      	add	r2, pc, #4	; (adr r2, c40 <__z_interrupt_stack_SIZEOF+0x400>)
     c3a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     c3e:	bf00      	nop
     c40:	00000d15 	.word	0x00000d15
     c44:	00000d27 	.word	0x00000d27
     c48:	00000b5f 	.word	0x00000b5f
     c4c:	00000b5f 	.word	0x00000b5f
     c50:	00000b5f 	.word	0x00000b5f
     c54:	00000b5f 	.word	0x00000b5f
     c58:	00000d27 	.word	0x00000d27
     c5c:	00000b5f 	.word	0x00000b5f
     c60:	00000b5f 	.word	0x00000b5f
     c64:	00000b5f 	.word	0x00000b5f
     c68:	00000b5f 	.word	0x00000b5f
     c6c:	00000db5 	.word	0x00000db5
     c70:	00000d4d 	.word	0x00000d4d
     c74:	00000d73 	.word	0x00000d73
     c78:	00000b5f 	.word	0x00000b5f
     c7c:	00000b5f 	.word	0x00000b5f
     c80:	00000c99 	.word	0x00000c99
     c84:	00000b5f 	.word	0x00000b5f
     c88:	00000d4d 	.word	0x00000d4d
     c8c:	00000b5f 	.word	0x00000b5f
     c90:	00000b5f 	.word	0x00000b5f
     c94:	00000d4d 	.word	0x00000d4d
			if (precision >= 0) {
     c98:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     c9c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     c9e:	db35      	blt.n	d0c <__z_interrupt_stack_SIZEOF+0x4cc>
				len = strnlen(bps, precision);
     ca0:	4651      	mov	r1, sl
     ca2:	4638      	mov	r0, r7
     ca4:	f003 fc74 	bl	4590 <strnlen>
			bpe = bps + len;
     ca8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     cac:	2f00      	cmp	r7, #0
     cae:	f43f af56 	beq.w	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		char sign = 0;
     cb2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     cb4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     cb8:	f013 0210 	ands.w	r2, r3, #16
     cbc:	9205      	str	r2, [sp, #20]
     cbe:	f000 8093 	beq.w	de8 <__z_interrupt_stack_SIZEOF+0x5a8>
			nj_len += 2U;
     cc2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     cc4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     cc8:	bf48      	it	mi
     cca:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     ccc:	9204      	str	r2, [sp, #16]
     cce:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     cd0:	bf48      	it	mi
     cd2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     cd4:	f1b8 0f00 	cmp.w	r8, #0
     cd8:	f340 80a0 	ble.w	e1c <__z_interrupt_stack_SIZEOF+0x5dc>
			if (!conv->flag_dash) {
     cdc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     ce0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     ce4:	f3c2 0380 	ubfx	r3, r2, #2, #1
     ce8:	0750      	lsls	r0, r2, #29
     cea:	9306      	str	r3, [sp, #24]
     cec:	f100 8096 	bmi.w	e1c <__z_interrupt_stack_SIZEOF+0x5dc>
				if (conv->flag_zero) {
     cf0:	0651      	lsls	r1, r2, #25
     cf2:	f140 8089 	bpl.w	e08 <__z_interrupt_stack_SIZEOF+0x5c8>
					if (sign != 0) {
     cf6:	b13e      	cbz	r6, d08 <__z_interrupt_stack_SIZEOF+0x4c8>
						OUTC(sign);
     cf8:	4659      	mov	r1, fp
     cfa:	4630      	mov	r0, r6
     cfc:	47c8      	blx	r9
     cfe:	2800      	cmp	r0, #0
     d00:	db7f      	blt.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     d02:	9b06      	ldr	r3, [sp, #24]
     d04:	3501      	adds	r5, #1
     d06:	461e      	mov	r6, r3
					pad = '0';
     d08:	2230      	movs	r2, #48	; 0x30
     d0a:	e07e      	b.n	e0a <__z_interrupt_stack_SIZEOF+0x5ca>
				len = strlen(bps);
     d0c:	4638      	mov	r0, r7
     d0e:	f003 fc38 	bl	4582 <strlen>
     d12:	e7c9      	b.n	ca8 <__z_interrupt_stack_SIZEOF+0x468>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     d16:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
     d1a:	2600      	movs	r6, #0
			bps = buf;
     d1c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     d1e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
     d22:	2001      	movs	r0, #1
     d24:	e7c6      	b.n	cb4 <__z_interrupt_stack_SIZEOF+0x474>
			if (conv->flag_plus) {
     d26:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     d28:	bf5c      	itt	pl
     d2a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     d2e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
     d30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
     d34:	bf48      	it	mi
     d36:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
     d38:	2b00      	cmp	r3, #0
     d3a:	f6bf af62 	bge.w	c02 <__z_interrupt_stack_SIZEOF+0x3c2>
				value->uint = (uint_value_type)-sint;
     d3e:	4252      	negs	r2, r2
     d40:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     d44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
     d48:	262d      	movs	r6, #45	; 0x2d
     d4a:	e75a      	b.n	c02 <__z_interrupt_stack_SIZEOF+0x3c2>
		switch (conv->specifier) {
     d4c:	2600      	movs	r6, #0
     d4e:	e758      	b.n	c02 <__z_interrupt_stack_SIZEOF+0x3c2>
		char sign = 0;
     d50:	2600      	movs	r6, #0
				conv->flag_zero = false;
     d52:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     d56:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d5a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     d5c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     d60:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     d62:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     d66:	f67f af5a 	bls.w	c1e <__z_interrupt_stack_SIZEOF+0x3de>
					conv->pad0_value = precision - (int)len;
     d6a:	ebaa 0303 	sub.w	r3, sl, r3
     d6e:	9311      	str	r3, [sp, #68]	; 0x44
     d70:	e755      	b.n	c1e <__z_interrupt_stack_SIZEOF+0x3de>
			if (value->ptr != NULL) {
     d72:	980e      	ldr	r0, [sp, #56]	; 0x38
     d74:	b390      	cbz	r0, ddc <__z_interrupt_stack_SIZEOF+0x59c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d76:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d7a:	9300      	str	r3, [sp, #0]
     d7c:	aa10      	add	r2, sp, #64	; 0x40
     d7e:	ab08      	add	r3, sp, #32
     d80:	2100      	movs	r1, #0
     d82:	f003 fb7a 	bl	447a <encode_uint>
				conv->altform_0c = true;
     d86:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
     d8a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d8e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d92:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
     d96:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d9a:	4607      	mov	r7, r0
				conv->altform_0c = true;
     d9c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     da0:	dad6      	bge.n	d50 <__z_interrupt_stack_SIZEOF+0x510>
		if (bps == NULL) {
     da2:	2800      	cmp	r0, #0
     da4:	f43f aedb 	beq.w	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		size_t nj_len = (bpe - bps);
     da8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     dac:	1a18      	subs	r0, r3, r0
		char sign = 0;
     dae:	2600      	movs	r6, #0
     db0:	469a      	mov	sl, r3
     db2:	e77f      	b.n	cb4 <__z_interrupt_stack_SIZEOF+0x474>
				store_count(conv, value->ptr, count);
     db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     db6:	2907      	cmp	r1, #7
     db8:	f63f aed1 	bhi.w	b5e <__z_interrupt_stack_SIZEOF+0x31e>
     dbc:	e8df f001 	tbb	[pc, r1]
     dc0:	0c06040c 	.word	0x0c06040c
     dc4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     dc8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     dca:	e6c8      	b.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		*(short *)dp = (short)count;
     dcc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     dce:	e6c6      	b.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		*(intmax_t *)dp = (intmax_t)count;
     dd0:	17ea      	asrs	r2, r5, #31
     dd2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     dd6:	e6c2      	b.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     dd8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     dda:	e6c0      	b.n	b5e <__z_interrupt_stack_SIZEOF+0x31e>
     ddc:	4f2e      	ldr	r7, [pc, #184]	; (e98 <__z_interrupt_stack_SIZEOF+0x658>)
		char sign = 0;
     dde:	4606      	mov	r6, r0
			bpe = bps + 5;
     de0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     de4:	2005      	movs	r0, #5
     de6:	e765      	b.n	cb4 <__z_interrupt_stack_SIZEOF+0x474>
		} else if (conv->altform_0) {
     de8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     dea:	bf48      	it	mi
     dec:	3001      	addmi	r0, #1
     dee:	e769      	b.n	cc4 <__z_interrupt_stack_SIZEOF+0x484>
     df0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
     df2:	4610      	mov	r0, r2
     df4:	9206      	str	r2, [sp, #24]
     df6:	4659      	mov	r1, fp
     df8:	47c8      	blx	r9
     dfa:	2800      	cmp	r0, #0
     dfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     e00:	da04      	bge.n	e0c <__z_interrupt_stack_SIZEOF+0x5cc>
#undef OUTS
#undef OUTC
}
     e02:	b015      	add	sp, #84	; 0x54
     e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     e08:	2220      	movs	r2, #32
					pad = '0';
     e0a:	4643      	mov	r3, r8
				while (width-- > 0) {
     e0c:	4619      	mov	r1, r3
     e0e:	2900      	cmp	r1, #0
     e10:	f103 33ff 	add.w	r3, r3, #4294967295
     e14:	dcec      	bgt.n	df0 <__z_interrupt_stack_SIZEOF+0x5b0>
     e16:	4445      	add	r5, r8
     e18:	1a6d      	subs	r5, r5, r1
     e1a:	4698      	mov	r8, r3
		if (sign != 0) {
     e1c:	b12e      	cbz	r6, e2a <__z_interrupt_stack_SIZEOF+0x5ea>
			OUTC(sign);
     e1e:	4659      	mov	r1, fp
     e20:	4630      	mov	r0, r6
     e22:	47c8      	blx	r9
     e24:	2800      	cmp	r0, #0
     e26:	dbec      	blt.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     e28:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     e2a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     e2e:	06da      	lsls	r2, r3, #27
     e30:	d401      	bmi.n	e36 <__z_interrupt_stack_SIZEOF+0x5f6>
     e32:	071b      	lsls	r3, r3, #28
     e34:	d505      	bpl.n	e42 <__z_interrupt_stack_SIZEOF+0x602>
				OUTC('0');
     e36:	4659      	mov	r1, fp
     e38:	2030      	movs	r0, #48	; 0x30
     e3a:	47c8      	blx	r9
     e3c:	2800      	cmp	r0, #0
     e3e:	dbe0      	blt.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     e40:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     e42:	9b05      	ldr	r3, [sp, #20]
     e44:	b133      	cbz	r3, e54 <__z_interrupt_stack_SIZEOF+0x614>
				OUTC(conv->specifier);
     e46:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     e4a:	4659      	mov	r1, fp
     e4c:	47c8      	blx	r9
     e4e:	2800      	cmp	r0, #0
     e50:	dbd7      	blt.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     e52:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e54:	9e04      	ldr	r6, [sp, #16]
     e56:	442e      	add	r6, r5
     e58:	e005      	b.n	e66 <__z_interrupt_stack_SIZEOF+0x626>
				OUTC('0');
     e5a:	4659      	mov	r1, fp
     e5c:	2030      	movs	r0, #48	; 0x30
     e5e:	47c8      	blx	r9
     e60:	2800      	cmp	r0, #0
     e62:	dbce      	blt.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     e64:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e66:	1b73      	subs	r3, r6, r5
     e68:	2b00      	cmp	r3, #0
     e6a:	dcf6      	bgt.n	e5a <__z_interrupt_stack_SIZEOF+0x61a>
			OUTS(bps, bpe);
     e6c:	4653      	mov	r3, sl
     e6e:	463a      	mov	r2, r7
     e70:	4659      	mov	r1, fp
     e72:	4648      	mov	r0, r9
     e74:	f003 fb47 	bl	4506 <outs>
     e78:	2800      	cmp	r0, #0
     e7a:	dbc2      	blt.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     e7c:	4405      	add	r5, r0
		while (width > 0) {
     e7e:	44a8      	add	r8, r5
     e80:	eba8 0305 	sub.w	r3, r8, r5
     e84:	2b00      	cmp	r3, #0
     e86:	f77f ae6a 	ble.w	b5e <__z_interrupt_stack_SIZEOF+0x31e>
			OUTC(' ');
     e8a:	4659      	mov	r1, fp
     e8c:	2020      	movs	r0, #32
     e8e:	47c8      	blx	r9
     e90:	2800      	cmp	r0, #0
     e92:	dbb6      	blt.n	e02 <__z_interrupt_stack_SIZEOF+0x5c2>
     e94:	3501      	adds	r5, #1
			--width;
     e96:	e7f3      	b.n	e80 <__z_interrupt_stack_SIZEOF+0x640>
     e98:	000050c3 	.word	0x000050c3

00000e9c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     e9c:	f001 bd6e 	b.w	297c <SystemInit>

00000ea0 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
     ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ea4:	f8df 9098 	ldr.w	r9, [pc, #152]	; f40 <z_log_minimal_hexdump_print+0xa0>
     ea8:	4680      	mov	r8, r0
     eaa:	460f      	mov	r7, r1
     eac:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
     eae:	4614      	mov	r4, r2
     eb0:	19bd      	adds	r5, r7, r6
     eb2:	1b2d      	subs	r5, r5, r4
     eb4:	b90c      	cbnz	r4, eba <z_log_minimal_hexdump_print+0x1a>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
     eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
     eba:	f108 33ff 	add.w	r3, r8, #4294967295
     ebe:	2b03      	cmp	r3, #3
     ec0:	bf98      	it	ls
     ec2:	f819 1003 	ldrbls.w	r1, [r9, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
     ec6:	481f      	ldr	r0, [pc, #124]	; (f44 <z_log_minimal_hexdump_print+0xa4>)
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
     ec8:	f8df a07c 	ldr.w	sl, [pc, #124]	; f48 <z_log_minimal_hexdump_print+0xa8>
     ecc:	bf88      	it	hi
     ece:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
     ed0:	f003 f9e3 	bl	429a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     ed4:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
     ed8:	455c      	cmp	r4, fp
     eda:	d928      	bls.n	f2e <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
     edc:	f815 100b 	ldrb.w	r1, [r5, fp]
     ee0:	4650      	mov	r0, sl
     ee2:	f003 f9da 	bl	429a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     ee6:	f10b 0b01 	add.w	fp, fp, #1
     eea:	f1bb 0f08 	cmp.w	fp, #8
     eee:	d1f3      	bne.n	ed8 <z_log_minimal_hexdump_print+0x38>
	printk("|");
     ef0:	4816      	ldr	r0, [pc, #88]	; (f4c <z_log_minimal_hexdump_print+0xac>)
			printk("%c", isprint((int)c) != 0 ? c : '.');
     ef2:	f8df b05c 	ldr.w	fp, [pc, #92]	; f50 <z_log_minimal_hexdump_print+0xb0>
	printk("|");
     ef6:	f003 f9d0 	bl	429a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     efa:	f04f 0a00 	mov.w	sl, #0
		if (i < length) {
     efe:	4554      	cmp	r4, sl
     f00:	d919      	bls.n	f36 <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
     f02:	f815 100a 	ldrb.w	r1, [r5, sl]
	return (int)((((unsigned)c) >= ' ') &&
     f06:	f1a1 0220 	sub.w	r2, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
     f0a:	2a5f      	cmp	r2, #95	; 0x5f
     f0c:	bf28      	it	cs
     f0e:	212e      	movcs	r1, #46	; 0x2e
     f10:	4658      	mov	r0, fp
     f12:	f003 f9c2 	bl	429a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     f16:	f10a 0a01 	add.w	sl, sl, #1
     f1a:	f1ba 0f08 	cmp.w	sl, #8
     f1e:	d1ee      	bne.n	efe <z_log_minimal_hexdump_print+0x5e>
	printk("\n");
     f20:	480c      	ldr	r0, [pc, #48]	; (f54 <z_log_minimal_hexdump_print+0xb4>)
     f22:	f003 f9ba 	bl	429a <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
     f26:	2c07      	cmp	r4, #7
     f28:	d9c5      	bls.n	eb6 <z_log_minimal_hexdump_print+0x16>
		size -= HEXDUMP_BYTES_IN_LINE;
     f2a:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
     f2c:	e7c0      	b.n	eb0 <z_log_minimal_hexdump_print+0x10>
			printk("   ");
     f2e:	480a      	ldr	r0, [pc, #40]	; (f58 <z_log_minimal_hexdump_print+0xb8>)
     f30:	f003 f9b3 	bl	429a <printk>
     f34:	e7d7      	b.n	ee6 <z_log_minimal_hexdump_print+0x46>
			printk(" ");
     f36:	4809      	ldr	r0, [pc, #36]	; (f5c <z_log_minimal_hexdump_print+0xbc>)
     f38:	f003 f9af 	bl	429a <printk>
     f3c:	e7eb      	b.n	f16 <z_log_minimal_hexdump_print+0x76>
     f3e:	bf00      	nop
     f40:	000050dd 	.word	0x000050dd
     f44:	000050c9 	.word	0x000050c9
     f48:	000050ce 	.word	0x000050ce
     f4c:	000050d8 	.word	0x000050d8
     f50:	000050da 	.word	0x000050da
     f54:	00005711 	.word	0x00005711
     f58:	000050d4 	.word	0x000050d4
     f5c:	000050d6 	.word	0x000050d6

00000f60 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f64:	4605      	mov	r5, r0
	__asm__ volatile(
     f66:	f04f 0320 	mov.w	r3, #32
     f6a:	f3ef 8611 	mrs	r6, BASEPRI
     f6e:	f383 8812 	msr	BASEPRI_MAX, r3
     f72:	f3bf 8f6f 	isb	sy
	return list->head;
     f76:	4b0e      	ldr	r3, [pc, #56]	; (fb0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f78:	4f0e      	ldr	r7, [pc, #56]	; (fb4 <pm_state_notify+0x54>)
     f7a:	681c      	ldr	r4, [r3, #0]
     f7c:	f8df 8038 	ldr.w	r8, [pc, #56]	; fb8 <pm_state_notify+0x58>
     f80:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f84:	b92c      	cbnz	r4, f92 <pm_state_notify+0x32>
	__asm__ volatile(
     f86:	f386 8811 	msr	BASEPRI, r6
     f8a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     f92:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     f96:	2d00      	cmp	r5, #0
     f98:	bf18      	it	ne
     f9a:	4613      	movne	r3, r2
		if (callback) {
     f9c:	b12b      	cbz	r3, faa <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f9e:	f898 2010 	ldrb.w	r2, [r8, #16]
     fa2:	fb09 f202 	mul.w	r2, r9, r2
     fa6:	5cb8      	ldrb	r0, [r7, r2]
     fa8:	4798      	blx	r3
	return node->next;
     faa:	6824      	ldr	r4, [r4, #0]
     fac:	e7ea      	b.n	f84 <pm_state_notify+0x24>
     fae:	bf00      	nop
     fb0:	200001fc 	.word	0x200001fc
     fb4:	200001f0 	.word	0x200001f0
     fb8:	20000344 	.word	0x20000344

00000fbc <pm_system_resume>:

void pm_system_resume(void)
{
     fbc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     fbe:	4b19      	ldr	r3, [pc, #100]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fc0:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fc2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fc6:	f004 031f 	and.w	r3, r4, #31
     fca:	2201      	movs	r2, #1
     fcc:	409a      	lsls	r2, r3
     fce:	4b16      	ldr	r3, [pc, #88]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fd0:	0961      	lsrs	r1, r4, #5
     fd2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     fd6:	43d0      	mvns	r0, r2
     fd8:	e853 1f00 	ldrex	r1, [r3]
     fdc:	ea01 0500 	and.w	r5, r1, r0
     fe0:	e843 5600 	strex	r6, r5, [r3]
     fe4:	2e00      	cmp	r6, #0
     fe6:	d1f7      	bne.n	fd8 <pm_system_resume+0x1c>
     fe8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     fec:	420a      	tst	r2, r1
     fee:	d013      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
	if (pm_state_exit_post_ops != NULL) {
     ff0:	4b0e      	ldr	r3, [pc, #56]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     ff2:	4d0f      	ldr	r5, [pc, #60]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     ff4:	b18b      	cbz	r3, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		pm_state_exit_post_ops(info->state, info->substate_id);
     ff6:	230c      	movs	r3, #12
     ff8:	4363      	muls	r3, r4
     ffa:	18ea      	adds	r2, r5, r3
     ffc:	5ce8      	ldrb	r0, [r5, r3]
     ffe:	7851      	ldrb	r1, [r2, #1]
    1000:	f003 faf2 	bl	45e8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1004:	2000      	movs	r0, #0
    1006:	f7ff ffab 	bl	f60 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    100a:	230c      	movs	r3, #12
    100c:	435c      	muls	r4, r3
    100e:	192a      	adds	r2, r5, r4
    1010:	2300      	movs	r3, #0
    1012:	512b      	str	r3, [r5, r4]
    1014:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1018:	bd70      	pop	{r4, r5, r6, pc}
    101a:	f383 8811 	msr	BASEPRI, r3
    101e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1022:	e7ef      	b.n	1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    1024:	20000344 	.word	0x20000344
    1028:	20000204 	.word	0x20000204
    102c:	000045e9 	.word	0x000045e9
    1030:	200001f0 	.word	0x200001f0

00001034 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1038:	4b35      	ldr	r3, [pc, #212]	; (1110 <pm_system_suspend+0xdc>)
{
    103a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    103c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    103e:	f04f 0320 	mov.w	r3, #32
    1042:	f3ef 8811 	mrs	r8, BASEPRI
    1046:	f383 8812 	msr	BASEPRI_MAX, r3
    104a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    104e:	240c      	movs	r4, #12
    1050:	4b30      	ldr	r3, [pc, #192]	; (1114 <pm_system_suspend+0xe0>)
    1052:	4e31      	ldr	r6, [pc, #196]	; (1118 <pm_system_suspend+0xe4>)
    1054:	436c      	muls	r4, r5
    1056:	191a      	adds	r2, r3, r4
    1058:	5d19      	ldrb	r1, [r3, r4]
    105a:	2900      	cmp	r1, #0
    105c:	d04c      	beq.n	10f8 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    105e:	ca07      	ldmia	r2, {r0, r1, r2}
    1060:	eb06 0c04 	add.w	ip, r6, r4
    1064:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1068:	2200      	movs	r2, #0
    106a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    106c:	f388 8811 	msr	BASEPRI, r8
    1070:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1074:	230c      	movs	r3, #12
    1076:	436b      	muls	r3, r5
    1078:	18f2      	adds	r2, r6, r3
    107a:	5cf0      	ldrb	r0, [r6, r3]
    107c:	2800      	cmp	r0, #0
    107e:	d039      	beq.n	10f4 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1080:	1c7b      	adds	r3, r7, #1
    1082:	d010      	beq.n	10a6 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1084:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1088:	4c24      	ldr	r4, [pc, #144]	; (111c <pm_system_suspend+0xe8>)
    108a:	4a25      	ldr	r2, [pc, #148]	; (1120 <pm_system_suspend+0xec>)
    108c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1090:	2100      	movs	r1, #0
    1092:	fbec 4100 	umlal	r4, r1, ip, r0
    1096:	2300      	movs	r3, #0
    1098:	4620      	mov	r0, r4
    109a:	f7ff f81f 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    109e:	2101      	movs	r1, #1
    10a0:	1a38      	subs	r0, r7, r0
    10a2:	f001 fc09 	bl	28b8 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    10a6:	f002 fe3d 	bl	3d24 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    10aa:	2001      	movs	r0, #1
    10ac:	f7ff ff58 	bl	f60 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    10b0:	f3bf 8f5b 	dmb	ish
    10b4:	4b1b      	ldr	r3, [pc, #108]	; (1124 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    10b6:	096a      	lsrs	r2, r5, #5
    10b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    10bc:	f005 011f 	and.w	r1, r5, #31
    10c0:	2201      	movs	r2, #1
    10c2:	408a      	lsls	r2, r1
    10c4:	e853 0f00 	ldrex	r0, [r3]
    10c8:	4310      	orrs	r0, r2
    10ca:	e843 0100 	strex	r1, r0, [r3]
    10ce:	2900      	cmp	r1, #0
    10d0:	d1f8      	bne.n	10c4 <pm_system_suspend+0x90>
    10d2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    10d6:	4b14      	ldr	r3, [pc, #80]	; (1128 <pm_system_suspend+0xf4>)
    10d8:	b13b      	cbz	r3, 10ea <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    10da:	230c      	movs	r3, #12
    10dc:	fb03 f005 	mul.w	r0, r3, r5
    10e0:	1833      	adds	r3, r6, r0
    10e2:	5c30      	ldrb	r0, [r6, r0]
    10e4:	7859      	ldrb	r1, [r3, #1]
    10e6:	f003 fa73 	bl	45d0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    10ea:	f7ff ff67 	bl	fbc <pm_system_resume>
	k_sched_unlock();
    10ee:	f002 fe2d 	bl	3d4c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    10f2:	2001      	movs	r0, #1
}
    10f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    10f8:	4601      	mov	r1, r0
    10fa:	4628      	mov	r0, r5
    10fc:	f000 f816 	bl	112c <pm_policy_next_state>
		if (info != NULL) {
    1100:	2800      	cmp	r0, #0
    1102:	d0b3      	beq.n	106c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1104:	c807      	ldmia	r0, {r0, r1, r2}
    1106:	4434      	add	r4, r6
    1108:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    110c:	e7ae      	b.n	106c <pm_system_suspend+0x38>
    110e:	bf00      	nop
    1110:	20000344 	.word	0x20000344
    1114:	200001e4 	.word	0x200001e4
    1118:	200001f0 	.word	0x200001f0
    111c:	000f423f 	.word	0x000f423f
    1120:	000f4240 	.word	0x000f4240
    1124:	20000204 	.word	0x20000204
    1128:	000045d1 	.word	0x000045d1

0000112c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    112c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1130:	b085      	sub	sp, #20
    1132:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1134:	a903      	add	r1, sp, #12
    1136:	f000 f843 	bl	11c0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    113a:	4b1e      	ldr	r3, [pc, #120]	; (11b4 <pm_policy_next_state+0x88>)
    113c:	9d03      	ldr	r5, [sp, #12]
    113e:	f8d3 a000 	ldr.w	sl, [r3]
    1142:	f8df 8074 	ldr.w	r8, [pc, #116]	; 11b8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1146:	1e43      	subs	r3, r0, #1
    1148:	b21b      	sxth	r3, r3
    114a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    114e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1150:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1154:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1158:	f04f 0b00 	mov.w	fp, #0
    115c:	b924      	cbnz	r4, 1168 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    115e:	46a1      	mov	r9, r4
}
    1160:	4648      	mov	r0, r9
    1162:	b005      	add	sp, #20
    1164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1168:	6868      	ldr	r0, [r5, #4]
    116a:	4a14      	ldr	r2, [pc, #80]	; (11bc <pm_policy_next_state+0x90>)
    116c:	46c4      	mov	ip, r8
    116e:	4659      	mov	r1, fp
    1170:	fbe0 c107 	umlal	ip, r1, r0, r7
    1174:	2300      	movs	r3, #0
    1176:	4660      	mov	r0, ip
    1178:	f7fe ffb0 	bl	dc <__aeabi_uldivmod>
    117c:	9001      	str	r0, [sp, #4]
    117e:	68a8      	ldr	r0, [r5, #8]
    1180:	4a0e      	ldr	r2, [pc, #56]	; (11bc <pm_policy_next_state+0x90>)
    1182:	46c4      	mov	ip, r8
    1184:	4659      	mov	r1, fp
    1186:	fbe0 c107 	umlal	ip, r1, r0, r7
    118a:	2300      	movs	r3, #0
    118c:	4660      	mov	r0, ip
    118e:	f7fe ffa5 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1192:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    1196:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1198:	d001      	beq.n	119e <pm_policy_next_state+0x72>
    119a:	4582      	cmp	sl, r0
    119c:	d905      	bls.n	11aa <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    119e:	1c73      	adds	r3, r6, #1
    11a0:	d0de      	beq.n	1160 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    11a2:	9b01      	ldr	r3, [sp, #4]
    11a4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    11a6:	42b0      	cmp	r0, r6
    11a8:	d9da      	bls.n	1160 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    11aa:	3c01      	subs	r4, #1
    11ac:	b2a4      	uxth	r4, r4
    11ae:	3d0c      	subs	r5, #12
    11b0:	e7d4      	b.n	115c <pm_policy_next_state+0x30>
    11b2:	bf00      	nop
    11b4:	20000004 	.word	0x20000004
    11b8:	000f423f 	.word	0x000f423f
    11bc:	000f4240 	.word	0x000f4240

000011c0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    11c0:	b908      	cbnz	r0, 11c6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    11c2:	4b02      	ldr	r3, [pc, #8]	; (11cc <pm_state_cpu_get_all+0xc>)
    11c4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    11c6:	2000      	movs	r0, #0
    11c8:	4770      	bx	lr
    11ca:	bf00      	nop
    11cc:	00004e88 	.word	0x00004e88

000011d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    11d0:	4901      	ldr	r1, [pc, #4]	; (11d8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    11d2:	2210      	movs	r2, #16
	str	r2, [r1]
    11d4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    11d6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    11d8:	e000ed10 	.word	0xe000ed10

000011dc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    11dc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    11de:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    11e0:	f380 8811 	msr	BASEPRI, r0
	isb
    11e4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    11e8:	f3bf 8f4f 	dsb	sy
    11ec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    11ee:	b662      	cpsie	i
	isb
    11f0:	f3bf 8f6f 	isb	sy

	bx	lr
    11f4:	4770      	bx	lr
    11f6:	bf00      	nop

000011f8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    11f8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    11fa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    11fc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1200:	f3bf 8f4f 	dsb	sy
    1204:	bf20      	wfe

	msr	BASEPRI, r0
    1206:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    120a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    120c:	4770      	bx	lr
    120e:	bf00      	nop

00001210 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1210:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1212:	4605      	mov	r5, r0

	if (esf != NULL) {
    1214:	460c      	mov	r4, r1
    1216:	b1c9      	cbz	r1, 124c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1218:	688b      	ldr	r3, [r1, #8]
    121a:	9300      	str	r3, [sp, #0]
    121c:	e9d1 2300 	ldrd	r2, r3, [r1]
    1220:	480e      	ldr	r0, [pc, #56]	; (125c <z_arm_fatal_error+0x4c>)
    1222:	2145      	movs	r1, #69	; 0x45
    1224:	f003 f987 	bl	4536 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1228:	6963      	ldr	r3, [r4, #20]
    122a:	9300      	str	r3, [sp, #0]
    122c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1230:	480b      	ldr	r0, [pc, #44]	; (1260 <z_arm_fatal_error+0x50>)
    1232:	2145      	movs	r1, #69	; 0x45
    1234:	f003 f97f 	bl	4536 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1238:	69e2      	ldr	r2, [r4, #28]
    123a:	480a      	ldr	r0, [pc, #40]	; (1264 <z_arm_fatal_error+0x54>)
    123c:	2145      	movs	r1, #69	; 0x45
    123e:	f003 f97a 	bl	4536 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1242:	69a2      	ldr	r2, [r4, #24]
    1244:	4808      	ldr	r0, [pc, #32]	; (1268 <z_arm_fatal_error+0x58>)
    1246:	2145      	movs	r1, #69	; 0x45
    1248:	f003 f975 	bl	4536 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    124c:	4621      	mov	r1, r4
    124e:	4628      	mov	r0, r5
}
    1250:	b003      	add	sp, #12
    1252:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1256:	f002 b975 	b.w	3544 <z_fatal_error>
    125a:	bf00      	nop
    125c:	000050e4 	.word	0x000050e4
    1260:	00005118 	.word	0x00005118
    1264:	0000514c 	.word	0x0000514c
    1268:	00005160 	.word	0x00005160

0000126c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    126c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    126e:	2800      	cmp	r0, #0
    1270:	db07      	blt.n	1282 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1272:	4a04      	ldr	r2, [pc, #16]	; (1284 <arch_irq_enable+0x18>)
    1274:	0941      	lsrs	r1, r0, #5
    1276:	2301      	movs	r3, #1
    1278:	f000 001f 	and.w	r0, r0, #31
    127c:	4083      	lsls	r3, r0
    127e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1282:	4770      	bx	lr
    1284:	e000e100 	.word	0xe000e100

00001288 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1288:	4b05      	ldr	r3, [pc, #20]	; (12a0 <arch_irq_is_enabled+0x18>)
    128a:	0942      	lsrs	r2, r0, #5
    128c:	f000 001f 	and.w	r0, r0, #31
    1290:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1294:	2301      	movs	r3, #1
    1296:	fa03 f000 	lsl.w	r0, r3, r0
}
    129a:	4010      	ands	r0, r2
    129c:	4770      	bx	lr
    129e:	bf00      	nop
    12a0:	e000e100 	.word	0xe000e100

000012a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    12a4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    12a6:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12a8:	bfa8      	it	ge
    12aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    12ae:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12b2:	bfb8      	it	lt
    12b4:	4b06      	ldrlt	r3, [pc, #24]	; (12d0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12b6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    12ba:	bfac      	ite	ge
    12bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12c4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12c6:	bfb4      	ite	lt
    12c8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12ca:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    12ce:	4770      	bx	lr
    12d0:	e000ed14 	.word	0xe000ed14

000012d4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    12d4:	bf30      	wfi
    b z_SysNmiOnReset
    12d6:	f7ff bffd 	b.w	12d4 <z_SysNmiOnReset>
    12da:	bf00      	nop

000012dc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12dc:	4a0b      	ldr	r2, [pc, #44]	; (130c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    12de:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12e0:	4b0b      	ldr	r3, [pc, #44]	; (1310 <z_arm_prep_c+0x34>)
    12e2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    12e6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12ec:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    12f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    12f4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    12f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    12fc:	f002 f9ac 	bl	3658 <z_bss_zero>
	z_data_copy();
    1300:	f002 fe4a 	bl	3f98 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1304:	f000 faec 	bl	18e0 <z_arm_interrupt_init>
	z_cstart();
    1308:	f002 f9ea 	bl	36e0 <z_cstart>
    130c:	00000000 	.word	0x00000000
    1310:	e000ed00 	.word	0xe000ed00

00001314 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1314:	4a09      	ldr	r2, [pc, #36]	; (133c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1316:	490a      	ldr	r1, [pc, #40]	; (1340 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1318:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    131a:	6809      	ldr	r1, [r1, #0]
    131c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    131e:	4909      	ldr	r1, [pc, #36]	; (1344 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1320:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1322:	684b      	ldr	r3, [r1, #4]
    1324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1328:	604b      	str	r3, [r1, #4]
    132a:	2300      	movs	r3, #0
    132c:	f383 8811 	msr	BASEPRI, r3
    1330:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1334:	6893      	ldr	r3, [r2, #8]
}
    1336:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1338:	4770      	bx	lr
    133a:	bf00      	nop
    133c:	20000344 	.word	0x20000344
    1340:	00004f70 	.word	0x00004f70
    1344:	e000ed00 	.word	0xe000ed00

00001348 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1348:	4912      	ldr	r1, [pc, #72]	; (1394 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    134a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    134c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1350:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1352:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1356:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    135a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    135c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1360:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1364:	4f0c      	ldr	r7, [pc, #48]	; (1398 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1366:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    136a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    136c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    136e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1370:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1372:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1374:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1376:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    137a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    137c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    137e:	f000 fb4b 	bl	1a18 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1382:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1386:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    138a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    138e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1392:	4770      	bx	lr
    ldr r1, =_kernel
    1394:	20000344 	.word	0x20000344
    ldr v4, =_SCS_ICSR
    1398:	e000ed04 	.word	0xe000ed04

0000139c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    139c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    13a0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    13a2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    13a6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    13aa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    13ac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    13b0:	2902      	cmp	r1, #2
    beq _oops
    13b2:	d0ff      	beq.n	13b4 <_oops>

000013b4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    13b4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    13b6:	f003 f8cb 	bl	4550 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    13ba:	bd01      	pop	{r0, pc}

000013bc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    13bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    13c0:	9b00      	ldr	r3, [sp, #0]
    13c2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    13c6:	490a      	ldr	r1, [pc, #40]	; (13f0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    13c8:	9b01      	ldr	r3, [sp, #4]
    13ca:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    13ce:	9b02      	ldr	r3, [sp, #8]
    13d0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    13d4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    13d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    13dc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    13e0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    13e4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    13e6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    13e8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    13ea:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    13ec:	4770      	bx	lr
    13ee:	bf00      	nop
    13f0:	000042b5 	.word	0x000042b5

000013f4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    13f4:	4a09      	ldr	r2, [pc, #36]	; (141c <z_check_thread_stack_fail+0x28>)
{
    13f6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    13f8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    13fa:	b170      	cbz	r0, 141a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    13fc:	f113 0f16 	cmn.w	r3, #22
    1400:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1402:	d005      	beq.n	1410 <z_check_thread_stack_fail+0x1c>
    1404:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1408:	429a      	cmp	r2, r3
    140a:	d805      	bhi.n	1418 <z_check_thread_stack_fail+0x24>
    140c:	4283      	cmp	r3, r0
    140e:	d203      	bcs.n	1418 <z_check_thread_stack_fail+0x24>
		return 0;
    1410:	4281      	cmp	r1, r0
    1412:	bf28      	it	cs
    1414:	2000      	movcs	r0, #0
    1416:	4770      	bx	lr
    1418:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    141a:	4770      	bx	lr
    141c:	20000344 	.word	0x20000344

00001420 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1420:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1422:	4b09      	ldr	r3, [pc, #36]	; (1448 <arch_switch_to_main_thread+0x28>)
{
    1424:	460d      	mov	r5, r1
    1426:	4614      	mov	r4, r2
	_current = main_thread;
    1428:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    142a:	f000 faf5 	bl	1a18 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    142e:	4620      	mov	r0, r4
    1430:	f385 8809 	msr	PSP, r5
    1434:	2100      	movs	r1, #0
    1436:	b663      	cpsie	if
    1438:	f381 8811 	msr	BASEPRI, r1
    143c:	f3bf 8f6f 	isb	sy
    1440:	2200      	movs	r2, #0
    1442:	2300      	movs	r3, #0
    1444:	f002 ff36 	bl	42b4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1448:	20000344 	.word	0x20000344

0000144c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    144c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    144e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1450:	4a0b      	ldr	r2, [pc, #44]	; (1480 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1452:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    1454:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1456:	bf1e      	ittt	ne
	movne	r1, #0
    1458:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    145a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    145c:	f003 fb0b 	blne	4a76 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1460:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1462:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1466:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    146a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    146e:	4905      	ldr	r1, [pc, #20]	; (1484 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1470:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1472:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1474:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1476:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    147a:	4903      	ldr	r1, [pc, #12]	; (1488 <_isr_wrapper+0x3c>)
	bx r1
    147c:	4708      	bx	r1
    147e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1480:	20000344 	.word	0x20000344
	ldr r1, =_sw_isr_table
    1484:	00004cb0 	.word	0x00004cb0
	ldr r1, =z_arm_int_exit
    1488:	0000148d 	.word	0x0000148d

0000148c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    148c:	4b04      	ldr	r3, [pc, #16]	; (14a0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    148e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1490:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    1492:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1494:	d003      	beq.n	149e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1496:	4903      	ldr	r1, [pc, #12]	; (14a4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    149c:	600a      	str	r2, [r1, #0]

0000149e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    149e:	4770      	bx	lr
	ldr r3, =_kernel
    14a0:	20000344 	.word	0x20000344
	ldr r1, =_SCS_ICSR
    14a4:	e000ed04 	.word	0xe000ed04

000014a8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    14a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    14ac:	4d36      	ldr	r5, [pc, #216]	; (1588 <mem_manage_fault+0xe0>)
{
    14ae:	4680      	mov	r8, r0
    14b0:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    14b2:	4836      	ldr	r0, [pc, #216]	; (158c <mem_manage_fault+0xe4>)
    14b4:	2145      	movs	r1, #69	; 0x45
{
    14b6:	4617      	mov	r7, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    14b8:	f003 f83d 	bl	4536 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    14bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    14be:	06de      	lsls	r6, r3, #27
    14c0:	d526      	bpl.n	1510 <mem_manage_fault+0x68>
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
    14c2:	4833      	ldr	r0, [pc, #204]	; (1590 <mem_manage_fault+0xe8>)
    14c4:	2145      	movs	r1, #69	; 0x45
    14c6:	f003 f836 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_MEM_STACKING;
    14ca:	2411      	movs	r4, #17
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    14cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    14ce:	071d      	lsls	r5, r3, #28
    14d0:	d504      	bpl.n	14dc <mem_manage_fault+0x34>
		reason = K_ERR_ARM_MEM_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    14d2:	4830      	ldr	r0, [pc, #192]	; (1594 <mem_manage_fault+0xec>)
    14d4:	2145      	movs	r1, #69	; 0x45
    14d6:	f003 f82e 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_MEM_UNSTACKING;
    14da:	2412      	movs	r4, #18
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    14dc:	4d2a      	ldr	r5, [pc, #168]	; (1588 <mem_manage_fault+0xe0>)
    14de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    14e0:	0798      	lsls	r0, r3, #30
    14e2:	d517      	bpl.n	1514 <mem_manage_fault+0x6c>
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
		PR_FAULT_INFO("  Data Access Violation");
    14e4:	2145      	movs	r1, #69	; 0x45
    14e6:	482c      	ldr	r0, [pc, #176]	; (1598 <mem_manage_fault+0xf0>)
    14e8:	f003 f825 	bl	4536 <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    14ec:	6b6e      	ldr	r6, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    14ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    14f0:	0619      	lsls	r1, r3, #24
    14f2:	d545      	bpl.n	1580 <mem_manage_fault+0xd8>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    14f4:	4829      	ldr	r0, [pc, #164]	; (159c <mem_manage_fault+0xf4>)
    14f6:	4632      	mov	r2, r6
    14f8:	2145      	movs	r1, #69	; 0x45
    14fa:	f003 f81c 	bl	4536 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    14fe:	f1b9 0f00 	cmp.w	r9, #0
    1502:	d003      	beq.n	150c <mem_manage_fault+0x64>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1504:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    150a:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    150c:	2413      	movs	r4, #19
    150e:	e003      	b.n	1518 <mem_manage_fault+0x70>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1510:	2410      	movs	r4, #16
    1512:	e7db      	b.n	14cc <mem_manage_fault+0x24>
	uint32_t mmfar = -EINVAL;
    1514:	f06f 0615 	mvn.w	r6, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1518:	4d1b      	ldr	r5, [pc, #108]	; (1588 <mem_manage_fault+0xe0>)
    151a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    151c:	07da      	lsls	r2, r3, #31
    151e:	d504      	bpl.n	152a <mem_manage_fault+0x82>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
		PR_FAULT_INFO("  Instruction Access Violation");
    1520:	481f      	ldr	r0, [pc, #124]	; (15a0 <mem_manage_fault+0xf8>)
    1522:	2145      	movs	r1, #69	; 0x45
    1524:	f003 f807 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1528:	2414      	movs	r4, #20
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    152a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    152c:	069b      	lsls	r3, r3, #26
    152e:	d504      	bpl.n	153a <mem_manage_fault+0x92>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
		PR_FAULT_INFO(
    1530:	481c      	ldr	r0, [pc, #112]	; (15a4 <mem_manage_fault+0xfc>)
    1532:	2145      	movs	r1, #69	; 0x45
    1534:	f002 ffff 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1538:	2415      	movs	r4, #21
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    153a:	4b13      	ldr	r3, [pc, #76]	; (1588 <mem_manage_fault+0xe0>)
    153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    153e:	06d5      	lsls	r5, r2, #27
    1540:	d402      	bmi.n	1548 <mem_manage_fault+0xa0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1544:	0790      	lsls	r0, r2, #30
    1546:	d50a      	bpl.n	155e <mem_manage_fault+0xb6>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1548:	685b      	ldr	r3, [r3, #4]
    154a:	0519      	lsls	r1, r3, #20
    154c:	d507      	bpl.n	155e <mem_manage_fault+0xb6>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    154e:	4641      	mov	r1, r8
    1550:	4630      	mov	r0, r6
    1552:	f7ff ff4f 	bl	13f4 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    1556:	b110      	cbz	r0, 155e <mem_manage_fault+0xb6>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1558:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    155c:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    155e:	4b0a      	ldr	r3, [pc, #40]	; (1588 <mem_manage_fault+0xe0>)
    1560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1562:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1564:	bf42      	ittt	mi
    1566:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1568:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    156c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    156e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1570:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1574:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1576:	2300      	movs	r3, #0
    1578:	703b      	strb	r3, [r7, #0]

	return reason;
}
    157a:	4620      	mov	r0, r4
    157c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mmfar = -EINVAL;
    1580:	f06f 0615 	mvn.w	r6, #21
    1584:	e7c2      	b.n	150c <mem_manage_fault+0x64>
    1586:	bf00      	nop
    1588:	e000ed00 	.word	0xe000ed00
    158c:	00005193 	.word	0x00005193
    1590:	000051ae 	.word	0x000051ae
    1594:	000051e6 	.word	0x000051e6
    1598:	000051fe 	.word	0x000051fe
    159c:	0000521b 	.word	0x0000521b
    15a0:	00005236 	.word	0x00005236
    15a4:	0000525a 	.word	0x0000525a

000015a8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    15a8:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15aa:	4c20      	ldr	r4, [pc, #128]	; (162c <usage_fault.constprop.0+0x84>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    15ac:	4820      	ldr	r0, [pc, #128]	; (1630 <usage_fault.constprop.0+0x88>)
    15ae:	2145      	movs	r1, #69	; 0x45
    15b0:	f002 ffc1 	bl	4536 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15b6:	0199      	lsls	r1, r3, #6
    15b8:	d536      	bpl.n	1628 <usage_fault.constprop.0+0x80>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    15ba:	481e      	ldr	r0, [pc, #120]	; (1634 <usage_fault.constprop.0+0x8c>)
    15bc:	2145      	movs	r1, #69	; 0x45
    15be:	f002 ffba 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_DIV_0;
    15c2:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15c6:	01da      	lsls	r2, r3, #7
    15c8:	d504      	bpl.n	15d4 <usage_fault.constprop.0+0x2c>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    15ca:	481b      	ldr	r0, [pc, #108]	; (1638 <usage_fault.constprop.0+0x90>)
    15cc:	2145      	movs	r1, #69	; 0x45
    15ce:	f002 ffb2 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    15d2:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    15d4:	4c15      	ldr	r4, [pc, #84]	; (162c <usage_fault.constprop.0+0x84>)
    15d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15d8:	031b      	lsls	r3, r3, #12
    15da:	d504      	bpl.n	15e6 <usage_fault.constprop.0+0x3e>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    15dc:	4817      	ldr	r0, [pc, #92]	; (163c <usage_fault.constprop.0+0x94>)
    15de:	2145      	movs	r1, #69	; 0x45
    15e0:	f002 ffa9 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    15e4:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    15e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15e8:	0359      	lsls	r1, r3, #13
    15ea:	d504      	bpl.n	15f6 <usage_fault.constprop.0+0x4e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    15ec:	4814      	ldr	r0, [pc, #80]	; (1640 <usage_fault.constprop.0+0x98>)
    15ee:	2145      	movs	r1, #69	; 0x45
    15f0:	f002 ffa1 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    15f4:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    15f6:	4c0d      	ldr	r4, [pc, #52]	; (162c <usage_fault.constprop.0+0x84>)
    15f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    15fa:	039a      	lsls	r2, r3, #14
    15fc:	d504      	bpl.n	1608 <usage_fault.constprop.0+0x60>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    15fe:	4811      	ldr	r0, [pc, #68]	; (1644 <usage_fault.constprop.0+0x9c>)
    1600:	2145      	movs	r1, #69	; 0x45
    1602:	f002 ff98 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1606:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1608:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    160a:	03db      	lsls	r3, r3, #15
    160c:	d504      	bpl.n	1618 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    160e:	480e      	ldr	r0, [pc, #56]	; (1648 <usage_fault.constprop.0+0xa0>)
    1610:	2145      	movs	r1, #69	; 0x45
    1612:	f002 ff90 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    1616:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1618:	4a04      	ldr	r2, [pc, #16]	; (162c <usage_fault.constprop.0+0x84>)
    161a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    161c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1620:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1624:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1626:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    1628:	201d      	movs	r0, #29
    162a:	e7cb      	b.n	15c4 <usage_fault.constprop.0+0x1c>
    162c:	e000ed00 	.word	0xe000ed00
    1630:	0000528e 	.word	0x0000528e
    1634:	000052ab 	.word	0x000052ab
    1638:	000052c3 	.word	0x000052c3
    163c:	000052e2 	.word	0x000052e2
    1640:	00005305 	.word	0x00005305
    1644:	0000532f 	.word	0x0000532f
    1648:	0000534e 	.word	0x0000534e

0000164c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    164c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    164e:	4c28      	ldr	r4, [pc, #160]	; (16f0 <bus_fault.constprop.0+0xa4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1650:	4606      	mov	r6, r0
    1652:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1654:	4827      	ldr	r0, [pc, #156]	; (16f4 <bus_fault.constprop.0+0xa8>)
    1656:	2145      	movs	r1, #69	; 0x45
    1658:	f002 ff6d 	bl	4536 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    165c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    165e:	04d9      	lsls	r1, r3, #19
    1660:	d53b      	bpl.n	16da <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Stacking error");
    1662:	4825      	ldr	r0, [pc, #148]	; (16f8 <bus_fault.constprop.0+0xac>)
    1664:	2145      	movs	r1, #69	; 0x45
    1666:	f002 ff66 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_STACKING;
    166a:	2017      	movs	r0, #23
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    166c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    166e:	051a      	lsls	r2, r3, #20
    1670:	d504      	bpl.n	167c <bus_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Unstacking error");
    1672:	4822      	ldr	r0, [pc, #136]	; (16fc <bus_fault.constprop.0+0xb0>)
    1674:	2145      	movs	r1, #69	; 0x45
    1676:	f002 ff5e 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    167a:	2018      	movs	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    167c:	4c1c      	ldr	r4, [pc, #112]	; (16f0 <bus_fault.constprop.0+0xa4>)
    167e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1680:	059b      	lsls	r3, r3, #22
    1682:	d511      	bpl.n	16a8 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Precise data bus error");
    1684:	481e      	ldr	r0, [pc, #120]	; (1700 <bus_fault.constprop.0+0xb4>)
    1686:	2145      	movs	r1, #69	; 0x45
    1688:	f002 ff55 	bl	4536 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    168c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    168e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1690:	0418      	lsls	r0, r3, #16
    1692:	d508      	bpl.n	16a6 <bus_fault.constprop.0+0x5a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1694:	481b      	ldr	r0, [pc, #108]	; (1704 <bus_fault.constprop.0+0xb8>)
    1696:	2145      	movs	r1, #69	; 0x45
    1698:	f002 ff4d 	bl	4536 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    169c:	b11e      	cbz	r6, 16a6 <bus_fault.constprop.0+0x5a>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    169e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    16a4:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    16a6:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    16a8:	4c11      	ldr	r4, [pc, #68]	; (16f0 <bus_fault.constprop.0+0xa4>)
    16aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16ac:	0559      	lsls	r1, r3, #21
    16ae:	d504      	bpl.n	16ba <bus_fault.constprop.0+0x6e>
		PR_FAULT_INFO("  Imprecise data bus error");
    16b0:	4815      	ldr	r0, [pc, #84]	; (1708 <bus_fault.constprop.0+0xbc>)
    16b2:	2145      	movs	r1, #69	; 0x45
    16b4:	f002 ff3f 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    16b8:	201a      	movs	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    16ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16bc:	05da      	lsls	r2, r3, #23
    16be:	d50e      	bpl.n	16de <bus_fault.constprop.0+0x92>
		PR_FAULT_INFO("  Instruction bus error");
    16c0:	4812      	ldr	r0, [pc, #72]	; (170c <bus_fault.constprop.0+0xc0>)
    16c2:	2145      	movs	r1, #69	; 0x45
    16c4:	f002 ff37 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    16c8:	201b      	movs	r0, #27
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    16ca:	4a09      	ldr	r2, [pc, #36]	; (16f0 <bus_fault.constprop.0+0xa4>)
    16cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    16ce:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    16d2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    16d4:	2300      	movs	r3, #0
    16d6:	702b      	strb	r3, [r5, #0]
}
    16d8:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    16da:	2016      	movs	r0, #22
    16dc:	e7c6      	b.n	166c <bus_fault.constprop.0+0x20>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    16de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    16e0:	049b      	lsls	r3, r3, #18
    16e2:	d5f2      	bpl.n	16ca <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    16e4:	480a      	ldr	r0, [pc, #40]	; (1710 <bus_fault.constprop.0+0xc4>)
    16e6:	2145      	movs	r1, #69	; 0x45
    16e8:	f002 ff25 	bl	4536 <z_log_minimal_printk>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    16ec:	201c      	movs	r0, #28
    16ee:	e7ec      	b.n	16ca <bus_fault.constprop.0+0x7e>
    16f0:	e000ed00 	.word	0xe000ed00
    16f4:	0000537e 	.word	0x0000537e
    16f8:	00005399 	.word	0x00005399
    16fc:	000051e6 	.word	0x000051e6
    1700:	000053af 	.word	0x000053af
    1704:	000053cd 	.word	0x000053cd
    1708:	000053e7 	.word	0x000053e7
    170c:	00005407 	.word	0x00005407
    1710:	0000525a 	.word	0x0000525a

00001714 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1718:	4b5d      	ldr	r3, [pc, #372]	; (1890 <z_arm_fault+0x17c>)
    171a:	685f      	ldr	r7, [r3, #4]
{
    171c:	b08a      	sub	sp, #40	; 0x28
    171e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1720:	f3c7 0408 	ubfx	r4, r7, #0, #9
    1724:	2600      	movs	r6, #0
    1726:	f386 8811 	msr	BASEPRI, r6
    172a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    172e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1732:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1736:	d107      	bne.n	1748 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1738:	f002 030c 	and.w	r3, r2, #12
    173c:	2b08      	cmp	r3, #8
    173e:	d114      	bne.n	176a <z_arm_fault+0x56>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1740:	4854      	ldr	r0, [pc, #336]	; (1894 <z_arm_fault+0x180>)
    1742:	2145      	movs	r1, #69	; 0x45
    1744:	f002 fef7 	bl	4536 <z_log_minimal_printk>
	*nested_exc = false;
    1748:	2600      	movs	r6, #0
		return NULL;
    174a:	4635      	mov	r5, r6
	*recoverable = false;
    174c:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    1750:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    1752:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    1756:	2b09      	cmp	r3, #9
    1758:	f200 8087 	bhi.w	186a <z_arm_fault+0x156>
    175c:	e8df f003 	tbb	[pc, r3]
    1760:	767e7a0a 	.word	0x767e7a0a
    1764:	85858585 	.word	0x85858585
    1768:	8285      	.short	0x8285
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    176a:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    176c:	bf4c      	ite	mi
    176e:	460d      	movmi	r5, r1
			*nested_exc = true;
    1770:	2601      	movpl	r6, #1
    1772:	e7eb      	b.n	174c <z_arm_fault+0x38>
	PR_FAULT_INFO("***** HARD FAULT *****");
    1774:	4848      	ldr	r0, [pc, #288]	; (1898 <z_arm_fault+0x184>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1776:	4c46      	ldr	r4, [pc, #280]	; (1890 <z_arm_fault+0x17c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1778:	2145      	movs	r1, #69	; 0x45
    177a:	f002 fedc 	bl	4536 <z_log_minimal_printk>
	*recoverable = false;
    177e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1784:	079a      	lsls	r2, r3, #30
    1786:	d505      	bpl.n	1794 <z_arm_fault+0x80>
		PR_EXC("  Bus fault on vector table read");
    1788:	4844      	ldr	r0, [pc, #272]	; (189c <z_arm_fault+0x188>)
    178a:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
    178c:	f002 fed3 	bl	4536 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1790:	2400      	movs	r4, #0
    1792:	e033      	b.n	17fc <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1794:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1796:	2b00      	cmp	r3, #0
    1798:	da02      	bge.n	17a0 <z_arm_fault+0x8c>
		PR_EXC("  Debug event");
    179a:	4841      	ldr	r0, [pc, #260]	; (18a0 <z_arm_fault+0x18c>)
    179c:	2145      	movs	r1, #69	; 0x45
    179e:	e7f5      	b.n	178c <z_arm_fault+0x78>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    17a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    17a2:	005b      	lsls	r3, r3, #1
    17a4:	d5f4      	bpl.n	1790 <z_arm_fault+0x7c>
		PR_EXC("  Fault escalation (see below)");
    17a6:	483f      	ldr	r0, [pc, #252]	; (18a4 <z_arm_fault+0x190>)
    17a8:	2145      	movs	r1, #69	; 0x45
    17aa:	f002 fec4 	bl	4536 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    17ae:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    17b0:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    17b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    17b6:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    17b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17bc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    17c0:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    17c2:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    17c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    17ca:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    17cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17d0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    17d4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    17d8:	429a      	cmp	r2, r3
    17da:	d009      	beq.n	17f0 <z_arm_fault+0xdc>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    17dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    17de:	b2db      	uxtb	r3, r3
    17e0:	b333      	cbz	r3, 1830 <z_arm_fault+0x11c>
			reason = mem_manage_fault(esf, 1, recoverable);
    17e2:	f10d 0207 	add.w	r2, sp, #7
    17e6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    17e8:	4628      	mov	r0, r5
    17ea:	f7ff fe5d 	bl	14a8 <mem_manage_fault>
    17ee:	e02f      	b.n	1850 <z_arm_fault+0x13c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    17f0:	682a      	ldr	r2, [r5, #0]
    17f2:	482d      	ldr	r0, [pc, #180]	; (18a8 <z_arm_fault+0x194>)
    17f4:	2145      	movs	r1, #69	; 0x45
    17f6:	f002 fe9e 	bl	4536 <z_log_minimal_printk>
			reason = esf->basic.r0;
    17fa:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    17fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1800:	b99b      	cbnz	r3, 182a <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1802:	2220      	movs	r2, #32
    1804:	4629      	mov	r1, r5
    1806:	a802      	add	r0, sp, #8
    1808:	f002 fecb 	bl	45a2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    180c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    180e:	2e00      	cmp	r6, #0
    1810:	d038      	beq.n	1884 <z_arm_fault+0x170>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1812:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1816:	b922      	cbnz	r2, 1822 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1818:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    181c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1820:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    1822:	a902      	add	r1, sp, #8
    1824:	4620      	mov	r0, r4
    1826:	f7ff fcf3 	bl	1210 <z_arm_fatal_error>
}
    182a:	b00a      	add	sp, #40	; 0x28
    182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1832:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    1836:	d005      	beq.n	1844 <z_arm_fault+0x130>
			reason = bus_fault(esf, 1, recoverable);
    1838:	f10d 0107 	add.w	r1, sp, #7
    183c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    183e:	f7ff ff05 	bl	164c <bus_fault.constprop.0>
    1842:	e005      	b.n	1850 <z_arm_fault+0x13c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    184a:	d3a1      	bcc.n	1790 <z_arm_fault+0x7c>
			reason = usage_fault(esf);
    184c:	f7ff feac 	bl	15a8 <usage_fault.constprop.0>
    1850:	4604      	mov	r4, r0
    1852:	e7d3      	b.n	17fc <z_arm_fault+0xe8>
		reason = mem_manage_fault(esf, 0, recoverable);
    1854:	f10d 0207 	add.w	r2, sp, #7
    1858:	2100      	movs	r1, #0
    185a:	e7c5      	b.n	17e8 <z_arm_fault+0xd4>
		reason = bus_fault(esf, 0, recoverable);
    185c:	f10d 0107 	add.w	r1, sp, #7
    1860:	2000      	movs	r0, #0
    1862:	e7ec      	b.n	183e <z_arm_fault+0x12a>
	PR_FAULT_INFO(
    1864:	4811      	ldr	r0, [pc, #68]	; (18ac <z_arm_fault+0x198>)
    1866:	2145      	movs	r1, #69	; 0x45
    1868:	e790      	b.n	178c <z_arm_fault+0x78>
	PR_FAULT_INFO("***** %s %d) *****",
    186a:	4911      	ldr	r1, [pc, #68]	; (18b0 <z_arm_fault+0x19c>)
    186c:	4a11      	ldr	r2, [pc, #68]	; (18b4 <z_arm_fault+0x1a0>)
    186e:	4812      	ldr	r0, [pc, #72]	; (18b8 <z_arm_fault+0x1a4>)
    1870:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    1874:	bf08      	it	eq
    1876:	460a      	moveq	r2, r1
    1878:	f1a4 0310 	sub.w	r3, r4, #16
    187c:	2145      	movs	r1, #69	; 0x45
    187e:	f002 fe5a 	bl	4536 <z_log_minimal_printk>
}
    1882:	e785      	b.n	1790 <z_arm_fault+0x7c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1884:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1888:	f023 0301 	bic.w	r3, r3, #1
    188c:	e7c8      	b.n	1820 <z_arm_fault+0x10c>
    188e:	bf00      	nop
    1890:	e000ed00 	.word	0xe000ed00
    1894:	00005452 	.word	0x00005452
    1898:	00005482 	.word	0x00005482
    189c:	0000549e 	.word	0x0000549e
    18a0:	000054c4 	.word	0x000054c4
    18a4:	000054d7 	.word	0x000054d7
    18a8:	000054fb 	.word	0x000054fb
    18ac:	0000551c 	.word	0x0000551c
    18b0:	00005424 	.word	0x00005424
    18b4:	00005439 	.word	0x00005439
    18b8:	00005545 	.word	0x00005545

000018bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    18bc:	4a02      	ldr	r2, [pc, #8]	; (18c8 <z_arm_fault_init+0xc>)
    18be:	6953      	ldr	r3, [r2, #20]
    18c0:	f043 0310 	orr.w	r3, r3, #16
    18c4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    18c6:	4770      	bx	lr
    18c8:	e000ed00 	.word	0xe000ed00

000018cc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    18cc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    18d0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    18d4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    18d6:	4672      	mov	r2, lr
	bl z_arm_fault
    18d8:	f7ff ff1c 	bl	1714 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    18dc:	bd01      	pop	{r0, pc}
    18de:	bf00      	nop

000018e0 <z_arm_interrupt_init>:
    18e0:	4804      	ldr	r0, [pc, #16]	; (18f4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    18e2:	2300      	movs	r3, #0
    18e4:	2120      	movs	r1, #32
    18e6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    18e8:	3301      	adds	r3, #1
    18ea:	2b27      	cmp	r3, #39	; 0x27
    18ec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    18f0:	d1f9      	bne.n	18e6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    18f2:	4770      	bx	lr
    18f4:	e000e100 	.word	0xe000e100

000018f8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    18f8:	2000      	movs	r0, #0
    msr CONTROL, r0
    18fa:	f380 8814 	msr	CONTROL, r0
    isb
    18fe:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1902:	f7ff facb 	bl	e9c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1906:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1908:	490d      	ldr	r1, [pc, #52]	; (1940 <__start+0x48>)
    str r0, [r1]
    190a:	6008      	str	r0, [r1, #0]
    dsb
    190c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1910:	480c      	ldr	r0, [pc, #48]	; (1944 <__start+0x4c>)
    msr msp, r0
    1912:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1916:	f000 f82b 	bl	1970 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    191a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    191c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1920:	4809      	ldr	r0, [pc, #36]	; (1948 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1922:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1926:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1928:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    192c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1930:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1932:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1934:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1938:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    193c:	f7ff fcce 	bl	12dc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1940:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1944:	20001580 	.word	0x20001580
    ldr r0, =z_interrupt_stacks
    1948:	200007c0 	.word	0x200007c0

0000194c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    194c:	4907      	ldr	r1, [pc, #28]	; (196c <z_arm_clear_arm_mpu_config+0x20>)
    194e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1952:	2300      	movs	r3, #0
	int num_regions =
    1954:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1958:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    195a:	4293      	cmp	r3, r2
    195c:	db00      	blt.n	1960 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    195e:	4770      	bx	lr
  MPU->RNR = rnr;
    1960:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1964:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1968:	3301      	adds	r3, #1
    196a:	e7f6      	b.n	195a <z_arm_clear_arm_mpu_config+0xe>
    196c:	e000ed00 	.word	0xe000ed00

00001970 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1970:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1972:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1974:	2300      	movs	r3, #0
    1976:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    197a:	f7ff ffe7 	bl	194c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    197e:	4b14      	ldr	r3, [pc, #80]	; (19d0 <z_arm_init_arch_hw_at_boot+0x60>)
    1980:	f04f 32ff 	mov.w	r2, #4294967295
    1984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    198c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1994:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1998:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    199c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    19a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    19a4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    19a8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    19ac:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    19b0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    19b4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    19b8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    19bc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    19c0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    19c4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    19c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19ca:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    19ce:	bd08      	pop	{r3, pc}
    19d0:	e000e100 	.word	0xe000e100

000019d4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    19d4:	4b08      	ldr	r3, [pc, #32]	; (19f8 <z_impl_k_thread_abort+0x24>)
    19d6:	689b      	ldr	r3, [r3, #8]
    19d8:	4283      	cmp	r3, r0
    19da:	d10b      	bne.n	19f4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    19dc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    19e0:	b143      	cbz	r3, 19f4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    19e2:	4b06      	ldr	r3, [pc, #24]	; (19fc <z_impl_k_thread_abort+0x28>)
    19e4:	685a      	ldr	r2, [r3, #4]
    19e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    19ea:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    19ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    19ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    19f2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    19f4:	f002 ba70 	b.w	3ed8 <z_thread_abort>
    19f8:	20000344 	.word	0x20000344
    19fc:	e000ed00 	.word	0xe000ed00

00001a00 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a00:	4b02      	ldr	r3, [pc, #8]	; (1a0c <z_arm_configure_static_mpu_regions+0xc>)
    1a02:	4a03      	ldr	r2, [pc, #12]	; (1a10 <z_arm_configure_static_mpu_regions+0x10>)
    1a04:	4803      	ldr	r0, [pc, #12]	; (1a14 <z_arm_configure_static_mpu_regions+0x14>)
    1a06:	2101      	movs	r1, #1
    1a08:	f000 b87c 	b.w	1b04 <arm_core_mpu_configure_static_mpu_regions>
    1a0c:	20010000 	.word	0x20010000
    1a10:	20000000 	.word	0x20000000
    1a14:	00004e88 	.word	0x00004e88

00001a18 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1a18:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1a1a:	4b05      	ldr	r3, [pc, #20]	; (1a30 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1a1c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    1a1e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1a20:	4a04      	ldr	r2, [pc, #16]	; (1a34 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1a22:	2140      	movs	r1, #64	; 0x40
    1a24:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1a28:	4618      	mov	r0, r3
    1a2a:	2101      	movs	r1, #1
    1a2c:	f000 b874 	b.w	1b18 <arm_core_mpu_configure_dynamic_mpu_regions>
    1a30:	20000208 	.word	0x20000208
    1a34:	150b0000 	.word	0x150b0000

00001a38 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1a3a:	4e24      	ldr	r6, [pc, #144]	; (1acc <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1a3c:	2500      	movs	r5, #0
    1a3e:	428d      	cmp	r5, r1
    1a40:	da0f      	bge.n	1a62 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
    1a42:	6844      	ldr	r4, [r0, #4]
    1a44:	2c00      	cmp	r4, #0
    1a46:	d03e      	beq.n	1ac6 <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1a48:	b19b      	cbz	r3, 1a72 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1a4a:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1a4e:	ea14 0f0c 	tst.w	r4, ip
    1a52:	d008      	beq.n	1a66 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    1a54:	481e      	ldr	r0, [pc, #120]	; (1ad0 <mpu_configure_regions+0x98>)
    1a56:	462a      	mov	r2, r5
    1a58:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1a5a:	f002 fd6c 	bl	4536 <z_log_minimal_printk>
			return -EINVAL;
    1a5e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1a62:	4610      	mov	r0, r2
    1a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    1a66:	2c1f      	cmp	r4, #31
    1a68:	d9f4      	bls.n	1a54 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
    1a6a:	6807      	ldr	r7, [r0, #0]
		&&
    1a6c:	ea1c 0f07 	tst.w	ip, r7
    1a70:	d1f0      	bne.n	1a54 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1a72:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1a74:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1a76:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1a7a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    1a7e:	d910      	bls.n	1aa2 <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
    1a80:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1a84:	d80f      	bhi.n	1aa6 <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1a86:	3c01      	subs	r4, #1
    1a88:	fab4 f484 	clz	r4, r4
    1a8c:	f1c4 041f 	rsb	r4, r4, #31
    1a90:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1a92:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1a96:	ea4c 0c04 	orr.w	ip, ip, r4
    1a9a:	d906      	bls.n	1aaa <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1a9c:	480d      	ldr	r0, [pc, #52]	; (1ad4 <mpu_configure_regions+0x9c>)
    1a9e:	2145      	movs	r1, #69	; 0x45
    1aa0:	e7db      	b.n	1a5a <mpu_configure_regions+0x22>
		return REGION_32B;
    1aa2:	2408      	movs	r4, #8
    1aa4:	e7f5      	b.n	1a92 <mpu_configure_regions+0x5a>
		return REGION_4G;
    1aa6:	243e      	movs	r4, #62	; 0x3e
    1aa8:	e7f3      	b.n	1a92 <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1aaa:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1aae:	4314      	orrs	r4, r2
    1ab0:	f044 0410 	orr.w	r4, r4, #16
    1ab4:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1ab8:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1abc:	f04c 0401 	orr.w	r4, ip, #1
    1ac0:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    1ac4:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1ac6:	3501      	adds	r5, #1
    1ac8:	300c      	adds	r0, #12
    1aca:	e7b8      	b.n	1a3e <mpu_configure_regions+0x6>
    1acc:	e000ed00 	.word	0xe000ed00
    1ad0:	00005561 	.word	0x00005561
    1ad4:	00005589 	.word	0x00005589

00001ad8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1ad8:	4b04      	ldr	r3, [pc, #16]	; (1aec <arm_core_mpu_enable+0x14>)
    1ada:	2205      	movs	r2, #5
    1adc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1ae0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ae4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1ae8:	4770      	bx	lr
    1aea:	bf00      	nop
    1aec:	e000ed00 	.word	0xe000ed00

00001af0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1af0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1af4:	4b02      	ldr	r3, [pc, #8]	; (1b00 <arm_core_mpu_disable+0x10>)
    1af6:	2200      	movs	r2, #0
    1af8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1afc:	4770      	bx	lr
    1afe:	bf00      	nop
    1b00:	e000ed00 	.word	0xe000ed00

00001b04 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1b04:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1b06:	4c03      	ldr	r4, [pc, #12]	; (1b14 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1b08:	2301      	movs	r3, #1
    1b0a:	7822      	ldrb	r2, [r4, #0]
    1b0c:	f7ff ff94 	bl	1a38 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1b10:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1b12:	bd10      	pop	{r4, pc}
    1b14:	20000378 	.word	0x20000378

00001b18 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    1b18:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1b1a:	4a09      	ldr	r2, [pc, #36]	; (1b40 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1b1c:	2300      	movs	r3, #0
    1b1e:	7812      	ldrb	r2, [r2, #0]
    1b20:	f7ff ff8a 	bl	1a38 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1b24:	f110 0f16 	cmn.w	r0, #22
    1b28:	d003      	beq.n	1b32 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    1b2a:	4b06      	ldr	r3, [pc, #24]	; (1b44 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    1b2c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1b2e:	2807      	cmp	r0, #7
    1b30:	dd00      	ble.n	1b34 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1b32:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    1b34:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    1b38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    1b3c:	3001      	adds	r0, #1
    1b3e:	e7f6      	b.n	1b2e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    1b40:	20000378 	.word	0x20000378
    1b44:	e000ed00 	.word	0xe000ed00

00001b48 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b48:	4914      	ldr	r1, [pc, #80]	; (1b9c <z_arm_mpu_init+0x54>)
    1b4a:	6808      	ldr	r0, [r1, #0]
    1b4c:	2808      	cmp	r0, #8
{
    1b4e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1b50:	d821      	bhi.n	1b96 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1b52:	f7ff ffcd 	bl	1af0 <arm_core_mpu_disable>
    1b56:	4c12      	ldr	r4, [pc, #72]	; (1ba0 <z_arm_mpu_init+0x58>)
    1b58:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b5a:	2200      	movs	r2, #0
    1b5c:	4290      	cmp	r0, r2
    1b5e:	f101 010c 	add.w	r1, r1, #12
    1b62:	d105      	bne.n	1b70 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b64:	4b0f      	ldr	r3, [pc, #60]	; (1ba4 <z_arm_mpu_init+0x5c>)
    1b66:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1b68:	f7ff ffb6 	bl	1ad8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1b6c:	2000      	movs	r0, #0
}
    1b6e:	bd10      	pop	{r4, pc}
    1b70:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1b74:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1b78:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1b7c:	4313      	orrs	r3, r2
    1b7e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1b82:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1b8a:	f043 0301 	orr.w	r3, r3, #1
    1b8e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b92:	3201      	adds	r2, #1
    1b94:	e7e2      	b.n	1b5c <z_arm_mpu_init+0x14>
		return -1;
    1b96:	f04f 30ff 	mov.w	r0, #4294967295
    1b9a:	e7e8      	b.n	1b6e <z_arm_mpu_init+0x26>
    1b9c:	00004e94 	.word	0x00004e94
    1ba0:	e000ed00 	.word	0xe000ed00
    1ba4:	20000378 	.word	0x20000378

00001ba8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1ba8:	4b01      	ldr	r3, [pc, #4]	; (1bb0 <__stdout_hook_install+0x8>)
    1baa:	6018      	str	r0, [r3, #0]
}
    1bac:	4770      	bx	lr
    1bae:	bf00      	nop
    1bb0:	20000008 	.word	0x20000008

00001bb4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1bb4:	f04f 0320 	mov.w	r3, #32
    1bb8:	f3ef 8211 	mrs	r2, BASEPRI
    1bbc:	f383 8812 	msr	BASEPRI_MAX, r3
    1bc0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1bc4:	4906      	ldr	r1, [pc, #24]	; (1be0 <nordicsemi_nrf52_init+0x2c>)
    1bc6:	2301      	movs	r3, #1
    1bc8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1bcc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1bd0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1bd4:	f382 8811 	msr	BASEPRI, r2
    1bd8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1bdc:	2000      	movs	r0, #0
    1bde:	4770      	bx	lr
    1be0:	4001e000 	.word	0x4001e000

00001be4 <sys_arch_reboot>:
    *p_gpregret = val;
    1be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1be8:	b2c0      	uxtb	r0, r0
    1bea:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1bee:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1bf2:	4905      	ldr	r1, [pc, #20]	; (1c08 <sys_arch_reboot+0x24>)
    1bf4:	4b05      	ldr	r3, [pc, #20]	; (1c0c <sys_arch_reboot+0x28>)
    1bf6:	68ca      	ldr	r2, [r1, #12]
    1bf8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1bfc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1bfe:	60cb      	str	r3, [r1, #12]
    1c00:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1c04:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1c06:	e7fd      	b.n	1c04 <sys_arch_reboot+0x20>
    1c08:	e000ed00 	.word	0xe000ed00
    1c0c:	05fa0004 	.word	0x05fa0004

00001c10 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1c10:	b120      	cbz	r0, 1c1c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1c12:	4b03      	ldr	r3, [pc, #12]	; (1c20 <arch_busy_wait+0x10>)
    1c14:	0180      	lsls	r0, r0, #6
    1c16:	f043 0301 	orr.w	r3, r3, #1
    1c1a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	00004e70 	.word	0x00004e70

00001c24 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1c24:	4b08      	ldr	r3, [pc, #32]	; (1c48 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c26:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1c28:	1ac3      	subs	r3, r0, r3
{
    1c2a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1c2c:	4907      	ldr	r1, [pc, #28]	; (1c4c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1c2e:	109b      	asrs	r3, r3, #2
{
    1c30:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1c32:	4359      	muls	r1, r3
    1c34:	4806      	ldr	r0, [pc, #24]	; (1c50 <onoff_stop+0x2c>)
    1c36:	2240      	movs	r2, #64	; 0x40
    1c38:	f002 fcf8 	bl	462c <stop>
	notify(mgr, res);
    1c3c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1c3e:	4601      	mov	r1, r0
	notify(mgr, res);
    1c40:	4620      	mov	r0, r4
}
    1c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1c46:	4718      	bx	r3
    1c48:	20000228 	.word	0x20000228
    1c4c:	b6db6db7 	.word	0xb6db6db7
    1c50:	00004c68 	.word	0x00004c68

00001c54 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1c56:	4c0c      	ldr	r4, [pc, #48]	; (1c88 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c58:	4a0c      	ldr	r2, [pc, #48]	; (1c8c <onoff_start+0x38>)
    1c5a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1c5c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c5e:	9300      	str	r3, [sp, #0]
{
    1c60:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c62:	460b      	mov	r3, r1
    1c64:	490a      	ldr	r1, [pc, #40]	; (1c90 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1c66:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c68:	4361      	muls	r1, r4
{
    1c6a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c6c:	4809      	ldr	r0, [pc, #36]	; (1c94 <onoff_start+0x40>)
    1c6e:	f002 fd09 	bl	4684 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1c72:	1e01      	subs	r1, r0, #0
    1c74:	da05      	bge.n	1c82 <onoff_start+0x2e>
		notify(mgr, err);
    1c76:	4630      	mov	r0, r6
    1c78:	462b      	mov	r3, r5
	}
}
    1c7a:	b002      	add	sp, #8
    1c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1c80:	4718      	bx	r3
}
    1c82:	b002      	add	sp, #8
    1c84:	bd70      	pop	{r4, r5, r6, pc}
    1c86:	bf00      	nop
    1c88:	20000228 	.word	0x20000228
    1c8c:	000046ef 	.word	0x000046ef
    1c90:	b6db6db7 	.word	0xb6db6db7
    1c94:	00004c68 	.word	0x00004c68

00001c98 <generic_hfclk_stop>:
{
    1c98:	b510      	push	{r4, lr}
	__asm__ volatile(
    1c9a:	f04f 0320 	mov.w	r3, #32
    1c9e:	f3ef 8411 	mrs	r4, BASEPRI
    1ca2:	f383 8812 	msr	BASEPRI_MAX, r3
    1ca6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1caa:	4a07      	ldr	r2, [pc, #28]	; (1cc8 <generic_hfclk_stop+0x30>)
    1cac:	6813      	ldr	r3, [r2, #0]
    1cae:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1cb2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1cb4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1cb6:	d402      	bmi.n	1cbe <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1cb8:	2001      	movs	r0, #1
    1cba:	f002 fead 	bl	4a18 <nrfx_clock_stop>
	__asm__ volatile(
    1cbe:	f384 8811 	msr	BASEPRI, r4
    1cc2:	f3bf 8f6f 	isb	sy
}
    1cc6:	bd10      	pop	{r4, pc}
    1cc8:	20000278 	.word	0x20000278

00001ccc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1ccc:	2200      	movs	r2, #0
{
    1cce:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1cd0:	2101      	movs	r1, #1
{
    1cd2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1cd4:	4610      	mov	r0, r2
    1cd6:	f7ff fae5 	bl	12a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1cda:	480f      	ldr	r0, [pc, #60]	; (1d18 <clk_init+0x4c>)
    1cdc:	f001 f82e 	bl	2d3c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1ce0:	4b0e      	ldr	r3, [pc, #56]	; (1d1c <clk_init+0x50>)
    1ce2:	4298      	cmp	r0, r3
    1ce4:	d115      	bne.n	1d12 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1ce6:	f002 fe8a 	bl	49fe <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1cea:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1cec:	490c      	ldr	r1, [pc, #48]	; (1d20 <clk_init+0x54>)
    1cee:	4630      	mov	r0, r6
    1cf0:	f002 fb3a 	bl	4368 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1cf4:	2800      	cmp	r0, #0
    1cf6:	db0b      	blt.n	1d10 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1cf8:	2501      	movs	r5, #1
    1cfa:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1cfc:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1cfe:	4908      	ldr	r1, [pc, #32]	; (1d20 <clk_init+0x54>)
    1d00:	f104 001c 	add.w	r0, r4, #28
    1d04:	f002 fb30 	bl	4368 <onoff_manager_init>
		if (err < 0) {
    1d08:	2800      	cmp	r0, #0
    1d0a:	db01      	blt.n	1d10 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d0c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1d0e:	2000      	movs	r0, #0
}
    1d10:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1d12:	f06f 0004 	mvn.w	r0, #4
    1d16:	e7fb      	b.n	1d10 <clk_init+0x44>
    1d18:	00001d59 	.word	0x00001d59
    1d1c:	0bad0000 	.word	0x0bad0000
    1d20:	00004eb4 	.word	0x00004eb4

00001d24 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1d24:	b570      	push	{r4, r5, r6, lr}
    1d26:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1d28:	230c      	movs	r3, #12
    1d2a:	4809      	ldr	r0, [pc, #36]	; (1d50 <clkstarted_handle.constprop.0+0x2c>)
    1d2c:	434b      	muls	r3, r1
    1d2e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1d30:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1d34:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1d36:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1d38:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1d3a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1d3c:	f002 fc63 	bl	4606 <set_on_state>
	if (callback) {
    1d40:	b12d      	cbz	r5, 1d4e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1d42:	4632      	mov	r2, r6
    1d44:	462b      	mov	r3, r5
    1d46:	4803      	ldr	r0, [pc, #12]	; (1d54 <clkstarted_handle.constprop.0+0x30>)
}
    1d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1d4c:	4718      	bx	r3
}
    1d4e:	bd70      	pop	{r4, r5, r6, pc}
    1d50:	20000228 	.word	0x20000228
    1d54:	00004c68 	.word	0x00004c68

00001d58 <clock_event_handler>:
	switch (event) {
    1d58:	b110      	cbz	r0, 1d60 <clock_event_handler+0x8>
    1d5a:	2801      	cmp	r0, #1
    1d5c:	d004      	beq.n	1d68 <clock_event_handler+0x10>
    1d5e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1d60:	4b03      	ldr	r3, [pc, #12]	; (1d70 <clock_event_handler+0x18>)
    1d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1d64:	075b      	lsls	r3, r3, #29
    1d66:	d101      	bne.n	1d6c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1d68:	f7ff bfdc 	b.w	1d24 <clkstarted_handle.constprop.0>
}
    1d6c:	4770      	bx	lr
    1d6e:	bf00      	nop
    1d70:	20000228 	.word	0x20000228

00001d74 <generic_hfclk_start>:
{
    1d74:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d76:	f04f 0320 	mov.w	r3, #32
    1d7a:	f3ef 8111 	mrs	r1, BASEPRI
    1d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    1d82:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1d86:	4a12      	ldr	r2, [pc, #72]	; (1dd0 <generic_hfclk_start+0x5c>)
    1d88:	6813      	ldr	r3, [r2, #0]
    1d8a:	f043 0002 	orr.w	r0, r3, #2
    1d8e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1d90:	07da      	lsls	r2, r3, #31
    1d92:	d408      	bmi.n	1da6 <generic_hfclk_start+0x32>
	__asm__ volatile(
    1d94:	f381 8811 	msr	BASEPRI, r1
    1d98:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1d9c:	2001      	movs	r0, #1
}
    1d9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1da2:	f000 bfdb 	b.w	2d5c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1daa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1dae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1db2:	07d3      	lsls	r3, r2, #31
    1db4:	d5ee      	bpl.n	1d94 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1db6:	4807      	ldr	r0, [pc, #28]	; (1dd4 <generic_hfclk_start+0x60>)
    1db8:	f002 fc25 	bl	4606 <set_on_state>
    1dbc:	f381 8811 	msr	BASEPRI, r1
    1dc0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    1dc4:	2000      	movs	r0, #0
}
    1dc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1dca:	f7ff bfab 	b.w	1d24 <clkstarted_handle.constprop.0>
    1dce:	bf00      	nop
    1dd0:	20000278 	.word	0x20000278
    1dd4:	20000268 	.word	0x20000268

00001dd8 <api_blocking_start>:
{
    1dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1dda:	2200      	movs	r2, #0
    1ddc:	2301      	movs	r3, #1
    1dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1de2:	4a09      	ldr	r2, [pc, #36]	; (1e08 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1de4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1de8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1dea:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1dee:	f002 fc77 	bl	46e0 <api_start>
	if (err < 0) {
    1df2:	2800      	cmp	r0, #0
    1df4:	db05      	blt.n	1e02 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1dfa:	2300      	movs	r3, #0
    1dfc:	4668      	mov	r0, sp
    1dfe:	f001 fda7 	bl	3950 <z_impl_k_sem_take>
}
    1e02:	b005      	add	sp, #20
    1e04:	f85d fb04 	ldr.w	pc, [sp], #4
    1e08:	00004707 	.word	0x00004707

00001e0c <lfclk_start>:
{
    1e0c:	b510      	push	{r4, lr}
	if (!once) {
    1e0e:	4c07      	ldr	r4, [pc, #28]	; (1e2c <lfclk_start+0x20>)
    1e10:	7823      	ldrb	r3, [r4, #0]
    1e12:	b92b      	cbnz	r3, 1e20 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    1e14:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1e18:	f002 ff00 	bl	4c1c <z_impl_k_busy_wait>
		once = true;
    1e1c:	2301      	movs	r3, #1
    1e1e:	7023      	strb	r3, [r4, #0]
}
    1e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1e24:	2000      	movs	r0, #0
    1e26:	f000 bf99 	b.w	2d5c <nrfx_clock_start>
    1e2a:	bf00      	nop
    1e2c:	20000379 	.word	0x20000379

00001e30 <z_nrf_clock_control_lf_on>:
{
    1e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e34:	4938      	ldr	r1, [pc, #224]	; (1f18 <z_nrf_clock_control_lf_on+0xe8>)
    1e36:	f3bf 8f5b 	dmb	ish
    1e3a:	4607      	mov	r7, r0
    1e3c:	2201      	movs	r2, #1
    1e3e:	e851 3f00 	ldrex	r3, [r1]
    1e42:	e841 2000 	strex	r0, r2, [r1]
    1e46:	2800      	cmp	r0, #0
    1e48:	d1f9      	bne.n	1e3e <z_nrf_clock_control_lf_on+0xe>
    1e4a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1e4e:	b933      	cbnz	r3, 1e5e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1e50:	4932      	ldr	r1, [pc, #200]	; (1f1c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1e52:	4833      	ldr	r0, [pc, #204]	; (1f20 <z_nrf_clock_control_lf_on+0xf0>)
    1e54:	604b      	str	r3, [r1, #4]
    1e56:	60cb      	str	r3, [r1, #12]
    1e58:	608a      	str	r2, [r1, #8]
    1e5a:	f002 fa98 	bl	438e <onoff_request>
	switch (start_mode) {
    1e5e:	1e7b      	subs	r3, r7, #1
    1e60:	2b01      	cmp	r3, #1
    1e62:	d82b      	bhi.n	1ebc <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1e64:	2f01      	cmp	r7, #1
    1e66:	d107      	bne.n	1e78 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e6c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1e70:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1e74:	2b01      	cmp	r3, #1
    1e76:	d021      	beq.n	1ebc <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1e78:	f002 fdf5 	bl	4a66 <k_is_in_isr>
    1e7c:	4605      	mov	r5, r0
    1e7e:	b9f8      	cbnz	r0, 1ec0 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1e80:	4b28      	ldr	r3, [pc, #160]	; (1f24 <z_nrf_clock_control_lf_on+0xf4>)
    1e82:	781b      	ldrb	r3, [r3, #0]
    1e84:	b1e3      	cbz	r3, 1ec0 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    1e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e8a:	2202      	movs	r2, #2
    1e8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1e90:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e92:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1f28 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1e96:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1e9a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1e9e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1ea2:	03d2      	lsls	r2, r2, #15
    1ea4:	d516      	bpl.n	1ed4 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1ea6:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1eaa:	2b01      	cmp	r3, #1
    1eac:	d001      	beq.n	1eb2 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1eae:	2f01      	cmp	r7, #1
    1eb0:	d110      	bne.n	1ed4 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    1eb2:	b35d      	cbz	r5, 1f0c <z_nrf_clock_control_lf_on+0xdc>
    1eb4:	f386 8811 	msr	BASEPRI, r6
    1eb8:	f3bf 8f6f 	isb	sy
}
    1ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1ec0:	f04f 0320 	mov.w	r3, #32
    1ec4:	f3ef 8611 	mrs	r6, BASEPRI
    1ec8:	f383 8812 	msr	BASEPRI_MAX, r3
    1ecc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ed0:	2501      	movs	r5, #1
    1ed2:	e7de      	b.n	1e92 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1ed4:	b1ad      	cbz	r5, 1f02 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1ed6:	4630      	mov	r0, r6
    1ed8:	f7ff f98e 	bl	11f8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1edc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d1da      	bne.n	1e9a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1ee4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1ee8:	2a00      	cmp	r2, #0
    1eea:	d0d6      	beq.n	1e9a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1eec:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1ef0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1ef4:	2301      	movs	r3, #1
    1ef6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    1efa:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1efe:	60a3      	str	r3, [r4, #8]
}
    1f00:	e7cb      	b.n	1e9a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    1f02:	2100      	movs	r1, #0
    1f04:	2021      	movs	r0, #33	; 0x21
    1f06:	f001 ffc7 	bl	3e98 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1f0a:	e7e7      	b.n	1edc <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    1f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f10:	2202      	movs	r2, #2
    1f12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1f16:	e7d1      	b.n	1ebc <z_nrf_clock_control_lf_on+0x8c>
    1f18:	20000224 	.word	0x20000224
    1f1c:	20000214 	.word	0x20000214
    1f20:	20000244 	.word	0x20000244
    1f24:	2000078c 	.word	0x2000078c
    1f28:	e000e100 	.word	0xe000e100

00001f2c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    1f2c:	b508      	push	{r3, lr}
    1f2e:	4807      	ldr	r0, [pc, #28]	; (1f4c <uart_console_init+0x20>)
    1f30:	f002 fd8a 	bl	4a48 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1f34:	b138      	cbz	r0, 1f46 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    1f36:	4806      	ldr	r0, [pc, #24]	; (1f50 <uart_console_init+0x24>)
    1f38:	f7ff fe36 	bl	1ba8 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1f3c:	4804      	ldr	r0, [pc, #16]	; (1f50 <uart_console_init+0x24>)
    1f3e:	f7fe fad9 	bl	4f4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1f42:	2000      	movs	r0, #0
}
    1f44:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1f46:	f06f 0012 	mvn.w	r0, #18
    1f4a:	e7fb      	b.n	1f44 <uart_console_init+0x18>
    1f4c:	00004c98 	.word	0x00004c98
    1f50:	00001f55 	.word	0x00001f55

00001f54 <console_out>:
	if ('\n' == c) {
    1f54:	280a      	cmp	r0, #10
{
    1f56:	b538      	push	{r3, r4, r5, lr}
    1f58:	4d07      	ldr	r5, [pc, #28]	; (1f78 <console_out+0x24>)
    1f5a:	4604      	mov	r4, r0
	if ('\n' == c) {
    1f5c:	d104      	bne.n	1f68 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1f5e:	68ab      	ldr	r3, [r5, #8]
    1f60:	210d      	movs	r1, #13
    1f62:	685b      	ldr	r3, [r3, #4]
    1f64:	4628      	mov	r0, r5
    1f66:	4798      	blx	r3
    1f68:	68ab      	ldr	r3, [r5, #8]
    1f6a:	4803      	ldr	r0, [pc, #12]	; (1f78 <console_out+0x24>)
    1f6c:	685b      	ldr	r3, [r3, #4]
    1f6e:	b2e1      	uxtb	r1, r4
    1f70:	4798      	blx	r3
}
    1f72:	4620      	mov	r0, r4
    1f74:	bd38      	pop	{r3, r4, r5, pc}
    1f76:	bf00      	nop
    1f78:	00004c98 	.word	0x00004c98

00001f7c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1f7c:	b530      	push	{r4, r5, lr}
	return port->config;
    1f7e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f80:	7b05      	ldrb	r5, [r0, #12]
    1f82:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1f86:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    1f8a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f8c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1f90:	d105      	bne.n	1f9e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    1f92:	4620      	mov	r0, r4
    1f94:	f001 f9a6 	bl	32e4 <nrfx_gpiote_trigger_disable>

		return 0;
    1f98:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    1f9a:	b005      	add	sp, #20
    1f9c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f9e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    1fa0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fa4:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1fa8:	d114      	bne.n	1fd4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fae:	bf0c      	ite	eq
    1fb0:	2304      	moveq	r3, #4
    1fb2:	2305      	movne	r3, #5
    1fb4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1fb8:	2300      	movs	r3, #0
    1fba:	4619      	mov	r1, r3
    1fbc:	aa02      	add	r2, sp, #8
    1fbe:	4620      	mov	r0, r4
    1fc0:	f000 ffc6 	bl	2f50 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1fc4:	4b1d      	ldr	r3, [pc, #116]	; (203c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1fc6:	4298      	cmp	r0, r3
    1fc8:	d135      	bne.n	2036 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1fca:	2101      	movs	r1, #1
    1fcc:	4620      	mov	r0, r4
    1fce:	f001 f945 	bl	325c <nrfx_gpiote_trigger_enable>
	return 0;
    1fd2:	e7e1      	b.n	1f98 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1fd4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1fd8:	d022      	beq.n	2020 <gpio_nrfx_pin_interrupt_configure+0xa4>
    1fda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1fde:	bf14      	ite	ne
    1fe0:	2301      	movne	r3, #1
    1fe2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fe4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1fe8:	6883      	ldr	r3, [r0, #8]
    1fea:	40cb      	lsrs	r3, r1
    1fec:	07d9      	lsls	r1, r3, #31
    1fee:	d4e3      	bmi.n	1fb8 <gpio_nrfx_pin_interrupt_configure+0x3c>
    1ff0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1ff4:	d1e0      	bne.n	1fb8 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1ff6:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1ffa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2006:	07db      	lsls	r3, r3, #31
    2008:	d4d6      	bmi.n	1fb8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    200a:	f10d 0507 	add.w	r5, sp, #7
    200e:	4629      	mov	r1, r5
    2010:	4620      	mov	r0, r4
    2012:	f001 f8cf 	bl	31b4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2016:	4b0a      	ldr	r3, [pc, #40]	; (2040 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2018:	4298      	cmp	r0, r3
    201a:	d003      	beq.n	2024 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    201c:	9503      	str	r5, [sp, #12]
    201e:	e7cb      	b.n	1fb8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2020:	2303      	movs	r3, #3
    2022:	e7df      	b.n	1fe4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2024:	4628      	mov	r0, r5
    2026:	f001 f913 	bl	3250 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    202a:	4b04      	ldr	r3, [pc, #16]	; (203c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    202c:	4298      	cmp	r0, r3
    202e:	d0f5      	beq.n	201c <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    2030:	f06f 000b 	mvn.w	r0, #11
    2034:	e7b1      	b.n	1f9a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2036:	f06f 0015 	mvn.w	r0, #21
    203a:	e7ae      	b.n	1f9a <gpio_nrfx_pin_interrupt_configure+0x1e>
    203c:	0bad0000 	.word	0x0bad0000
    2040:	0bad0004 	.word	0x0bad0004

00002044 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2044:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2046:	f001 f8f3 	bl	3230 <nrfx_gpiote_is_init>
    204a:	4604      	mov	r4, r0
    204c:	b968      	cbnz	r0, 206a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    204e:	f001 f8c7 	bl	31e0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2052:	4b08      	ldr	r3, [pc, #32]	; (2074 <gpio_nrfx_init+0x30>)
    2054:	4298      	cmp	r0, r3
    2056:	d10a      	bne.n	206e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2058:	4807      	ldr	r0, [pc, #28]	; (2078 <gpio_nrfx_init+0x34>)
    205a:	4621      	mov	r1, r4
    205c:	f001 f8a4 	bl	31a8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2060:	4622      	mov	r2, r4
    2062:	2105      	movs	r1, #5
    2064:	2006      	movs	r0, #6
    2066:	f7ff f91d 	bl	12a4 <z_arm_irq_priority_set>
		return 0;
    206a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    206c:	bd10      	pop	{r4, pc}
		return -EIO;
    206e:	f06f 0004 	mvn.w	r0, #4
    2072:	e7fb      	b.n	206c <gpio_nrfx_init+0x28>
    2074:	0bad0000 	.word	0x0bad0000
    2078:	0000207d 	.word	0x0000207d

0000207c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    207c:	0943      	lsrs	r3, r0, #5
{
    207e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2080:	d107      	bne.n	2092 <nrfx_gpio_handler+0x16>
	return list->head;
    2082:	4b0b      	ldr	r3, [pc, #44]	; (20b0 <nrfx_gpio_handler+0x34>)
    2084:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2086:	b121      	cbz	r1, 2092 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    2088:	2501      	movs	r5, #1
	return node->next;
    208a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    208c:	4e09      	ldr	r6, [pc, #36]	; (20b4 <nrfx_gpio_handler+0x38>)
    208e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2090:	b901      	cbnz	r1, 2094 <nrfx_gpio_handler+0x18>
}
    2092:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    2094:	688a      	ldr	r2, [r1, #8]
    2096:	402a      	ands	r2, r5
    2098:	d002      	beq.n	20a0 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    209a:	684b      	ldr	r3, [r1, #4]
    209c:	4630      	mov	r0, r6
    209e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    20a0:	b11c      	cbz	r4, 20aa <nrfx_gpio_handler+0x2e>
    20a2:	6823      	ldr	r3, [r4, #0]
    20a4:	4621      	mov	r1, r4
    20a6:	461c      	mov	r4, r3
    20a8:	e7f2      	b.n	2090 <nrfx_gpio_handler+0x14>
    20aa:	4623      	mov	r3, r4
    20ac:	e7fa      	b.n	20a4 <nrfx_gpio_handler+0x28>
    20ae:	bf00      	nop
    20b0:	2000027c 	.word	0x2000027c
    20b4:	00004c80 	.word	0x00004c80

000020b8 <gpio_nrfx_pin_configure>:
{
    20b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    20bc:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    20be:	7b3b      	ldrb	r3, [r7, #12]
    20c0:	f001 051f 	and.w	r5, r1, #31
    20c4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    20c8:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    20ca:	4628      	mov	r0, r5
    20cc:	f10d 0103 	add.w	r1, sp, #3
{
    20d0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    20d2:	f001 f86f 	bl	31b4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    20d6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    20da:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    20dc:	d10b      	bne.n	20f6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    20de:	4628      	mov	r0, r5
    20e0:	f001 f928 	bl	3334 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    20e4:	4b3d      	ldr	r3, [pc, #244]	; (21dc <gpio_nrfx_pin_configure+0x124>)
    20e6:	4598      	cmp	r8, r3
    20e8:	d103      	bne.n	20f2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    20ea:	f89d 0003 	ldrb.w	r0, [sp, #3]
    20ee:	f001 f8a9 	bl	3244 <nrfx_gpiote_channel_free>
		return 0;
    20f2:	2000      	movs	r0, #0
    20f4:	e00c      	b.n	2110 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    20f6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    20f8:	4619      	mov	r1, r3
    20fa:	aa02      	add	r2, sp, #8
    20fc:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    20fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2102:	f000 ff25 	bl	2f50 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2106:	4b35      	ldr	r3, [pc, #212]	; (21dc <gpio_nrfx_pin_configure+0x124>)
    2108:	4298      	cmp	r0, r3
    210a:	d004      	beq.n	2116 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    210c:	f06f 0015 	mvn.w	r0, #21
}
    2110:	b004      	add	sp, #16
    2112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2116:	4580      	cmp	r8, r0
    2118:	d103      	bne.n	2122 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    211a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    211e:	f001 f891 	bl	3244 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2122:	03a3      	lsls	r3, r4, #14
    2124:	d54b      	bpl.n	21be <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2126:	f240 3306 	movw	r3, #774	; 0x306
    212a:	4023      	ands	r3, r4
    212c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    2130:	d019      	beq.n	2166 <gpio_nrfx_pin_configure+0xae>
    2132:	d80c      	bhi.n	214e <gpio_nrfx_pin_configure+0x96>
    2134:	2b06      	cmp	r3, #6
    2136:	d017      	beq.n	2168 <gpio_nrfx_pin_configure+0xb0>
    2138:	d804      	bhi.n	2144 <gpio_nrfx_pin_configure+0x8c>
    213a:	b1ab      	cbz	r3, 2168 <gpio_nrfx_pin_configure+0xb0>
    213c:	2b02      	cmp	r3, #2
    213e:	d1e5      	bne.n	210c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    2140:	2304      	movs	r3, #4
    2142:	e011      	b.n	2168 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2148:	d1e0      	bne.n	210c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    214a:	2301      	movs	r3, #1
    214c:	e00c      	b.n	2168 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    214e:	f240 2202 	movw	r2, #514	; 0x202
    2152:	4293      	cmp	r3, r2
    2154:	d027      	beq.n	21a6 <gpio_nrfx_pin_configure+0xee>
    2156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    215a:	d026      	beq.n	21aa <gpio_nrfx_pin_configure+0xf2>
    215c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2160:	d1d4      	bne.n	210c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    2162:	2302      	movs	r3, #2
    2164:	e000      	b.n	2168 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    2166:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2168:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    216c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2170:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2174:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2176:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    217a:	bf54      	ite	pl
    217c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2180:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2182:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2184:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2188:	d511      	bpl.n	21ae <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    218a:	687a      	ldr	r2, [r7, #4]
    218c:	2301      	movs	r3, #1
    218e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2190:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2194:	2200      	movs	r2, #0
    2196:	a901      	add	r1, sp, #4
    2198:	4628      	mov	r0, r5
    219a:	f000 ff87 	bl	30ac <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    219e:	4b0f      	ldr	r3, [pc, #60]	; (21dc <gpio_nrfx_pin_configure+0x124>)
    21a0:	4298      	cmp	r0, r3
    21a2:	d0a6      	beq.n	20f2 <gpio_nrfx_pin_configure+0x3a>
    21a4:	e7b2      	b.n	210c <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    21a6:	2305      	movs	r3, #5
    21a8:	e7de      	b.n	2168 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    21aa:	2303      	movs	r3, #3
    21ac:	e7dc      	b.n	2168 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    21ae:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    21b0:	bf41      	itttt	mi
    21b2:	2301      	movmi	r3, #1
    21b4:	687a      	ldrmi	r2, [r7, #4]
    21b6:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    21b8:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    21bc:	e7ea      	b.n	2194 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    21be:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    21c0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    21c4:	bf54      	ite	pl
    21c6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    21ca:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    21cc:	461a      	mov	r2, r3
    21ce:	a901      	add	r1, sp, #4
    21d0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    21d2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    21d6:	f000 febb 	bl	2f50 <nrfx_gpiote_input_configure>
    21da:	e7e0      	b.n	219e <gpio_nrfx_pin_configure+0xe6>
    21dc:	0bad0000 	.word	0x0bad0000

000021e0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    21e0:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    21e2:	794b      	ldrb	r3, [r1, #5]
    21e4:	2b01      	cmp	r3, #1
    21e6:	d120      	bne.n	222a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    21e8:	798b      	ldrb	r3, [r1, #6]
    21ea:	2b03      	cmp	r3, #3
    21ec:	d11d      	bne.n	222a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    21ee:	79cd      	ldrb	r5, [r1, #7]
    21f0:	b10d      	cbz	r5, 21f6 <uarte_nrfx_configure+0x16>
    21f2:	2d01      	cmp	r5, #1
    21f4:	d119      	bne.n	222a <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    21f6:	790a      	ldrb	r2, [r1, #4]
    21f8:	b112      	cbz	r2, 2200 <uarte_nrfx_configure+0x20>
    21fa:	2a02      	cmp	r2, #2
    21fc:	d115      	bne.n	222a <uarte_nrfx_configure+0x4a>
    21fe:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2200:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2202:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    2204:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2208:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
    220a:	d064      	beq.n	22d6 <uarte_nrfx_configure+0xf6>
    220c:	d82b      	bhi.n	2266 <uarte_nrfx_configure+0x86>
    220e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2212:	d063      	beq.n	22dc <uarte_nrfx_configure+0xfc>
    2214:	d814      	bhi.n	2240 <uarte_nrfx_configure+0x60>
    2216:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    221a:	d061      	beq.n	22e0 <uarte_nrfx_configure+0x100>
    221c:	d808      	bhi.n	2230 <uarte_nrfx_configure+0x50>
    221e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2222:	d060      	beq.n	22e6 <uarte_nrfx_configure+0x106>
    2224:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2228:	d060      	beq.n	22ec <uarte_nrfx_configure+0x10c>
    222a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    222e:	e051      	b.n	22d4 <uarte_nrfx_configure+0xf4>
    2230:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2234:	d05d      	beq.n	22f2 <uarte_nrfx_configure+0x112>
    2236:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    223a:	d1f6      	bne.n	222a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    223c:	4b37      	ldr	r3, [pc, #220]	; (231c <uarte_nrfx_configure+0x13c>)
    223e:	e03c      	b.n	22ba <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2240:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2244:	d058      	beq.n	22f8 <uarte_nrfx_configure+0x118>
    2246:	d807      	bhi.n	2258 <uarte_nrfx_configure+0x78>
    2248:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    224c:	d056      	beq.n	22fc <uarte_nrfx_configure+0x11c>
    224e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2252:	d1ea      	bne.n	222a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2254:	4b32      	ldr	r3, [pc, #200]	; (2320 <uarte_nrfx_configure+0x140>)
    2256:	e030      	b.n	22ba <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2258:	f647 2412 	movw	r4, #31250	; 0x7a12
    225c:	42a3      	cmp	r3, r4
    225e:	d1e4      	bne.n	222a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2260:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2264:	e029      	b.n	22ba <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2266:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    226a:	d049      	beq.n	2300 <uarte_nrfx_configure+0x120>
    226c:	d813      	bhi.n	2296 <uarte_nrfx_configure+0xb6>
    226e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2272:	d048      	beq.n	2306 <uarte_nrfx_configure+0x126>
    2274:	d809      	bhi.n	228a <uarte_nrfx_configure+0xaa>
    2276:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    227a:	42a3      	cmp	r3, r4
    227c:	d045      	beq.n	230a <uarte_nrfx_configure+0x12a>
    227e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2282:	d1d2      	bne.n	222a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2284:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2288:	e017      	b.n	22ba <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    228a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    228e:	d1cc      	bne.n	222a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2290:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2294:	e011      	b.n	22ba <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2296:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    229a:	d039      	beq.n	2310 <uarte_nrfx_configure+0x130>
    229c:	d808      	bhi.n	22b0 <uarte_nrfx_configure+0xd0>
    229e:	4c21      	ldr	r4, [pc, #132]	; (2324 <uarte_nrfx_configure+0x144>)
    22a0:	42a3      	cmp	r3, r4
    22a2:	d038      	beq.n	2316 <uarte_nrfx_configure+0x136>
    22a4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    22a8:	d1bf      	bne.n	222a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    22aa:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    22ae:	e004      	b.n	22ba <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    22b0:	4c1d      	ldr	r4, [pc, #116]	; (2328 <uarte_nrfx_configure+0x148>)
    22b2:	42a3      	cmp	r3, r4
    22b4:	d1b9      	bne.n	222a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    22b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    22ba:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    22bc:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
    22c0:	6843      	ldr	r3, [r0, #4]
    22c2:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    22c4:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    22c6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    22ca:	c903      	ldmia	r1, {r0, r1}
    22cc:	1d23      	adds	r3, r4, #4
    22ce:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    22d2:	2000      	movs	r0, #0
}
    22d4:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    22d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    22da:	e7ee      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    22dc:	4b13      	ldr	r3, [pc, #76]	; (232c <uarte_nrfx_configure+0x14c>)
    22de:	e7ec      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    22e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    22e4:	e7e9      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    22e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    22ea:	e7e6      	b.n	22ba <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    22ec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    22f0:	e7e3      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    22f2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    22f6:	e7e0      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    22f8:	4b0d      	ldr	r3, [pc, #52]	; (2330 <uarte_nrfx_configure+0x150>)
    22fa:	e7de      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    22fc:	4b0d      	ldr	r3, [pc, #52]	; (2334 <uarte_nrfx_configure+0x154>)
    22fe:	e7dc      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2300:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2304:	e7d9      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2306:	4b0c      	ldr	r3, [pc, #48]	; (2338 <uarte_nrfx_configure+0x158>)
    2308:	e7d7      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    230a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    230e:	e7d4      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2310:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2314:	e7d1      	b.n	22ba <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2316:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    231a:	e7ce      	b.n	22ba <uarte_nrfx_configure+0xda>
    231c:	0013b000 	.word	0x0013b000
    2320:	004ea000 	.word	0x004ea000
    2324:	0003d090 	.word	0x0003d090
    2328:	000f4240 	.word	0x000f4240
    232c:	00275000 	.word	0x00275000
    2330:	0075c000 	.word	0x0075c000
    2334:	003af000 	.word	0x003af000
    2338:	013a9000 	.word	0x013a9000

0000233c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    233c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2340:	4680      	mov	r8, r0
    2342:	2200      	movs	r2, #0
    2344:	2101      	movs	r1, #1
    2346:	2002      	movs	r0, #2
    2348:	f7fe ffac 	bl	12a4 <z_arm_irq_priority_set>
    234c:	2002      	movs	r0, #2
    234e:	f7fe ff8d 	bl	126c <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    2352:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    2356:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    235a:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    235c:	2100      	movs	r1, #0
    235e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    2362:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2366:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    236a:	aa01      	add	r2, sp, #4
    236c:	4648      	mov	r0, r9
    236e:	f002 fa22 	bl	47b6 <pinctrl_lookup_state>
	if (ret < 0) {
    2372:	1e05      	subs	r5, r0, #0
    2374:	db1e      	blt.n	23b4 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2376:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2378:	f8d9 2000 	ldr.w	r2, [r9]
    237c:	7919      	ldrb	r1, [r3, #4]
    237e:	6818      	ldr	r0, [r3, #0]
    2380:	f002 fa2c 	bl	47dc <pinctrl_configure_pins>
	if (err < 0) {
    2384:	1e05      	subs	r5, r0, #0
    2386:	db15      	blt.n	23b4 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2388:	1d31      	adds	r1, r6, #4
    238a:	4640      	mov	r0, r8
    238c:	f7ff ff28 	bl	21e0 <uarte_nrfx_configure>
	if (err) {
    2390:	4605      	mov	r5, r0
    2392:	b978      	cbnz	r0, 23b4 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2394:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2396:	0799      	lsls	r1, r3, #30
    2398:	d524      	bpl.n	23e4 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    239a:	f106 0018 	add.w	r0, r6, #24
    239e:	f001 f895 	bl	34cc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    23a2:	4b24      	ldr	r3, [pc, #144]	; (2434 <uarte_0_init+0xf8>)
    23a4:	4298      	cmp	r0, r3
    23a6:	d009      	beq.n	23bc <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    23a8:	4823      	ldr	r0, [pc, #140]	; (2438 <uarte_0_init+0xfc>)
    23aa:	2145      	movs	r1, #69	; 0x45
    23ac:	f002 f8c3 	bl	4536 <z_log_minimal_printk>
		return -EIO;
    23b0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    23b4:	4628      	mov	r0, r5
    23b6:	b003      	add	sp, #12
    23b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    23bc:	7e33      	ldrb	r3, [r6, #24]
    23be:	00db      	lsls	r3, r3, #3
    23c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    23c4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    23c8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    23cc:	f504 7190 	add.w	r1, r4, #288	; 0x120
    23d0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    23d4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    23d8:	7e32      	ldrb	r2, [r6, #24]
    23da:	2301      	movs	r3, #1
    23dc:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    23de:	4a17      	ldr	r2, [pc, #92]	; (243c <uarte_0_init+0x100>)
    23e0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    23e4:	2308      	movs	r3, #8
    23e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    23ea:	7a3b      	ldrb	r3, [r7, #8]
    23ec:	b953      	cbnz	r3, 2404 <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23ee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    23f2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    23f6:	6973      	ldr	r3, [r6, #20]
    23f8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    23fc:	2301      	movs	r3, #1
    23fe:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2402:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2404:	687b      	ldr	r3, [r7, #4]
    2406:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2408:	bf5c      	itt	pl
    240a:	f44f 7380 	movpl.w	r3, #256	; 0x100
    240e:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2412:	687b      	ldr	r3, [r7, #4]
    2414:	06db      	lsls	r3, r3, #27
    2416:	bf44      	itt	mi
    2418:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    241c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2420:	6933      	ldr	r3, [r6, #16]
    2422:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2426:	2300      	movs	r3, #0
    2428:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    242c:	2301      	movs	r3, #1
    242e:	60a3      	str	r3, [r4, #8]
    2430:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2432:	e7bf      	b.n	23b4 <uarte_0_init+0x78>
    2434:	0bad0000 	.word	0x0bad0000
    2438:	000055fe 	.word	0x000055fe
    243c:	4001f000 	.word	0x4001f000

00002440 <uarte_nrfx_poll_out>:
{
    2440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2442:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    2444:	6907      	ldr	r7, [r0, #16]
{
    2446:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2448:	f002 fb0d 	bl	4a66 <k_is_in_isr>
    244c:	b9b0      	cbnz	r0, 247c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    244e:	4b2e      	ldr	r3, [pc, #184]	; (2508 <uarte_nrfx_poll_out+0xc8>)
    2450:	781b      	ldrb	r3, [r3, #0]
    2452:	b19b      	cbz	r3, 247c <uarte_nrfx_poll_out+0x3c>
{
    2454:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2456:	6860      	ldr	r0, [r4, #4]
    2458:	f002 fa6a 	bl	4930 <is_tx_ready.isra.0>
    245c:	bb00      	cbnz	r0, 24a0 <uarte_nrfx_poll_out+0x60>
    245e:	2001      	movs	r0, #1
    2460:	f002 facb 	bl	49fa <nrfx_busy_wait>
    2464:	3e01      	subs	r6, #1
    2466:	d1f6      	bne.n	2456 <uarte_nrfx_poll_out+0x16>
    2468:	2100      	movs	r1, #0
    246a:	2021      	movs	r0, #33	; 0x21
    246c:	f001 fd14 	bl	3e98 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2470:	e7f0      	b.n	2454 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2472:	f386 8811 	msr	BASEPRI, r6
    2476:	f3bf 8f6f 	isb	sy
}
    247a:	e7f5      	b.n	2468 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    247c:	f04f 0320 	mov.w	r3, #32
    2480:	f3ef 8611 	mrs	r6, BASEPRI
    2484:	f383 8812 	msr	BASEPRI_MAX, r3
    2488:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    248c:	6860      	ldr	r0, [r4, #4]
    248e:	4631      	mov	r1, r6
    2490:	f002 fa4e 	bl	4930 <is_tx_ready.isra.0>
    2494:	b990      	cbnz	r0, 24bc <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    2496:	f386 8811 	msr	BASEPRI, r6
    249a:	f3bf 8f6f 	isb	sy
}
    249e:	e7ed      	b.n	247c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    24a0:	f04f 0320 	mov.w	r3, #32
    24a4:	f3ef 8611 	mrs	r6, BASEPRI
    24a8:	f383 8812 	msr	BASEPRI_MAX, r3
    24ac:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    24b0:	6860      	ldr	r0, [r4, #4]
    24b2:	4631      	mov	r1, r6
    24b4:	f002 fa3c 	bl	4930 <is_tx_ready.isra.0>
    24b8:	2800      	cmp	r0, #0
    24ba:	d0da      	beq.n	2472 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    24bc:	693b      	ldr	r3, [r7, #16]
    24be:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    24c0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    24c2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    24c4:	6813      	ldr	r3, [r2, #0]
    24c6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    24ca:	2001      	movs	r0, #1
    24cc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24d0:	2000      	movs	r0, #0
    24d2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    24d6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    24da:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    24de:	6852      	ldr	r2, [r2, #4]
    24e0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    24e4:	06d2      	lsls	r2, r2, #27
    24e6:	d508      	bpl.n	24fa <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    24e8:	6862      	ldr	r2, [r4, #4]
    24ea:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    24ec:	2008      	movs	r0, #8
    24ee:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    24f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    24f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    24fa:	2201      	movs	r2, #1
    24fc:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    24fe:	f381 8811 	msr	BASEPRI, r1
    2502:	f3bf 8f6f 	isb	sy
}
    2506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2508:	2000078c 	.word	0x2000078c

0000250c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    250c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    250e:	2301      	movs	r3, #1
    2510:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2512:	4a0e      	ldr	r2, [pc, #56]	; (254c <compare_int_lock+0x40>)
    2514:	f3bf 8f5b 	dmb	ish
    2518:	43dc      	mvns	r4, r3
    251a:	e852 1f00 	ldrex	r1, [r2]
    251e:	ea01 0504 	and.w	r5, r1, r4
    2522:	e842 5600 	strex	r6, r5, [r2]
    2526:	2e00      	cmp	r6, #0
    2528:	d1f7      	bne.n	251a <compare_int_lock+0xe>
    252a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    252e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2532:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2534:	4806      	ldr	r0, [pc, #24]	; (2550 <compare_int_lock+0x44>)
    2536:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    253a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    253e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2542:	420b      	tst	r3, r1
}
    2544:	bf14      	ite	ne
    2546:	2001      	movne	r0, #1
    2548:	2000      	moveq	r0, #0
    254a:	bd70      	pop	{r4, r5, r6, pc}
    254c:	2000028c 	.word	0x2000028c
    2550:	40011000 	.word	0x40011000

00002554 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2554:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2556:	490e      	ldr	r1, [pc, #56]	; (2590 <sys_clock_timeout_handler+0x3c>)
    2558:	e9d1 3400 	ldrd	r3, r4, [r1]
    255c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    255e:	18c3      	adds	r3, r0, r3
    2560:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    2564:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    2568:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    256c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2570:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2574:	d209      	bcs.n	258a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2576:	4b07      	ldr	r3, [pc, #28]	; (2594 <sys_clock_timeout_handler+0x40>)
    2578:	681b      	ldr	r3, [r3, #0]
    257a:	0a1a      	lsrs	r2, r3, #8
    257c:	061b      	lsls	r3, r3, #24
    257e:	199c      	adds	r4, r3, r6
    2580:	4b05      	ldr	r3, [pc, #20]	; (2598 <sys_clock_timeout_handler+0x44>)
    2582:	f142 0500 	adc.w	r5, r2, #0
    2586:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    258a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    258c:	f001 bdda 	b.w	4144 <sys_clock_announce>
    2590:	200000a8 	.word	0x200000a8
    2594:	20000290 	.word	0x20000290
    2598:	200000b0 	.word	0x200000b0

0000259c <compare_int_unlock>:
	if (key) {
    259c:	b311      	cbz	r1, 25e4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    259e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    25a2:	2301      	movs	r3, #1
    25a4:	4a10      	ldr	r2, [pc, #64]	; (25e8 <compare_int_unlock+0x4c>)
    25a6:	4083      	lsls	r3, r0
    25a8:	e852 cf00 	ldrex	ip, [r2]
    25ac:	ea4c 0c03 	orr.w	ip, ip, r3
    25b0:	e842 c100 	strex	r1, ip, [r2]
    25b4:	2900      	cmp	r1, #0
    25b6:	d1f7      	bne.n	25a8 <compare_int_unlock+0xc>
    25b8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    25bc:	4a0b      	ldr	r2, [pc, #44]	; (25ec <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    25c2:	4083      	lsls	r3, r0
    25c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25c8:	4b09      	ldr	r3, [pc, #36]	; (25f0 <compare_int_unlock+0x54>)
    25ca:	f3bf 8f5b 	dmb	ish
    25ce:	681b      	ldr	r3, [r3, #0]
    25d0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    25d4:	40c3      	lsrs	r3, r0
    25d6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25d8:	bf42      	ittt	mi
    25da:	4b06      	ldrmi	r3, [pc, #24]	; (25f4 <compare_int_unlock+0x58>)
    25dc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    25e0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    25e4:	4770      	bx	lr
    25e6:	bf00      	nop
    25e8:	2000028c 	.word	0x2000028c
    25ec:	40011000 	.word	0x40011000
    25f0:	20000288 	.word	0x20000288
    25f4:	e000e100 	.word	0xe000e100

000025f8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    25f8:	4b0d      	ldr	r3, [pc, #52]	; (2630 <z_nrf_rtc_timer_read+0x38>)
    25fa:	6818      	ldr	r0, [r3, #0]
    25fc:	0a01      	lsrs	r1, r0, #8
    25fe:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2600:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2604:	4b0b      	ldr	r3, [pc, #44]	; (2634 <z_nrf_rtc_timer_read+0x3c>)
    2606:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    260a:	1818      	adds	r0, r3, r0
    260c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2614:	d20a      	bcs.n	262c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2616:	4b08      	ldr	r3, [pc, #32]	; (2638 <z_nrf_rtc_timer_read+0x40>)
    2618:	e9d3 2300 	ldrd	r2, r3, [r3]
    261c:	4290      	cmp	r0, r2
    261e:	eb71 0303 	sbcs.w	r3, r1, r3
    2622:	d203      	bcs.n	262c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2624:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2628:	f141 0100 	adc.w	r1, r1, #0
}
    262c:	4770      	bx	lr
    262e:	bf00      	nop
    2630:	20000290 	.word	0x20000290
    2634:	40011000 	.word	0x40011000
    2638:	200000b0 	.word	0x200000b0

0000263c <compare_set>:
{
    263c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2640:	4616      	mov	r6, r2
    2642:	461f      	mov	r7, r3
    2644:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    2646:	f7ff ff61 	bl	250c <compare_int_lock>
    264a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    264c:	f7ff ffd4 	bl	25f8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2650:	42b0      	cmp	r0, r6
    2652:	eb71 0307 	sbcs.w	r3, r1, r7
    2656:	d251      	bcs.n	26fc <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    2658:	4b3a      	ldr	r3, [pc, #232]	; (2744 <compare_set+0x108>)
    265a:	1a30      	subs	r0, r6, r0
    265c:	eb67 0101 	sbc.w	r1, r7, r1
    2660:	4298      	cmp	r0, r3
    2662:	f171 0100 	sbcs.w	r1, r1, #0
    2666:	d26a      	bcs.n	273e <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    2668:	4b37      	ldr	r3, [pc, #220]	; (2748 <compare_set+0x10c>)
    266a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    266e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2672:	429f      	cmp	r7, r3
    2674:	bf08      	it	eq
    2676:	4296      	cmpeq	r6, r2
    2678:	d04e      	beq.n	2718 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    267a:	4934      	ldr	r1, [pc, #208]	; (274c <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    267c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2680:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2684:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2688:	00ad      	lsls	r5, r5, #2
    268a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    268e:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2690:	b2ad      	uxth	r5, r5
    2692:	f002 f997 	bl	49c4 <event_clear>
	return absolute_time & COUNTER_MAX;
    2696:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    269a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    269e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    26a2:	4a2b      	ldr	r2, [pc, #172]	; (2750 <compare_set+0x114>)
    26a4:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26a6:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    26aa:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    26ac:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    26b0:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26b2:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    26b6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    26ba:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    26be:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    26c2:	f06f 0002 	mvn.w	r0, #2
    26c6:	eba0 0008 	sub.w	r0, r0, r8
    26ca:	4460      	add	r0, ip
    26cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    26d0:	4290      	cmp	r0, r2
    26d2:	d921      	bls.n	2718 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26d4:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    26d6:	b160      	cbz	r0, 26f2 <compare_set+0xb6>
     return p_reg->COUNTER;
    26d8:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    26dc:	eba8 000b 	sub.w	r0, r8, fp
    26e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    26e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26e8:	d916      	bls.n	2718 <compare_set+0xdc>
					event_clear(chan);
    26ea:	4620      	mov	r0, r4
    26ec:	f002 f96a 	bl	49c4 <event_clear>
    26f0:	4a17      	ldr	r2, [pc, #92]	; (2750 <compare_set+0x114>)
			cc_val = now + cc_inc;
    26f2:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    26f6:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    26fa:	e7d9      	b.n	26b0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    26fc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26fe:	4a15      	ldr	r2, [pc, #84]	; (2754 <compare_set+0x118>)
    2700:	f3bf 8f5b 	dmb	ish
    2704:	40a3      	lsls	r3, r4
    2706:	e852 0f00 	ldrex	r0, [r2]
    270a:	4318      	orrs	r0, r3
    270c:	e842 0100 	strex	r1, r0, [r2]
    2710:	2900      	cmp	r1, #0
    2712:	d1f8      	bne.n	2706 <compare_set+0xca>
    2714:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2718:	490b      	ldr	r1, [pc, #44]	; (2748 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    271a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    271c:	0123      	lsls	r3, r4, #4
    271e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    2722:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    2726:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2728:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    272a:	6053      	str	r3, [r2, #4]
	return ret;
    272c:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    272e:	4620      	mov	r0, r4
    2730:	9900      	ldr	r1, [sp, #0]
    2732:	f7ff ff33 	bl	259c <compare_int_unlock>
}
    2736:	4628      	mov	r0, r5
    2738:	b003      	add	sp, #12
    273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    273e:	f06f 0515 	mvn.w	r5, #21
    2742:	e7f4      	b.n	272e <compare_set+0xf2>
    2744:	00800001 	.word	0x00800001
    2748:	20000098 	.word	0x20000098
    274c:	40011000 	.word	0x40011000
    2750:	007ffffd 	.word	0x007ffffd
    2754:	20000288 	.word	0x20000288

00002758 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    2758:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    275a:	4c1b      	ldr	r4, [pc, #108]	; (27c8 <sys_clock_driver_init+0x70>)
    275c:	4b1b      	ldr	r3, [pc, #108]	; (27cc <sys_clock_driver_init+0x74>)
    275e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2762:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2766:	4b1a      	ldr	r3, [pc, #104]	; (27d0 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    2768:	2500      	movs	r5, #0
    276a:	f04f 30ff 	mov.w	r0, #4294967295
    276e:	f04f 31ff 	mov.w	r1, #4294967295
    2772:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    2776:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    277a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    277e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2782:	4b14      	ldr	r3, [pc, #80]	; (27d4 <sys_clock_driver_init+0x7c>)
    2784:	2602      	movs	r6, #2
    2786:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    278a:	2101      	movs	r1, #1
    278c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2790:	2011      	movs	r0, #17
    2792:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2796:	462a      	mov	r2, r5
    2798:	f7fe fd84 	bl	12a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    279c:	2011      	movs	r0, #17
    279e:	f7fe fd65 	bl	126c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    27a2:	4a0d      	ldr	r2, [pc, #52]	; (27d8 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    27a4:	2301      	movs	r3, #1
    27a6:	60a3      	str	r3, [r4, #8]
    27a8:	6023      	str	r3, [r4, #0]
    27aa:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    27ac:	4b0b      	ldr	r3, [pc, #44]	; (27dc <sys_clock_driver_init+0x84>)
    27ae:	4a0c      	ldr	r2, [pc, #48]	; (27e0 <sys_clock_driver_init+0x88>)
    27b0:	9300      	str	r3, [sp, #0]
    27b2:	9501      	str	r5, [sp, #4]
    27b4:	2300      	movs	r3, #0
    27b6:	4628      	mov	r0, r5
    27b8:	f7ff ff40 	bl	263c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    27bc:	4630      	mov	r0, r6
    27be:	f7ff fb37 	bl	1e30 <z_nrf_clock_control_lf_on>

	return 0;
}
    27c2:	4628      	mov	r0, r5
    27c4:	b002      	add	sp, #8
    27c6:	bd70      	pop	{r4, r5, r6, pc}
    27c8:	40011000 	.word	0x40011000
    27cc:	000f0003 	.word	0x000f0003
    27d0:	20000098 	.word	0x20000098
    27d4:	e000e100 	.word	0xe000e100
    27d8:	2000028c 	.word	0x2000028c
    27dc:	00002555 	.word	0x00002555
    27e0:	007fffff 	.word	0x007fffff

000027e4 <rtc_nrf_isr>:
{
    27e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    27e8:	4c2f      	ldr	r4, [pc, #188]	; (28a8 <rtc_nrf_isr+0xc4>)
    27ea:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    27ee:	0799      	lsls	r1, r3, #30
    27f0:	d50b      	bpl.n	280a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27f2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    27f6:	b143      	cbz	r3, 280a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    27f8:	4a2c      	ldr	r2, [pc, #176]	; (28ac <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27fa:	2300      	movs	r3, #0
    27fc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2800:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2804:	6813      	ldr	r3, [r2, #0]
    2806:	3301      	adds	r3, #1
    2808:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    280a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    280e:	03da      	lsls	r2, r3, #15
    2810:	d52a      	bpl.n	2868 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2812:	f3bf 8f5b 	dmb	ish
    2816:	4b26      	ldr	r3, [pc, #152]	; (28b0 <rtc_nrf_isr+0xcc>)
    2818:	e853 2f00 	ldrex	r2, [r3]
    281c:	f022 0101 	bic.w	r1, r2, #1
    2820:	e843 1000 	strex	r0, r1, [r3]
    2824:	2800      	cmp	r0, #0
    2826:	d1f7      	bne.n	2818 <rtc_nrf_isr+0x34>
    2828:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    282c:	07d3      	lsls	r3, r2, #31
    282e:	d402      	bmi.n	2836 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2830:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2834:	b1c3      	cbz	r3, 2868 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2836:	2500      	movs	r5, #0
    2838:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    283c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2840:	f7ff feda 	bl	25f8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2844:	f04f 0320 	mov.w	r3, #32
    2848:	f3ef 8211 	mrs	r2, BASEPRI
    284c:	f383 8812 	msr	BASEPRI_MAX, r3
    2850:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2854:	4b17      	ldr	r3, [pc, #92]	; (28b4 <rtc_nrf_isr+0xd0>)
    2856:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    285a:	42b0      	cmp	r0, r6
    285c:	41b9      	sbcs	r1, r7
    285e:	d206      	bcs.n	286e <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    2860:	f382 8811 	msr	BASEPRI, r2
    2864:	f3bf 8f6f 	isb	sy
}
    2868:	b003      	add	sp, #12
    286a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    286e:	f04f 38ff 	mov.w	r8, #4294967295
    2872:	f04f 39ff 	mov.w	r9, #4294967295
    2876:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    287a:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    287e:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    2880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2884:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2888:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    288c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2890:	f382 8811 	msr	BASEPRI, r2
    2894:	f3bf 8f6f 	isb	sy
		if (handler) {
    2898:	2900      	cmp	r1, #0
    289a:	d0e5      	beq.n	2868 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    289c:	9000      	str	r0, [sp, #0]
    289e:	4632      	mov	r2, r6
    28a0:	463b      	mov	r3, r7
    28a2:	4628      	mov	r0, r5
    28a4:	4788      	blx	r1
    28a6:	e7df      	b.n	2868 <rtc_nrf_isr+0x84>
    28a8:	40011000 	.word	0x40011000
    28ac:	20000290 	.word	0x20000290
    28b0:	20000288 	.word	0x20000288
    28b4:	20000098 	.word	0x20000098

000028b8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    28b8:	1c43      	adds	r3, r0, #1
{
    28ba:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    28bc:	d022      	beq.n	2904 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    28be:	2801      	cmp	r0, #1
    28c0:	dd22      	ble.n	2908 <sys_clock_set_timeout+0x50>
    28c2:	4a12      	ldr	r2, [pc, #72]	; (290c <sys_clock_set_timeout+0x54>)
    28c4:	4b12      	ldr	r3, [pc, #72]	; (2910 <sys_clock_set_timeout+0x58>)
    28c6:	4290      	cmp	r0, r2
    28c8:	bfd4      	ite	le
    28ca:	4604      	movle	r4, r0
    28cc:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    28ce:	f7ff fe93 	bl	25f8 <z_nrf_rtc_timer_read>
    28d2:	4b10      	ldr	r3, [pc, #64]	; (2914 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    28d4:	490e      	ldr	r1, [pc, #56]	; (2910 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    28d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    28da:	1a80      	subs	r0, r0, r2
		cyc = 0;
    28dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    28e0:	bf28      	it	cs
    28e2:	2400      	movcs	r4, #0
	cyc += unannounced;
    28e4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    28e6:	428c      	cmp	r4, r1
    28e8:	bf28      	it	cs
    28ea:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    28ec:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    28ee:	490a      	ldr	r1, [pc, #40]	; (2918 <sys_clock_set_timeout+0x60>)
    28f0:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    28f2:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    28f6:	9001      	str	r0, [sp, #4]
    28f8:	f143 0300 	adc.w	r3, r3, #0
    28fc:	f7ff fe9e 	bl	263c <compare_set>
}
    2900:	b002      	add	sp, #8
    2902:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    2904:	4c02      	ldr	r4, [pc, #8]	; (2910 <sys_clock_set_timeout+0x58>)
    2906:	e7e2      	b.n	28ce <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2908:	2401      	movs	r4, #1
    290a:	e7e0      	b.n	28ce <sys_clock_set_timeout+0x16>
    290c:	007ffffe 	.word	0x007ffffe
    2910:	007fffff 	.word	0x007fffff
    2914:	200000a8 	.word	0x200000a8
    2918:	00002555 	.word	0x00002555

0000291c <sys_clock_elapsed>:
{
    291c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    291e:	f7ff fe6b 	bl	25f8 <z_nrf_rtc_timer_read>
    2922:	4b02      	ldr	r3, [pc, #8]	; (292c <sys_clock_elapsed+0x10>)
    2924:	681b      	ldr	r3, [r3, #0]
}
    2926:	1ac0      	subs	r0, r0, r3
    2928:	bd08      	pop	{r3, pc}
    292a:	bf00      	nop
    292c:	200000a8 	.word	0x200000a8

00002930 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    2930:	4803      	ldr	r0, [pc, #12]	; (2940 <k_sys_fatal_error_handler+0x10>)
{
    2932:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    2934:	2145      	movs	r1, #69	; 0x45
    2936:	f001 fdfe 	bl	4536 <z_log_minimal_printk>
		sys_arch_reboot(0);
    293a:	2000      	movs	r0, #0
    293c:	f7ff f952 	bl	1be4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    2940:	00005640 	.word	0x00005640

00002944 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2944:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    2948:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    294c:	2a06      	cmp	r2, #6
    294e:	d109      	bne.n	2964 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2950:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    2954:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2958:	3b03      	subs	r3, #3
    295a:	2b04      	cmp	r3, #4
    295c:	d802      	bhi.n	2964 <nrf52_errata_16+0x20>
    295e:	4a02      	ldr	r2, [pc, #8]	; (2968 <nrf52_errata_16+0x24>)
    2960:	5cd0      	ldrb	r0, [r2, r3]
    2962:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    2964:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    2966:	4770      	bx	lr
    2968:	00005671 	.word	0x00005671

0000296c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    296c:	4a02      	ldr	r2, [pc, #8]	; (2978 <nvmc_wait+0xc>)
    296e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2972:	2b00      	cmp	r3, #0
    2974:	d0fb      	beq.n	296e <nvmc_wait+0x2>
}
    2976:	4770      	bx	lr
    2978:	4001e000 	.word	0x4001e000

0000297c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    297c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    297e:	f002 f82d 	bl	49dc <nrf52_errata_108>
    2982:	b140      	cbz	r0, 2996 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2984:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2988:	4a8e      	ldr	r2, [pc, #568]	; (2bc4 <SystemInit+0x248>)
    298a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    298e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2992:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2996:	f7ff ffd5 	bl	2944 <nrf52_errata_16>
    299a:	b110      	cbz	r0, 29a2 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    299c:	4b8a      	ldr	r3, [pc, #552]	; (2bc8 <SystemInit+0x24c>)
    299e:	4a8b      	ldr	r2, [pc, #556]	; (2bcc <SystemInit+0x250>)
    29a0:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    29a2:	f002 f81b 	bl	49dc <nrf52_errata_108>
    29a6:	b148      	cbz	r0, 29bc <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    29a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    29ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    29b0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    29b4:	f3c3 3342 	ubfx	r3, r3, #13, #3
    29b8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    29bc:	f7ff ffc2 	bl	2944 <nrf52_errata_16>
    29c0:	b130      	cbz	r0, 29d0 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    29c2:	4a83      	ldr	r2, [pc, #524]	; (2bd0 <SystemInit+0x254>)
    29c4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    29c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    29cc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    29d0:	f002 f804 	bl	49dc <nrf52_errata_108>
    29d4:	b140      	cbz	r0, 29e8 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    29d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29da:	2200      	movs	r2, #0
    29dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    29e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    29e4:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    29e8:	f7ff ffac 	bl	2944 <nrf52_errata_16>
    29ec:	b120      	cbz	r0, 29f8 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    29ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29f2:	2203      	movs	r2, #3
    29f4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    29f8:	f7ff ffa4 	bl	2944 <nrf52_errata_16>
    29fc:	b160      	cbz	r0, 2a18 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    29fe:	4b75      	ldr	r3, [pc, #468]	; (2bd4 <SystemInit+0x258>)
    2a00:	2205      	movs	r2, #5
    2a02:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2a06:	2201      	movs	r2, #1
    2a08:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    2a0c:	2200      	movs	r2, #0
    2a0e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2a12:	223f      	movs	r2, #63	; 0x3f
    2a14:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2a1c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2a20:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2a22:	bf09      	itett	eq
    2a24:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    2a28:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2a2c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2a30:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    2a34:	bf08      	it	eq
    2a36:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2a3a:	2a06      	cmp	r2, #6
    2a3c:	d14d      	bne.n	2ada <SystemInit+0x15e>
            {
                switch(var2)
    2a3e:	3b03      	subs	r3, #3
    2a40:	2b04      	cmp	r3, #4
    2a42:	d803      	bhi.n	2a4c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2a44:	4a64      	ldr	r2, [pc, #400]	; (2bd8 <SystemInit+0x25c>)
    2a46:	5cd3      	ldrb	r3, [r2, r3]
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d046      	beq.n	2ada <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2a50:	4b62      	ldr	r3, [pc, #392]	; (2bdc <SystemInit+0x260>)
    2a52:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2a56:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2a5a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2a5e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2a62:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2a66:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2a6a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2a6e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2a72:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2a76:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2a7a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2a7e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2a82:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2a86:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2a8a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2a8e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2a92:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2a96:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2a9a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2a9e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2aa2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2aa6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2aaa:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2aae:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2ab2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2ab6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2aba:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2abe:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2ac2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2ac6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2aca:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2ace:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2ad2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2ad6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    2ada:	f001 ff7f 	bl	49dc <nrf52_errata_108>
    2ade:	b148      	cbz	r0, 2af4 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2ae0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ae8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2aec:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2af0:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2af4:	f001 ff72 	bl	49dc <nrf52_errata_108>
    2af8:	b148      	cbz	r0, 2b0e <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2afe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2b02:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2b04:	bf44      	itt	mi
    2b06:	f06f 0201 	mvnmi.w	r2, #1
    2b0a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2b0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2b12:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2b16:	2a06      	cmp	r2, #6
    2b18:	d126      	bne.n	2b68 <SystemInit+0x1ec>
            {
                switch(var2)
    2b1a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2b1e:	3b03      	subs	r3, #3
    2b20:	2b04      	cmp	r3, #4
    2b22:	d802      	bhi.n	2b2a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2b24:	4a2e      	ldr	r2, [pc, #184]	; (2be0 <SystemInit+0x264>)
    2b26:	5cd3      	ldrb	r3, [r2, r3]
    2b28:	b163      	cbz	r3, 2b44 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2b2a:	4a2e      	ldr	r2, [pc, #184]	; (2be4 <SystemInit+0x268>)
    2b2c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    2b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2b34:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2b38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2b3c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2b40:	2b06      	cmp	r3, #6
    2b42:	d111      	bne.n	2b68 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2b44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2b48:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2b4c:	3b03      	subs	r3, #3
    2b4e:	2b04      	cmp	r3, #4
    2b50:	d802      	bhi.n	2b58 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2b52:	4a25      	ldr	r2, [pc, #148]	; (2be8 <SystemInit+0x26c>)
    2b54:	5cd3      	ldrb	r3, [r2, r3]
    2b56:	b13b      	cbz	r3, 2b68 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2b58:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2b5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b64:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2b68:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2b6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2b70:	2a00      	cmp	r2, #0
    2b72:	db03      	blt.n	2b7c <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2b74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2b78:	2b00      	cmp	r3, #0
    2b7a:	da22      	bge.n	2bc2 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2b7c:	491b      	ldr	r1, [pc, #108]	; (2bec <SystemInit+0x270>)
    2b7e:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2b80:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2b84:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2b88:	2415      	movs	r4, #21
    nvmc_wait();
    2b8a:	f7ff feef 	bl	296c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2b8e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2b92:	f7ff feeb 	bl	296c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2b96:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2b9a:	f7ff fee7 	bl	296c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2b9e:	2300      	movs	r3, #0
    2ba0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2ba4:	f7ff fee2 	bl	296c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2ba8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2bac:	4908      	ldr	r1, [pc, #32]	; (2bd0 <SystemInit+0x254>)
    2bae:	4b10      	ldr	r3, [pc, #64]	; (2bf0 <SystemInit+0x274>)
    2bb0:	68ca      	ldr	r2, [r1, #12]
    2bb2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2bb6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2bb8:	60cb      	str	r3, [r1, #12]
    2bba:	f3bf 8f4f 	dsb	sy
    __NOP();
    2bbe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2bc0:	e7fd      	b.n	2bbe <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    2bc2:	bd10      	pop	{r4, pc}
    2bc4:	40013000 	.word	0x40013000
    2bc8:	4007c000 	.word	0x4007c000
    2bcc:	baadf00d 	.word	0xbaadf00d
    2bd0:	e000ed00 	.word	0xe000ed00
    2bd4:	40005000 	.word	0x40005000
    2bd8:	0000566c 	.word	0x0000566c
    2bdc:	4000c000 	.word	0x4000c000
    2be0:	00005667 	.word	0x00005667
    2be4:	40001000 	.word	0x40001000
    2be8:	00005662 	.word	0x00005662
    2bec:	4001e000 	.word	0x4001e000
    2bf0:	05fa0004 	.word	0x05fa0004

00002bf4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2bf4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2bf6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2bf8:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2bfa:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    2bfe:	fab2 f382 	clz	r3, r2
    2c02:	f1c3 031f 	rsb	r3, r3, #31
    2c06:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2c08:	fa05 f403 	lsl.w	r4, r5, r3
    2c0c:	ea22 0404 	bic.w	r4, r2, r4
    2c10:	e850 6f00 	ldrex	r6, [r0]
    2c14:	4296      	cmp	r6, r2
    2c16:	d104      	bne.n	2c22 <nrfx_flag32_alloc+0x2e>
    2c18:	e840 4c00 	strex	ip, r4, [r0]
    2c1c:	f1bc 0f00 	cmp.w	ip, #0
    2c20:	d1f6      	bne.n	2c10 <nrfx_flag32_alloc+0x1c>
    2c22:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c26:	d1e7      	bne.n	2bf8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2c28:	4801      	ldr	r0, [pc, #4]	; (2c30 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    2c2a:	700b      	strb	r3, [r1, #0]
}
    2c2c:	bd70      	pop	{r4, r5, r6, pc}
    2c2e:	bf00      	nop
    2c30:	0bad0000 	.word	0x0bad0000

00002c34 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2c34:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2c36:	6803      	ldr	r3, [r0, #0]
    2c38:	40cb      	lsrs	r3, r1
    2c3a:	07db      	lsls	r3, r3, #31
    2c3c:	d414      	bmi.n	2c68 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2c3e:	2301      	movs	r3, #1
    2c40:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2c42:	6802      	ldr	r2, [r0, #0]
    2c44:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2c48:	ea43 0102 	orr.w	r1, r3, r2
    2c4c:	e850 4f00 	ldrex	r4, [r0]
    2c50:	4294      	cmp	r4, r2
    2c52:	d104      	bne.n	2c5e <nrfx_flag32_free+0x2a>
    2c54:	e840 1c00 	strex	ip, r1, [r0]
    2c58:	f1bc 0f00 	cmp.w	ip, #0
    2c5c:	d1f6      	bne.n	2c4c <nrfx_flag32_free+0x18>
    2c5e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c62:	d1ee      	bne.n	2c42 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2c64:	4801      	ldr	r0, [pc, #4]	; (2c6c <nrfx_flag32_free+0x38>)
}
    2c66:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2c68:	4801      	ldr	r0, [pc, #4]	; (2c70 <nrfx_flag32_free+0x3c>)
    2c6a:	e7fc      	b.n	2c66 <nrfx_flag32_free+0x32>
    2c6c:	0bad0000 	.word	0x0bad0000
    2c70:	0bad0004 	.word	0x0bad0004

00002c74 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2c76:	4604      	mov	r4, r0
    2c78:	b118      	cbz	r0, 2c82 <clock_stop+0xe>
    2c7a:	2801      	cmp	r0, #1
    2c7c:	d022      	beq.n	2cc4 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2c7e:	b003      	add	sp, #12
    2c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c86:	2202      	movs	r2, #2
    2c88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c8c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2c90:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2c94:	2201      	movs	r2, #1
    2c96:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2c98:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2c9a:	2301      	movs	r3, #1
    2c9c:	f88d 3007 	strb.w	r3, [sp, #7]
    2ca0:	f242 7510 	movw	r5, #10000	; 0x2710
    2ca4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2ca8:	b1cc      	cbz	r4, 2cde <clock_stop+0x6a>
    2caa:	2c01      	cmp	r4, #1
    2cac:	d1e7      	bne.n	2c7e <clock_stop+0xa>
            if (p_clk_src != NULL)
    2cae:	b3c7      	cbz	r7, 2d22 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2cb0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2cb4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2cb8:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2cba:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2cbe:	03da      	lsls	r2, r3, #15
    2cc0:	d521      	bpl.n	2d06 <clock_stop+0x92>
    2cc2:	e016      	b.n	2cf2 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    2cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cc8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2cca:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2cd2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cd6:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2cd8:	f10d 0707 	add.w	r7, sp, #7
    2cdc:	e7dd      	b.n	2c9a <clock_stop+0x26>
            if (p_clk_src != NULL)
    2cde:	b1b7      	cbz	r7, 2d0e <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2ce0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2ce4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2ce8:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2cea:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2cee:	03d8      	lsls	r0, r3, #15
    2cf0:	d5c5      	bpl.n	2c7e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2cf2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2cf6:	2801      	cmp	r0, #1
    2cf8:	d103      	bne.n	2d02 <clock_stop+0x8e>
    2cfa:	f001 fe7e 	bl	49fa <nrfx_busy_wait>
    2cfe:	3d01      	subs	r5, #1
    2d00:	d1d2      	bne.n	2ca8 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2d02:	2c01      	cmp	r4, #1
    2d04:	d1bb      	bne.n	2c7e <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    2d06:	4b0c      	ldr	r3, [pc, #48]	; (2d38 <clock_stop+0xc4>)
    2d08:	2200      	movs	r2, #0
    2d0a:	715a      	strb	r2, [r3, #5]
    2d0c:	e7b7      	b.n	2c7e <clock_stop+0xa>
    2d0e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2d12:	03d9      	lsls	r1, r3, #15
    2d14:	d5b3      	bpl.n	2c7e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2d16:	2001      	movs	r0, #1
    2d18:	f001 fe6f 	bl	49fa <nrfx_busy_wait>
    2d1c:	3d01      	subs	r5, #1
    2d1e:	d1f6      	bne.n	2d0e <clock_stop+0x9a>
    2d20:	e7ad      	b.n	2c7e <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2d22:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2d26:	03db      	lsls	r3, r3, #15
    2d28:	d5ed      	bpl.n	2d06 <clock_stop+0x92>
    2d2a:	2001      	movs	r0, #1
    2d2c:	f001 fe65 	bl	49fa <nrfx_busy_wait>
    2d30:	3d01      	subs	r5, #1
    2d32:	d1f6      	bne.n	2d22 <clock_stop+0xae>
    2d34:	e7e7      	b.n	2d06 <clock_stop+0x92>
    2d36:	bf00      	nop
    2d38:	20000294 	.word	0x20000294

00002d3c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2d3c:	4b04      	ldr	r3, [pc, #16]	; (2d50 <nrfx_clock_init+0x14>)
    2d3e:	791a      	ldrb	r2, [r3, #4]
    2d40:	b922      	cbnz	r2, 2d4c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2d42:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2d44:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2d46:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2d48:	4802      	ldr	r0, [pc, #8]	; (2d54 <nrfx_clock_init+0x18>)
    2d4a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2d4c:	4802      	ldr	r0, [pc, #8]	; (2d58 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2d4e:	4770      	bx	lr
    2d50:	20000294 	.word	0x20000294
    2d54:	0bad0000 	.word	0x0bad0000
    2d58:	0bad000c 	.word	0x0bad000c

00002d5c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    2d5c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2d5e:	b110      	cbz	r0, 2d66 <nrfx_clock_start+0xa>
    2d60:	2801      	cmp	r0, #1
    2d62:	d043      	beq.n	2dec <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    2d64:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d6a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2d6e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2d72:	03c8      	lsls	r0, r1, #15
    2d74:	d40b      	bmi.n	2d8e <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    2d76:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    2d7a:	07d9      	lsls	r1, r3, #31
    2d7c:	d50f      	bpl.n	2d9e <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2d7e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    2d82:	079b      	lsls	r3, r3, #30
    2d84:	d408      	bmi.n	2d98 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    2d86:	2302      	movs	r3, #2
    2d88:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    2d8c:	e7ea      	b.n	2d64 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2d8e:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    2d92:	2b01      	cmp	r3, #1
    2d94:	d004      	beq.n	2da0 <nrfx_clock_start+0x44>
    2d96:	b113      	cbz	r3, 2d9e <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    2d98:	2000      	movs	r0, #0
    2d9a:	f7ff ff6b 	bl	2c74 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    2d9e:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    2da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2da4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2da8:	2300      	movs	r3, #0
    2daa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    2dae:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    2db2:	2302      	movs	r3, #2
    2db4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    2db8:	4a12      	ldr	r2, [pc, #72]	; (2e04 <nrfx_clock_start+0xa8>)
    2dba:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    2dbe:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    2dc2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    2dc6:	4b10      	ldr	r3, [pc, #64]	; (2e08 <nrfx_clock_start+0xac>)
    2dc8:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    2dca:	f044 0101 	orr.w	r1, r4, #1
    2dce:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    2dd0:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    2dd2:	6859      	ldr	r1, [r3, #4]
    2dd4:	1b49      	subs	r1, r1, r5
    2dd6:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    2dda:	d3fa      	bcc.n	2dd2 <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
    2ddc:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    2de2:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    2de6:	2201      	movs	r2, #1
    2de8:	609a      	str	r2, [r3, #8]
}
    2dea:	e7bb      	b.n	2d64 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2df0:	2200      	movs	r2, #0
    2df2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2df6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    2dfa:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dfe:	6018      	str	r0, [r3, #0]
}
    2e00:	e7b0      	b.n	2d64 <nrfx_clock_start+0x8>
    2e02:	bf00      	nop
    2e04:	e000ed00 	.word	0xe000ed00
    2e08:	e0001000 	.word	0xe0001000

00002e0c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e0c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e16:	b16a      	cbz	r2, 2e34 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e18:	2200      	movs	r2, #0
    2e1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2e1e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2e22:	2201      	movs	r2, #1
    2e24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2e28:	4b11      	ldr	r3, [pc, #68]	; (2e70 <nrfx_power_clock_irq_handler+0x64>)
    2e2a:	7958      	ldrb	r0, [r3, #5]
    2e2c:	b910      	cbnz	r0, 2e34 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    2e2e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2e30:	681b      	ldr	r3, [r3, #0]
    2e32:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2e3c:	b172      	cbz	r2, 2e5c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e3e:	2200      	movs	r2, #0
    2e40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2e44:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2e48:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2e4c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2e50:	0792      	lsls	r2, r2, #30
    2e52:	d104      	bne.n	2e5e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2e54:	2201      	movs	r2, #1
    2e56:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e5a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2e5c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2e5e:	2202      	movs	r2, #2
    2e60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e64:	4b02      	ldr	r3, [pc, #8]	; (2e70 <nrfx_power_clock_irq_handler+0x64>)
}
    2e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e6a:	681b      	ldr	r3, [r3, #0]
    2e6c:	2001      	movs	r0, #1
    2e6e:	4718      	bx	r3
    2e70:	20000294 	.word	0x20000294

00002e74 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2e74:	4b03      	ldr	r3, [pc, #12]	; (2e84 <pin_in_use_by_te+0x10>)
    2e76:	3008      	adds	r0, #8
    2e78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e7c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2e80:	4770      	bx	lr
    2e82:	bf00      	nop
    2e84:	20000028 	.word	0x20000028

00002e88 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2e88:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2e8a:	f100 0308 	add.w	r3, r0, #8
    2e8e:	4c0c      	ldr	r4, [pc, #48]	; (2ec0 <call_handler+0x38>)
    2e90:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2e94:	05da      	lsls	r2, r3, #23
{
    2e96:	4605      	mov	r5, r0
    2e98:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2e9a:	d507      	bpl.n	2eac <call_handler+0x24>
    2e9c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2ea0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2ea4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2ea8:	6852      	ldr	r2, [r2, #4]
    2eaa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2eac:	68a3      	ldr	r3, [r4, #8]
    2eae:	b12b      	cbz	r3, 2ebc <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2eb0:	68e2      	ldr	r2, [r4, #12]
    2eb2:	4631      	mov	r1, r6
    2eb4:	4628      	mov	r0, r5
    }
}
    2eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2eba:	4718      	bx	r3
}
    2ebc:	bd70      	pop	{r4, r5, r6, pc}
    2ebe:	bf00      	nop
    2ec0:	20000028 	.word	0x20000028

00002ec4 <release_handler>:
{
    2ec4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2ec6:	4a12      	ldr	r2, [pc, #72]	; (2f10 <release_handler+0x4c>)
    2ec8:	3008      	adds	r0, #8
    2eca:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2ece:	05d9      	lsls	r1, r3, #23
    2ed0:	d51b      	bpl.n	2f0a <release_handler+0x46>
    2ed2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2ed6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2eda:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ede:	f102 040e 	add.w	r4, r2, #14
    2ee2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2ee4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2ee8:	f413 7f80 	tst.w	r3, #256	; 0x100
    2eec:	d003      	beq.n	2ef6 <release_handler+0x32>
    2eee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2ef2:	4299      	cmp	r1, r3
    2ef4:	d009      	beq.n	2f0a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ef6:	3001      	adds	r0, #1
    2ef8:	2820      	cmp	r0, #32
    2efa:	d1f3      	bne.n	2ee4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2efc:	2300      	movs	r3, #0
    2efe:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f02:	4804      	ldr	r0, [pc, #16]	; (2f14 <release_handler+0x50>)
}
    2f04:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f06:	f7ff be95 	b.w	2c34 <nrfx_flag32_free>
}
    2f0a:	bc10      	pop	{r4}
    2f0c:	4770      	bx	lr
    2f0e:	bf00      	nop
    2f10:	20000028 	.word	0x20000028
    2f14:	2000007c 	.word	0x2000007c

00002f18 <pin_handler_trigger_uninit>:
{
    2f18:	b538      	push	{r3, r4, r5, lr}
    2f1a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2f1c:	f7ff ffaa 	bl	2e74 <pin_in_use_by_te>
    2f20:	4c09      	ldr	r4, [pc, #36]	; (2f48 <pin_handler_trigger_uninit+0x30>)
    2f22:	f102 0508 	add.w	r5, r2, #8
    2f26:	b140      	cbz	r0, 2f3a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f28:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2f2c:	4907      	ldr	r1, [pc, #28]	; (2f4c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2f2e:	0b5b      	lsrs	r3, r3, #13
    2f30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2f34:	2000      	movs	r0, #0
    2f36:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2f3a:	4610      	mov	r0, r2
    2f3c:	f7ff ffc2 	bl	2ec4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2f40:	2300      	movs	r3, #0
    2f42:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2f46:	bd38      	pop	{r3, r4, r5, pc}
    2f48:	20000028 	.word	0x20000028
    2f4c:	40006000 	.word	0x40006000

00002f50 <nrfx_gpiote_input_configure>:
{
    2f50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2f54:	4604      	mov	r4, r0
    2f56:	461d      	mov	r5, r3
    if (p_input_config)
    2f58:	b309      	cbz	r1, 2f9e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2f5a:	4f4f      	ldr	r7, [pc, #316]	; (3098 <nrfx_gpiote_input_configure+0x148>)
    2f5c:	f100 0808 	add.w	r8, r0, #8
    2f60:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2f64:	07b3      	lsls	r3, r6, #30
    2f66:	d506      	bpl.n	2f76 <nrfx_gpiote_input_configure+0x26>
    2f68:	f7ff ff84 	bl	2e74 <pin_in_use_by_te>
    2f6c:	b118      	cbz	r0, 2f76 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    2f6e:	484b      	ldr	r0, [pc, #300]	; (309c <nrfx_gpiote_input_configure+0x14c>)
}
    2f70:	b002      	add	sp, #8
    2f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    2f76:	f004 031f 	and.w	r3, r4, #31
    2f7a:	009b      	lsls	r3, r3, #2
    2f7c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2f80:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2f82:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2f86:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    2f8a:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2f8e:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2f92:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    2f96:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    2f9a:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    2f9e:	b19a      	cbz	r2, 2fc8 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fa0:	4b3d      	ldr	r3, [pc, #244]	; (3098 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2fa2:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2fa4:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fa6:	f104 0608 	add.w	r6, r4, #8
    2faa:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    2fae:	f011 0f02 	tst.w	r1, #2
    2fb2:	d00d      	beq.n	2fd0 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    2fb4:	2800      	cmp	r0, #0
    2fb6:	d1da      	bne.n	2f6e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2fb8:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    2fbc:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2fc0:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    2fc4:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    2fc8:	2d00      	cmp	r5, #0
    2fca:	d13b      	bne.n	3044 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    2fcc:	4834      	ldr	r0, [pc, #208]	; (30a0 <nrfx_gpiote_input_configure+0x150>)
    2fce:	e7cf      	b.n	2f70 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2fd0:	f021 0120 	bic.w	r1, r1, #32
    2fd4:	04c9      	lsls	r1, r1, #19
    2fd6:	0cc9      	lsrs	r1, r1, #19
    2fd8:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    2fdc:	2800      	cmp	r0, #0
    2fde:	d0eb      	beq.n	2fb8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    2fe0:	2f03      	cmp	r7, #3
    2fe2:	d8c4      	bhi.n	2f6e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2fe4:	6852      	ldr	r2, [r2, #4]
    2fe6:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2fea:	b92f      	cbnz	r7, 2ff8 <nrfx_gpiote_input_configure+0xa8>
    2fec:	4a2d      	ldr	r2, [pc, #180]	; (30a4 <nrfx_gpiote_input_configure+0x154>)
    2fee:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    2ff2:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    2ff6:	e7df      	b.n	2fb8 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2ff8:	ea4f 028c 	mov.w	r2, ip, lsl #2
    2ffc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3000:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3004:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3008:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    300c:	f020 0003 	bic.w	r0, r0, #3
    3010:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3014:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3018:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    301c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3020:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3024:	0220      	lsls	r0, r4, #8
    3026:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    302a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    302e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    3032:	ea40 000e 	orr.w	r0, r0, lr
    3036:	f041 0120 	orr.w	r1, r1, #32
    303a:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    303e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    3042:	e7b9      	b.n	2fb8 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3044:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3048:	4620      	mov	r0, r4
    304a:	f7ff ff3b 	bl	2ec4 <release_handler>
    if (!handler)
    304e:	2e00      	cmp	r6, #0
    3050:	d0bc      	beq.n	2fcc <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3052:	4d11      	ldr	r5, [pc, #68]	; (3098 <nrfx_gpiote_input_configure+0x148>)
    3054:	e9d5 2300 	ldrd	r2, r3, [r5]
    3058:	4296      	cmp	r6, r2
    305a:	d101      	bne.n	3060 <nrfx_gpiote_input_configure+0x110>
    305c:	429f      	cmp	r7, r3
    305e:	d019      	beq.n	3094 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3060:	4811      	ldr	r0, [pc, #68]	; (30a8 <nrfx_gpiote_input_configure+0x158>)
    3062:	f10d 0107 	add.w	r1, sp, #7
    3066:	f7ff fdc5 	bl	2bf4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    306a:	4b0d      	ldr	r3, [pc, #52]	; (30a0 <nrfx_gpiote_input_configure+0x150>)
    306c:	4298      	cmp	r0, r3
    306e:	f47f af7f 	bne.w	2f70 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    3072:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    3076:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    307a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    307e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3080:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3082:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3086:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    308a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    308e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3092:	e79b      	b.n	2fcc <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3094:	2200      	movs	r2, #0
    3096:	e7ee      	b.n	3076 <nrfx_gpiote_input_configure+0x126>
    3098:	20000028 	.word	0x20000028
    309c:	0bad0004 	.word	0x0bad0004
    30a0:	0bad0000 	.word	0x0bad0000
    30a4:	40006000 	.word	0x40006000
    30a8:	2000007c 	.word	0x2000007c

000030ac <nrfx_gpiote_output_configure>:
{
    30ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30ae:	4604      	mov	r4, r0
    if (p_config)
    30b0:	b389      	cbz	r1, 3116 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    30b2:	4e3a      	ldr	r6, [pc, #232]	; (319c <nrfx_gpiote_output_configure+0xf0>)
    30b4:	f100 0708 	add.w	r7, r0, #8
    30b8:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    30bc:	07ab      	lsls	r3, r5, #30
    30be:	d404      	bmi.n	30ca <nrfx_gpiote_output_configure+0x1e>
    30c0:	f7ff fed8 	bl	2e74 <pin_in_use_by_te>
    30c4:	b108      	cbz	r0, 30ca <nrfx_gpiote_output_configure+0x1e>
{
    30c6:	4836      	ldr	r0, [pc, #216]	; (31a0 <nrfx_gpiote_output_configure+0xf4>)
}
    30c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    30ca:	f015 0f1c 	tst.w	r5, #28
    30ce:	784b      	ldrb	r3, [r1, #1]
    30d0:	d124      	bne.n	311c <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    30d2:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    30d6:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    30da:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    30de:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    30e0:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    30e4:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    30e8:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    30ea:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    30ee:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    30f2:	f02c 0c07 	bic.w	ip, ip, #7
    30f6:	ea43 030c 	orr.w	r3, r3, ip
    30fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    30fe:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    3102:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3106:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    310a:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    310e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    3112:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    3116:	b922      	cbnz	r2, 3122 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    3118:	4822      	ldr	r0, [pc, #136]	; (31a4 <nrfx_gpiote_output_configure+0xf8>)
    311a:	e7d5      	b.n	30c8 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    311c:	2b01      	cmp	r3, #1
    311e:	d1d8      	bne.n	30d2 <nrfx_gpiote_output_configure+0x26>
    3120:	e7d1      	b.n	30c6 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3122:	4e1e      	ldr	r6, [pc, #120]	; (319c <nrfx_gpiote_output_configure+0xf0>)
    3124:	f104 0708 	add.w	r7, r4, #8
    3128:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    312c:	0783      	lsls	r3, r0, #30
    312e:	d5ca      	bpl.n	30c6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    3130:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    3134:	4661      	mov	r1, ip
    3136:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3138:	f020 0020 	bic.w	r0, r0, #32
    313c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3140:	04c0      	lsls	r0, r0, #19
    3142:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3146:	0cc0      	lsrs	r0, r0, #19
    3148:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    314c:	2300      	movs	r3, #0
    314e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3152:	7855      	ldrb	r5, [r2, #1]
    3154:	2d00      	cmp	r5, #0
    3156:	d0df      	beq.n	3118 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3158:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    315c:	7892      	ldrb	r2, [r2, #2]
    315e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3162:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3166:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    316a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    316e:	0223      	lsls	r3, r4, #8
    3170:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3174:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3176:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    317a:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    317e:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3180:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3182:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3186:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    318a:	4313      	orrs	r3, r2
    318c:	f040 0020 	orr.w	r0, r0, #32
    3190:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3194:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3198:	e7be      	b.n	3118 <nrfx_gpiote_output_configure+0x6c>
    319a:	bf00      	nop
    319c:	20000028 	.word	0x20000028
    31a0:	0bad0004 	.word	0x0bad0004
    31a4:	0bad0000 	.word	0x0bad0000

000031a8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    31a8:	4b01      	ldr	r3, [pc, #4]	; (31b0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    31aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    31ae:	4770      	bx	lr
    31b0:	20000028 	.word	0x20000028

000031b4 <nrfx_gpiote_channel_get>:
{
    31b4:	b508      	push	{r3, lr}
    31b6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    31b8:	f7ff fe5c 	bl	2e74 <pin_in_use_by_te>
    31bc:	b138      	cbz	r0, 31ce <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31be:	4b05      	ldr	r3, [pc, #20]	; (31d4 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    31c0:	4805      	ldr	r0, [pc, #20]	; (31d8 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    31c2:	3208      	adds	r2, #8
    31c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    31c8:	0b5b      	lsrs	r3, r3, #13
    31ca:	700b      	strb	r3, [r1, #0]
}
    31cc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    31ce:	4803      	ldr	r0, [pc, #12]	; (31dc <nrfx_gpiote_channel_get+0x28>)
    31d0:	e7fc      	b.n	31cc <nrfx_gpiote_channel_get+0x18>
    31d2:	bf00      	nop
    31d4:	20000028 	.word	0x20000028
    31d8:	0bad0000 	.word	0x0bad0000
    31dc:	0bad0004 	.word	0x0bad0004

000031e0 <nrfx_gpiote_init>:
{
    31e0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    31e2:	4c0f      	ldr	r4, [pc, #60]	; (3220 <nrfx_gpiote_init+0x40>)
    31e4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    31e8:	b9bd      	cbnz	r5, 321a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    31ea:	2240      	movs	r2, #64	; 0x40
    31ec:	4629      	mov	r1, r5
    31ee:	f104 0010 	add.w	r0, r4, #16
    31f2:	f001 f9e1 	bl	45b8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    31f6:	2006      	movs	r0, #6
    31f8:	f7fe f838 	bl	126c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    31fc:	4b09      	ldr	r3, [pc, #36]	; (3224 <nrfx_gpiote_init+0x44>)
    return err_code;
    31fe:	480a      	ldr	r0, [pc, #40]	; (3228 <nrfx_gpiote_init+0x48>)
    3200:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3204:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3208:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    320c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3210:	2301      	movs	r3, #1
    3212:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3216:	6563      	str	r3, [r4, #84]	; 0x54
}
    3218:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    321a:	4804      	ldr	r0, [pc, #16]	; (322c <nrfx_gpiote_init+0x4c>)
    321c:	e7fc      	b.n	3218 <nrfx_gpiote_init+0x38>
    321e:	bf00      	nop
    3220:	20000028 	.word	0x20000028
    3224:	40006000 	.word	0x40006000
    3228:	0bad0000 	.word	0x0bad0000
    322c:	0bad0005 	.word	0x0bad0005

00003230 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3230:	4b03      	ldr	r3, [pc, #12]	; (3240 <nrfx_gpiote_is_init+0x10>)
    3232:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3236:	3800      	subs	r0, #0
    3238:	bf18      	it	ne
    323a:	2001      	movne	r0, #1
    323c:	4770      	bx	lr
    323e:	bf00      	nop
    3240:	20000028 	.word	0x20000028

00003244 <nrfx_gpiote_channel_free>:
{
    3244:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3246:	4801      	ldr	r0, [pc, #4]	; (324c <nrfx_gpiote_channel_free+0x8>)
    3248:	f7ff bcf4 	b.w	2c34 <nrfx_flag32_free>
    324c:	20000078 	.word	0x20000078

00003250 <nrfx_gpiote_channel_alloc>:
{
    3250:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3252:	4801      	ldr	r0, [pc, #4]	; (3258 <nrfx_gpiote_channel_alloc+0x8>)
    3254:	f7ff bcce 	b.w	2bf4 <nrfx_flag32_alloc>
    3258:	20000078 	.word	0x20000078

0000325c <nrfx_gpiote_trigger_enable>:
{
    325c:	b510      	push	{r4, lr}
    325e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3260:	f7ff fe08 	bl	2e74 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3264:	f102 0408 	add.w	r4, r2, #8
    3268:	4b1c      	ldr	r3, [pc, #112]	; (32dc <nrfx_gpiote_trigger_enable+0x80>)
    326a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    326e:	b1e0      	cbz	r0, 32aa <nrfx_gpiote_trigger_enable+0x4e>
    3270:	f013 0402 	ands.w	r4, r3, #2
    3274:	d119      	bne.n	32aa <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3276:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3278:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    327a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    327e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    3282:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3286:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    328a:	6004      	str	r4, [r0, #0]
    328c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    328e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3292:	f040 0001 	orr.w	r0, r0, #1
    3296:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    329a:	b129      	cbz	r1, 32a8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    329c:	2201      	movs	r2, #1
    329e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    32a2:	4a0f      	ldr	r2, [pc, #60]	; (32e0 <nrfx_gpiote_trigger_enable+0x84>)
    32a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    32a8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32aa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    32ae:	2b04      	cmp	r3, #4
    32b0:	d010      	beq.n	32d4 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    32b2:	2b05      	cmp	r3, #5
    32b4:	d010      	beq.n	32d8 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    32b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    32ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    32be:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    32c2:	40d9      	lsrs	r1, r3
    32c4:	f001 0101 	and.w	r1, r1, #1
    32c8:	3102      	adds	r1, #2
}
    32ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    32ce:	4610      	mov	r0, r2
    32d0:	f001 bba4 	b.w	4a1c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    32d4:	2103      	movs	r1, #3
    32d6:	e7f8      	b.n	32ca <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    32d8:	2102      	movs	r1, #2
    32da:	e7f6      	b.n	32ca <nrfx_gpiote_trigger_enable+0x6e>
    32dc:	20000028 	.word	0x20000028
    32e0:	40006000 	.word	0x40006000

000032e4 <nrfx_gpiote_trigger_disable>:
{
    32e4:	b508      	push	{r3, lr}
    32e6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    32e8:	f7ff fdc4 	bl	2e74 <pin_in_use_by_te>
    32ec:	b1c0      	cbz	r0, 3320 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    32ee:	f102 0108 	add.w	r1, r2, #8
    32f2:	4b0e      	ldr	r3, [pc, #56]	; (332c <nrfx_gpiote_trigger_disable+0x48>)
    32f4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    32f8:	0799      	lsls	r1, r3, #30
    32fa:	d411      	bmi.n	3320 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32fc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    32fe:	2201      	movs	r2, #1
    3300:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3302:	009b      	lsls	r3, r3, #2
    3304:	490a      	ldr	r1, [pc, #40]	; (3330 <nrfx_gpiote_trigger_disable+0x4c>)
    3306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    330a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    330e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3312:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3316:	f022 0203 	bic.w	r2, r2, #3
    331a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    331e:	bd08      	pop	{r3, pc}
    3320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3324:	2100      	movs	r1, #0
    3326:	4610      	mov	r0, r2
    3328:	f001 bb78 	b.w	4a1c <nrf_gpio_cfg_sense_set>
    332c:	20000028 	.word	0x20000028
    3330:	40006000 	.word	0x40006000

00003334 <nrfx_gpiote_pin_uninit>:
{
    3334:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3336:	4b0d      	ldr	r3, [pc, #52]	; (336c <nrfx_gpiote_pin_uninit+0x38>)
    3338:	f100 0208 	add.w	r2, r0, #8
{
    333c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    333e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3342:	07db      	lsls	r3, r3, #31
    3344:	d50f      	bpl.n	3366 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    3346:	f7ff ffcd 	bl	32e4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    334a:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    334c:	f004 041f 	and.w	r4, r4, #31
    3350:	f7ff fde2 	bl	2f18 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3354:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    3358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    335c:	2202      	movs	r2, #2
    335e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    3362:	4803      	ldr	r0, [pc, #12]	; (3370 <nrfx_gpiote_pin_uninit+0x3c>)
}
    3364:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3366:	4803      	ldr	r0, [pc, #12]	; (3374 <nrfx_gpiote_pin_uninit+0x40>)
    3368:	e7fc      	b.n	3364 <nrfx_gpiote_pin_uninit+0x30>
    336a:	bf00      	nop
    336c:	20000028 	.word	0x20000028
    3370:	0bad0000 	.word	0x0bad0000
    3374:	0bad0004 	.word	0x0bad0004

00003378 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    337c:	4b4f      	ldr	r3, [pc, #316]	; (34bc <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    337e:	4850      	ldr	r0, [pc, #320]	; (34c0 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3380:	4950      	ldr	r1, [pc, #320]	; (34c4 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    3382:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3384:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3386:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3388:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    338a:	b136      	cbz	r6, 339a <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    338c:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3390:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3392:	bf1e      	ittt	ne
    3394:	601c      	strne	r4, [r3, #0]
    3396:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3398:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    339a:	3304      	adds	r3, #4
    339c:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    339e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33a2:	d1f1      	bne.n	3388 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33a4:	4b46      	ldr	r3, [pc, #280]	; (34c0 <nrfx_gpiote_irq_handler+0x148>)
    33a6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    33aa:	b1bb      	cbz	r3, 33dc <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    33ac:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    33b0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    33b4:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    33b6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    33ba:	af01      	add	r7, sp, #4
    33bc:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    33c0:	9c01      	ldr	r4, [sp, #4]
    33c2:	b98c      	cbnz	r4, 33e8 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33c4:	4b3e      	ldr	r3, [pc, #248]	; (34c0 <nrfx_gpiote_irq_handler+0x148>)
    33c6:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    33ca:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    33ce:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    33d2:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    33d4:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    33d8:	2b00      	cmp	r3, #0
    33da:	d1ee      	bne.n	33ba <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    33dc:	2401      	movs	r4, #1
    while (mask)
    33de:	2d00      	cmp	r5, #0
    33e0:	d153      	bne.n	348a <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    33e2:	b003      	add	sp, #12
    33e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    33e8:	fa94 f4a4 	rbit	r4, r4
    33ec:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    33f0:	4a35      	ldr	r2, [pc, #212]	; (34c8 <nrfx_gpiote_irq_handler+0x150>)
    33f2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    33f6:	08e0      	lsrs	r0, r4, #3
    33f8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    33fc:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    33fe:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3402:	fa08 f202 	lsl.w	r2, r8, r2
    3406:	ea23 0302 	bic.w	r3, r3, r2
    340a:	543b      	strb	r3, [r7, r0]
    340c:	00a3      	lsls	r3, r4, #2
    340e:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    3412:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3416:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    341a:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    341c:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    341e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3422:	d518      	bpl.n	3456 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    3424:	4659      	mov	r1, fp
    3426:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3428:	fa5f fa82 	uxtb.w	sl, r2
    342c:	f7ff fd2c 	bl	2e88 <call_handler>
    3430:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3434:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3438:	459a      	cmp	sl, r3
    343a:	d107      	bne.n	344c <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    343c:	2100      	movs	r1, #0
    343e:	4620      	mov	r0, r4
    3440:	f001 faec 	bl	4a1c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3444:	4651      	mov	r1, sl
    3446:	4620      	mov	r0, r4
    3448:	f001 fae8 	bl	4a1c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    344c:	fa08 f404 	lsl.w	r4, r8, r4
    3450:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    3454:	e7b4      	b.n	33c0 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3456:	2a02      	cmp	r2, #2
    3458:	d10c      	bne.n	3474 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    345a:	2103      	movs	r1, #3
    345c:	4620      	mov	r0, r4
    345e:	f001 fadd 	bl	4a1c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3462:	f00a 0305 	and.w	r3, sl, #5
    3466:	2b01      	cmp	r3, #1
    3468:	d1f0      	bne.n	344c <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    346a:	4659      	mov	r1, fp
    346c:	4620      	mov	r0, r4
    346e:	f7ff fd0b 	bl	2e88 <call_handler>
    3472:	e7eb      	b.n	344c <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3474:	2102      	movs	r1, #2
    3476:	4620      	mov	r0, r4
    3478:	f001 fad0 	bl	4a1c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    347c:	f1ba 0f03 	cmp.w	sl, #3
    3480:	d0f3      	beq.n	346a <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3482:	2a03      	cmp	r2, #3
    3484:	d1e2      	bne.n	344c <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3486:	458a      	cmp	sl, r1
    3488:	e7ee      	b.n	3468 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    348a:	fa95 f3a5 	rbit	r3, r5
    348e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3492:	fa04 f203 	lsl.w	r2, r4, r3
    3496:	009b      	lsls	r3, r3, #2
    3498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    349c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    34a0:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    34a4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    34a8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    34ac:	f3c0 2004 	ubfx	r0, r0, #8, #5
    34b0:	f3c1 4101 	ubfx	r1, r1, #16, #2
    34b4:	f7ff fce8 	bl	2e88 <call_handler>
    34b8:	e791      	b.n	33de <nrfx_gpiote_irq_handler+0x66>
    34ba:	bf00      	nop
    34bc:	40006100 	.word	0x40006100
    34c0:	40006000 	.word	0x40006000
    34c4:	40006120 	.word	0x40006120
    34c8:	20000028 	.word	0x20000028

000034cc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    34cc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    34ce:	4801      	ldr	r0, [pc, #4]	; (34d4 <nrfx_ppi_channel_alloc+0x8>)
    34d0:	f7ff bb90 	b.w	2bf4 <nrfx_flag32_alloc>
    34d4:	20000084 	.word	0x20000084

000034d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    34d8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    34da:	4c14      	ldr	r4, [pc, #80]	; (352c <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    34dc:	4a14      	ldr	r2, [pc, #80]	; (3530 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    34de:	4915      	ldr	r1, [pc, #84]	; (3534 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    34e0:	2303      	movs	r3, #3
    34e2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    34e4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    34e6:	4b14      	ldr	r3, [pc, #80]	; (3538 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    34e8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    34ea:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    34ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    34f0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    34f2:	2300      	movs	r3, #0
    34f4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    34f6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    34f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    34fa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    34fc:	4a0f      	ldr	r2, [pc, #60]	; (353c <_DoInit+0x64>)
    34fe:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    3500:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    3502:	2210      	movs	r2, #16
    3504:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    3506:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3508:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    350a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    350c:	f001 f82f 	bl	456e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3510:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3514:	490a      	ldr	r1, [pc, #40]	; (3540 <_DoInit+0x68>)
    3516:	4620      	mov	r0, r4
    3518:	f001 f829 	bl	456e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    351c:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3520:	2320      	movs	r3, #32
    3522:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3524:	f3bf 8f5f 	dmb	sy
}
    3528:	bd10      	pop	{r4, pc}
    352a:	bf00      	nop
    352c:	2000029c 	.word	0x2000029c
    3530:	00005696 	.word	0x00005696
    3534:	0000569f 	.word	0x0000569f
    3538:	2000038c 	.word	0x2000038c
    353c:	2000037c 	.word	0x2000037c
    3540:	000056a3 	.word	0x000056a3

00003544 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3546:	4605      	mov	r5, r0
    3548:	460e      	mov	r6, r1
	__asm__ volatile(
    354a:	f04f 0320 	mov.w	r3, #32
    354e:	f3ef 8711 	mrs	r7, BASEPRI
    3552:	f383 8812 	msr	BASEPRI_MAX, r3
    3556:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    355a:	f000 fcb7 	bl	3ecc <z_impl_z_current_get>
    355e:	2d04      	cmp	r5, #4
    3560:	bf96      	itet	ls
    3562:	4b18      	ldrls	r3, [pc, #96]	; (35c4 <z_fatal_error+0x80>)
    3564:	4b18      	ldrhi	r3, [pc, #96]	; (35c8 <z_fatal_error+0x84>)
    3566:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    356a:	2200      	movs	r2, #0
    356c:	4604      	mov	r4, r0
    356e:	9200      	str	r2, [sp, #0]
    3570:	4816      	ldr	r0, [pc, #88]	; (35cc <z_fatal_error+0x88>)
    3572:	462a      	mov	r2, r5
    3574:	2145      	movs	r1, #69	; 0x45
    3576:	f000 ffde 	bl	4536 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    357a:	b13e      	cbz	r6, 358c <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    357c:	69f3      	ldr	r3, [r6, #28]
    357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3582:	b11b      	cbz	r3, 358c <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
    3584:	4812      	ldr	r0, [pc, #72]	; (35d0 <z_fatal_error+0x8c>)
    3586:	2145      	movs	r1, #69	; 0x45
    3588:	f000 ffd5 	bl	4536 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    358c:	b134      	cbz	r4, 359c <z_fatal_error+0x58>
    358e:	4620      	mov	r0, r4
    3590:	f001 fa6f 	bl	4a72 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    3594:	4603      	mov	r3, r0
    3596:	b108      	cbz	r0, 359c <z_fatal_error+0x58>
    3598:	7802      	ldrb	r2, [r0, #0]
    359a:	b902      	cbnz	r2, 359e <z_fatal_error+0x5a>
		thread_name = "unknown";
    359c:	4b0d      	ldr	r3, [pc, #52]	; (35d4 <z_fatal_error+0x90>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    359e:	480e      	ldr	r0, [pc, #56]	; (35d8 <z_fatal_error+0x94>)
    35a0:	4622      	mov	r2, r4
    35a2:	2145      	movs	r1, #69	; 0x45
    35a4:	f000 ffc7 	bl	4536 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    35a8:	4631      	mov	r1, r6
    35aa:	4628      	mov	r0, r5
    35ac:	f7ff f9c0 	bl	2930 <k_sys_fatal_error_handler>
	__asm__ volatile(
    35b0:	f387 8811 	msr	BASEPRI, r7
    35b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    35b8:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    35ba:	b003      	add	sp, #12
    35bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    35c0:	f7fe ba08 	b.w	19d4 <z_impl_k_thread_abort>
    35c4:	00004f74 	.word	0x00004f74
    35c8:	000056aa 	.word	0x000056aa
    35cc:	000056c0 	.word	0x000056c0
    35d0:	000056ed 	.word	0x000056ed
    35d4:	000056b8 	.word	0x000056b8
    35d8:	00005713 	.word	0x00005713

000035dc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35dc:	4b10      	ldr	r3, [pc, #64]	; (3620 <z_sys_init_run_level+0x44>)
{
    35de:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35e0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    35e4:	3001      	adds	r0, #1
    35e6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    35ea:	42a6      	cmp	r6, r4
    35ec:	d800      	bhi.n	35f0 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    35ee:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    35f0:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    35f4:	b18d      	cbz	r5, 361a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    35f6:	4628      	mov	r0, r5
    35f8:	4798      	blx	r3
			if (rc != 0) {
    35fa:	b138      	cbz	r0, 360c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    35fc:	2800      	cmp	r0, #0
    35fe:	bfb8      	it	lt
    3600:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3602:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    3604:	28ff      	cmp	r0, #255	; 0xff
    3606:	bfa8      	it	ge
    3608:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    360a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    360c:	68ea      	ldr	r2, [r5, #12]
    360e:	7853      	ldrb	r3, [r2, #1]
    3610:	f043 0301 	orr.w	r3, r3, #1
    3614:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3616:	3408      	adds	r4, #8
    3618:	e7e7      	b.n	35ea <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    361a:	4798      	blx	r3
    361c:	e7fb      	b.n	3616 <z_sys_init_run_level+0x3a>
    361e:	bf00      	nop
    3620:	00004f88 	.word	0x00004f88

00003624 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3624:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3626:	4b0a      	ldr	r3, [pc, #40]	; (3650 <bg_thread_main+0x2c>)
    3628:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    362a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    362c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    362e:	f7ff ffd5 	bl	35dc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3632:	f000 fe0b 	bl	424c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3636:	2004      	movs	r0, #4
    3638:	f7ff ffd0 	bl	35dc <z_sys_init_run_level>

	z_init_static_threads();
    363c:	f000 f8f0 	bl	3820 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    3640:	f7fc fed2 	bl	3e8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3644:	4a03      	ldr	r2, [pc, #12]	; (3654 <bg_thread_main+0x30>)
    3646:	7b13      	ldrb	r3, [r2, #12]
    3648:	f023 0301 	bic.w	r3, r3, #1
    364c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    364e:	bd08      	pop	{r3, pc}
    3650:	2000078c 	.word	0x2000078c
    3654:	20000138 	.word	0x20000138

00003658 <z_bss_zero>:
{
    3658:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    365a:	4803      	ldr	r0, [pc, #12]	; (3668 <z_bss_zero+0x10>)
    365c:	4a03      	ldr	r2, [pc, #12]	; (366c <z_bss_zero+0x14>)
    365e:	2100      	movs	r1, #0
    3660:	1a12      	subs	r2, r2, r0
    3662:	f001 f9fc 	bl	4a5e <z_early_memset>
}
    3666:	bd08      	pop	{r3, pc}
    3668:	20000098 	.word	0x20000098
    366c:	20000790 	.word	0x20000790

00003670 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3670:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    3672:	2300      	movs	r3, #0
{
    3674:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3676:	2201      	movs	r2, #1
    3678:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    367c:	4e13      	ldr	r6, [pc, #76]	; (36cc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    367e:	4d14      	ldr	r5, [pc, #80]	; (36d0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3680:	9301      	str	r3, [sp, #4]
    3682:	220f      	movs	r2, #15
    3684:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3688:	4912      	ldr	r1, [pc, #72]	; (36d4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    368a:	2314      	movs	r3, #20
    368c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3690:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3694:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    3696:	f44f 70c0 	mov.w	r0, #384	; 0x180
    369a:	fb00 1104 	mla	r1, r0, r4, r1
    369e:	4b0e      	ldr	r3, [pc, #56]	; (36d8 <z_init_cpu+0x68>)
    36a0:	9500      	str	r5, [sp, #0]
    36a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
    36a6:	4630      	mov	r0, r6
    36a8:	f000 f888 	bl	37bc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    36ac:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    36ae:	4a0b      	ldr	r2, [pc, #44]	; (36dc <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    36b0:	60ee      	str	r6, [r5, #12]
    36b2:	f023 0304 	bic.w	r3, r3, #4
    36b6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    36b8:	f44f 6304 	mov.w	r3, #2112	; 0x840
    36bc:	fb04 3303 	mla	r3, r4, r3, r3
    36c0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    36c2:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    36c4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    36c6:	b006      	add	sp, #24
    36c8:	bd70      	pop	{r4, r5, r6, pc}
    36ca:	bf00      	nop
    36cc:	200000b8 	.word	0x200000b8
    36d0:	20000344 	.word	0x20000344
    36d4:	20001000 	.word	0x20001000
    36d8:	000038d9 	.word	0x000038d9
    36dc:	200007c0 	.word	0x200007c0

000036e0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    36e0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    36e2:	2000      	movs	r0, #0
{
    36e4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    36e6:	f7ff ff79 	bl	35dc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    36ea:	4b2d      	ldr	r3, [pc, #180]	; (37a0 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    36ec:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    36f0:	4d2c      	ldr	r5, [pc, #176]	; (37a4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    36f2:	4e2d      	ldr	r6, [pc, #180]	; (37a8 <z_cstart+0xc8>)
    36f4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    36f6:	4f2d      	ldr	r7, [pc, #180]	; (37ac <z_cstart+0xcc>)
    36f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    36fc:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36fe:	2400      	movs	r4, #0
    3700:	23e0      	movs	r3, #224	; 0xe0
    3702:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3706:	77ec      	strb	r4, [r5, #31]
    3708:	762c      	strb	r4, [r5, #24]
    370a:	766c      	strb	r4, [r5, #25]
    370c:	76ac      	strb	r4, [r5, #26]
    370e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3714:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3718:	626b      	str	r3, [r5, #36]	; 0x24
    371a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    371e:	f7fe f8cd 	bl	18bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3722:	f7fd fd55 	bl	11d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3726:	f04f 33ff 	mov.w	r3, #4294967295
    372a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    372c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    372e:	f7fe fa0b 	bl	1b48 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3732:	f7fe f965 	bl	1a00 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3736:	f240 1301 	movw	r3, #257	; 0x101
    373a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    373e:	ab06      	add	r3, sp, #24
    3740:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3742:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    3746:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3748:	f001 f97d 	bl	4a46 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    374c:	2001      	movs	r0, #1
    374e:	f7ff ff45 	bl	35dc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3752:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    3754:	4d16      	ldr	r5, [pc, #88]	; (37b0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3756:	f7ff ff41 	bl	35dc <z_sys_init_run_level>
	z_sched_init();
    375a:	f000 fb13 	bl	3d84 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    375e:	4b15      	ldr	r3, [pc, #84]	; (37b4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    3760:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3762:	9305      	str	r3, [sp, #20]
    3764:	2301      	movs	r3, #1
    3766:	4914      	ldr	r1, [pc, #80]	; (37b8 <z_cstart+0xd8>)
    3768:	9400      	str	r4, [sp, #0]
    376a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    376e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3772:	463b      	mov	r3, r7
    3774:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3778:	4628      	mov	r0, r5
    377a:	f000 f81f 	bl	37bc <z_setup_new_thread>
    377e:	7b6a      	ldrb	r2, [r5, #13]
    3780:	4606      	mov	r6, r0
    3782:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    3786:	4628      	mov	r0, r5
    3788:	736a      	strb	r2, [r5, #13]
    378a:	f001 f9b5 	bl	4af8 <z_ready_thread>
	z_init_cpu(0);
    378e:	4620      	mov	r0, r4
    3790:	f7ff ff6e 	bl	3670 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3794:	463a      	mov	r2, r7
    3796:	4631      	mov	r1, r6
    3798:	4628      	mov	r0, r5
    379a:	f7fd fe41 	bl	1420 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    379e:	bf00      	nop
    37a0:	20001000 	.word	0x20001000
    37a4:	e000ed00 	.word	0xe000ed00
    37a8:	20000344 	.word	0x20000344
    37ac:	00003625 	.word	0x00003625
    37b0:	20000138 	.word	0x20000138
    37b4:	0000577a 	.word	0x0000577a
    37b8:	20001180 	.word	0x20001180

000037bc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    37bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    37c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    37c2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    37c4:	2604      	movs	r6, #4
    37c6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    37c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    37ca:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    37cc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    37d0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37d2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    37d4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    37da:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37dc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    37e0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    37e2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    37e6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    37ea:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    37ec:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    37ee:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37f0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37f4:	9202      	str	r2, [sp, #8]
    37f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    37f8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    37fa:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    37fe:	9200      	str	r2, [sp, #0]
    3800:	4642      	mov	r2, r8
{
    3802:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3804:	f7fd fdda 	bl	13bc <arch_new_thread>
	if (!_current) {
    3808:	4b04      	ldr	r3, [pc, #16]	; (381c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    380a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    380c:	689b      	ldr	r3, [r3, #8]
    380e:	b103      	cbz	r3, 3812 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3812:	6723      	str	r3, [r4, #112]	; 0x70
}
    3814:	4640      	mov	r0, r8
    3816:	b004      	add	sp, #16
    3818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    381c:	20000344 	.word	0x20000344

00003820 <z_init_static_threads>:
{
    3820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3824:	4c29      	ldr	r4, [pc, #164]	; (38cc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3826:	4d2a      	ldr	r5, [pc, #168]	; (38d0 <z_init_static_threads+0xb0>)
{
    3828:	b087      	sub	sp, #28
    382a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    382c:	42ae      	cmp	r6, r5
    382e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    3832:	d30f      	bcc.n	3854 <z_init_static_threads+0x34>
	k_sched_lock();
    3834:	f000 fa76 	bl	3d24 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3838:	4c24      	ldr	r4, [pc, #144]	; (38cc <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    383a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 38d4 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    383e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3842:	f240 37e7 	movw	r7, #999	; 0x3e7
    3846:	42ac      	cmp	r4, r5
    3848:	d320      	bcc.n	388c <z_init_static_threads+0x6c>
}
    384a:	b007      	add	sp, #28
    384c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3850:	f000 ba7c 	b.w	3d4c <k_sched_unlock>
		z_setup_new_thread(
    3854:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3858:	9305      	str	r3, [sp, #20]
    385a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    385e:	9304      	str	r3, [sp, #16]
    3860:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3864:	9303      	str	r3, [sp, #12]
    3866:	f854 3c14 	ldr.w	r3, [r4, #-20]
    386a:	9302      	str	r3, [sp, #8]
    386c:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3870:	9301      	str	r3, [sp, #4]
    3872:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3876:	9300      	str	r3, [sp, #0]
    3878:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    387c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    3880:	f7ff ff9c 	bl	37bc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3884:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3888:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    388a:	e7ce      	b.n	382a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    388c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    388e:	1c5a      	adds	r2, r3, #1
    3890:	d00d      	beq.n	38ae <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3892:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3896:	2100      	movs	r1, #0
    3898:	4638      	mov	r0, r7
    389a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    389e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    38a2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    38a6:	d104      	bne.n	38b2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    38a8:	4640      	mov	r0, r8
    38aa:	f000 f9eb 	bl	3c84 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    38ae:	342c      	adds	r4, #44	; 0x2c
    38b0:	e7c9      	b.n	3846 <z_init_static_threads+0x26>
    38b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    38b6:	2300      	movs	r3, #0
    38b8:	f7fc fc10 	bl	dc <__aeabi_uldivmod>
    38bc:	4602      	mov	r2, r0
    38be:	460b      	mov	r3, r1
    38c0:	f108 0018 	add.w	r0, r8, #24
    38c4:	4649      	mov	r1, r9
    38c6:	f000 fbc7 	bl	4058 <z_add_timeout>
    38ca:	e7f0      	b.n	38ae <z_init_static_threads+0x8e>
    38cc:	00004de8 	.word	0x00004de8
    38d0:	00004de8 	.word	0x00004de8
    38d4:	00004b5d 	.word	0x00004b5d

000038d8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    38d8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    38da:	4c0b      	ldr	r4, [pc, #44]	; (3908 <idle+0x30>)
	return !z_sys_post_kernel;
    38dc:	4d0b      	ldr	r5, [pc, #44]	; (390c <idle+0x34>)
	__asm__ volatile(
    38de:	f04f 0220 	mov.w	r2, #32
    38e2:	f3ef 8311 	mrs	r3, BASEPRI
    38e6:	f382 8812 	msr	BASEPRI_MAX, r2
    38ea:	f3bf 8f6f 	isb	sy
    38ee:	f001 f981 	bl	4bf4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    38f2:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    38f4:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    38f6:	b913      	cbnz	r3, 38fe <idle+0x26>
	arch_cpu_idle();
    38f8:	f7fd fc70 	bl	11dc <arch_cpu_idle>
}
    38fc:	e7ef      	b.n	38de <idle+0x6>
    38fe:	f7fd fb99 	bl	1034 <pm_system_suspend>
    3902:	2800      	cmp	r0, #0
    3904:	d1eb      	bne.n	38de <idle+0x6>
    3906:	e7f7      	b.n	38f8 <idle+0x20>
    3908:	20000344 	.word	0x20000344
    390c:	2000078c 	.word	0x2000078c

00003910 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3910:	b538      	push	{r3, r4, r5, lr}
    3912:	4604      	mov	r4, r0
    3914:	f04f 0320 	mov.w	r3, #32
    3918:	f3ef 8511 	mrs	r5, BASEPRI
    391c:	f383 8812 	msr	BASEPRI_MAX, r3
    3920:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3924:	f001 f91e 	bl	4b64 <z_unpend_first_thread>

	if (thread != NULL) {
    3928:	b148      	cbz	r0, 393e <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    392a:	2200      	movs	r2, #0
    392c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    392e:	f001 f8e3 	bl	4af8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3932:	4629      	mov	r1, r5
    3934:	4805      	ldr	r0, [pc, #20]	; (394c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    393a:	f000 b991 	b.w	3c60 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    393e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3942:	429a      	cmp	r2, r3
    3944:	bf18      	it	ne
    3946:	3301      	addne	r3, #1
    3948:	60a3      	str	r3, [r4, #8]
}
    394a:	e7f2      	b.n	3932 <z_impl_k_sem_give+0x22>
    394c:	2000078d 	.word	0x2000078d

00003950 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3950:	b513      	push	{r0, r1, r4, lr}
    3952:	f04f 0420 	mov.w	r4, #32
    3956:	f3ef 8111 	mrs	r1, BASEPRI
    395a:	f384 8812 	msr	BASEPRI_MAX, r4
    395e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3962:	6884      	ldr	r4, [r0, #8]
    3964:	b144      	cbz	r4, 3978 <z_impl_k_sem_take+0x28>
		sem->count--;
    3966:	3c01      	subs	r4, #1
    3968:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    396a:	f381 8811 	msr	BASEPRI, r1
    396e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3972:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3974:	b002      	add	sp, #8
    3976:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3978:	ea52 0403 	orrs.w	r4, r2, r3
    397c:	d106      	bne.n	398c <z_impl_k_sem_take+0x3c>
    397e:	f381 8811 	msr	BASEPRI, r1
    3982:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3986:	f06f 000f 	mvn.w	r0, #15
    398a:	e7f3      	b.n	3974 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    398c:	e9cd 2300 	strd	r2, r3, [sp]
    3990:	4602      	mov	r2, r0
    3992:	4802      	ldr	r0, [pc, #8]	; (399c <z_impl_k_sem_take+0x4c>)
    3994:	f000 f946 	bl	3c24 <z_pend_curr>
	return ret;
    3998:	e7ec      	b.n	3974 <z_impl_k_sem_take+0x24>
    399a:	bf00      	nop
    399c:	2000078d 	.word	0x2000078d

000039a0 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    39a0:	89c3      	ldrh	r3, [r0, #14]
    39a2:	2b7f      	cmp	r3, #127	; 0x7f
    39a4:	d812      	bhi.n	39cc <sliceable+0x2c>
	int ret = slice_ticks;
    39a6:	4b0a      	ldr	r3, [pc, #40]	; (39d0 <sliceable+0x30>)
    39a8:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    39aa:	b163      	cbz	r3, 39c6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    39ac:	4b09      	ldr	r3, [pc, #36]	; (39d4 <sliceable+0x34>)
    39ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
    39b2:	681b      	ldr	r3, [r3, #0]
    39b4:	429a      	cmp	r2, r3
    39b6:	db09      	blt.n	39cc <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    39b8:	7b43      	ldrb	r3, [r0, #13]
    39ba:	06db      	lsls	r3, r3, #27
    39bc:	d106      	bne.n	39cc <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    39be:	4b06      	ldr	r3, [pc, #24]	; (39d8 <sliceable+0x38>)
    39c0:	1ac3      	subs	r3, r0, r3
    39c2:	bf18      	it	ne
    39c4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    39c6:	f003 0001 	and.w	r0, r3, #1
    39ca:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    39cc:	2300      	movs	r3, #0
    39ce:	e7fa      	b.n	39c6 <sliceable+0x26>
    39d0:	20000370 	.word	0x20000370
    39d4:	2000036c 	.word	0x2000036c
    39d8:	200000b8 	.word	0x200000b8

000039dc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    39dc:	4b04      	ldr	r3, [pc, #16]	; (39f0 <slice_timeout+0x14>)
    39de:	1ac0      	subs	r0, r0, r3
    39e0:	4b04      	ldr	r3, [pc, #16]	; (39f4 <slice_timeout+0x18>)
    39e2:	10c0      	asrs	r0, r0, #3
    39e4:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    39e6:	4b04      	ldr	r3, [pc, #16]	; (39f8 <slice_timeout+0x1c>)
    39e8:	2201      	movs	r2, #1
    39ea:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop
    39f0:	200001b8 	.word	0x200001b8
    39f4:	aaaaaaab 	.word	0xaaaaaaab
    39f8:	2000078d 	.word	0x2000078d

000039fc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    39fc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    39fe:	4b0e      	ldr	r3, [pc, #56]	; (3a38 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    3a00:	4c0e      	ldr	r4, [pc, #56]	; (3a3c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    3a02:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    3a04:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    3a08:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    3a0c:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    3a0e:	4620      	mov	r0, r4
    3a10:	f001 f8da 	bl	4bc8 <z_abort_timeout>
	slice_expired[cpu] = false;
    3a14:	4b0a      	ldr	r3, [pc, #40]	; (3a40 <z_reset_time_slice+0x44>)
    3a16:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    3a18:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    3a1a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    3a1c:	f7ff ffc0 	bl	39a0 <sliceable>
    3a20:	b148      	cbz	r0, 3a36 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    3a22:	4b08      	ldr	r3, [pc, #32]	; (3a44 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3a24:	4908      	ldr	r1, [pc, #32]	; (3a48 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    3a26:	681a      	ldr	r2, [r3, #0]
    3a28:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3a2a:	4620      	mov	r0, r4
    3a2c:	17d3      	asrs	r3, r2, #31
	}
}
    3a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3a32:	f000 bb11 	b.w	4058 <z_add_timeout>
}
    3a36:	bd70      	pop	{r4, r5, r6, pc}
    3a38:	20000344 	.word	0x20000344
    3a3c:	200001b8 	.word	0x200001b8
    3a40:	2000078d 	.word	0x2000078d
    3a44:	20000370 	.word	0x20000370
    3a48:	000039dd 	.word	0x000039dd

00003a4c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3a4c:	b538      	push	{r3, r4, r5, lr}
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3a4e:	4d0d      	ldr	r5, [pc, #52]	; (3a84 <update_cache+0x38>)
    3a50:	462b      	mov	r3, r5
    3a52:	f853 4f1c 	ldr.w	r4, [r3, #28]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a56:	429c      	cmp	r4, r3
    3a58:	d000      	beq.n	3a5c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3a5a:	b904      	cbnz	r4, 3a5e <update_cache+0x12>
    3a5c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3a5e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3a60:	b938      	cbnz	r0, 3a72 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    3a62:	7b5a      	ldrb	r2, [r3, #13]
    3a64:	06d2      	lsls	r2, r2, #27
    3a66:	d104      	bne.n	3a72 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3a68:	69a2      	ldr	r2, [r4, #24]
    3a6a:	b912      	cbnz	r2, 3a72 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3a6c:	89da      	ldrh	r2, [r3, #14]
    3a6e:	2a7f      	cmp	r2, #127	; 0x7f
    3a70:	d805      	bhi.n	3a7e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3a72:	429c      	cmp	r4, r3
    3a74:	d002      	beq.n	3a7c <update_cache+0x30>
			z_reset_time_slice(thread);
    3a76:	4620      	mov	r0, r4
    3a78:	f7ff ffc0 	bl	39fc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3a7c:	4623      	mov	r3, r4
    3a7e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3a80:	bd38      	pop	{r3, r4, r5, pc}
    3a82:	bf00      	nop
    3a84:	20000344 	.word	0x20000344

00003a88 <move_thread_to_end_of_prio_q>:
{
    3a88:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3a8a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3a8e:	7b43      	ldrb	r3, [r0, #13]
    3a90:	2a00      	cmp	r2, #0
{
    3a92:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3a94:	da04      	bge.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3a9a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3a9c:	f000 fff2 	bl	4a84 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3aa0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    3aa2:	4a15      	ldr	r2, [pc, #84]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3aa8:	4610      	mov	r0, r2
    3aaa:	734b      	strb	r3, [r1, #13]
    3aac:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3ab0:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ab2:	4283      	cmp	r3, r0
    3ab4:	bf08      	it	eq
    3ab6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ab8:	b923      	cbnz	r3, 3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3aba:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3abe:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3ac0:	6211      	str	r1, [r2, #32]
}
    3ac2:	e00c      	b.n	3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
	int32_t b1 = thread_1->base.prio;
    3ac4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3ac8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3acc:	42b5      	cmp	r5, r6
    3ace:	d00e      	beq.n	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3ad0:	42ae      	cmp	r6, r5
    3ad2:	dd0c      	ble.n	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3ad4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3ad6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3ada:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3adc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3ade:	6890      	ldr	r0, [r2, #8]
    3ae0:	1a43      	subs	r3, r0, r1
    3ae2:	4258      	negs	r0, r3
}
    3ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3ae8:	4158      	adcs	r0, r3
    3aea:	f7ff bfaf 	b.w	3a4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3aee:	429c      	cmp	r4, r3
    3af0:	d0e3      	beq.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3af2:	681b      	ldr	r3, [r3, #0]
    3af4:	e7e0      	b.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3af6:	bf00      	nop
    3af8:	20000344 	.word	0x20000344

00003afc <ready_thread>:
{
    3afc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3afe:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3b02:	7b42      	ldrb	r2, [r0, #13]
    3b04:	2b00      	cmp	r3, #0
    3b06:	db29      	blt.n	3b5c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3b08:	06d3      	lsls	r3, r2, #27
    3b0a:	d127      	bne.n	3b5c <ready_thread+0x60>
	return node->next != NULL;
    3b0c:	6983      	ldr	r3, [r0, #24]
    3b0e:	bb2b      	cbnz	r3, 3b5c <ready_thread+0x60>
	return list->head == list;
    3b10:	4913      	ldr	r1, [pc, #76]	; (3b60 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3b16:	7342      	strb	r2, [r0, #13]
    3b18:	460a      	mov	r2, r1
    3b1a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b1e:	4294      	cmp	r4, r2
    3b20:	bf18      	it	ne
    3b22:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3b24:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3b26:	b923      	cbnz	r3, 3b32 <ready_thread+0x36>
	node->prev = tail;
    3b28:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3b2c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3b2e:	6208      	str	r0, [r1, #32]
}
    3b30:	e00c      	b.n	3b4c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    3b32:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3b36:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3b3a:	42b5      	cmp	r5, r6
    3b3c:	d00a      	beq.n	3b54 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3b3e:	42ae      	cmp	r6, r5
    3b40:	dd08      	ble.n	3b54 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    3b42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3b44:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3b48:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3b4a:	6058      	str	r0, [r3, #4]
}
    3b4c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3b4e:	2000      	movs	r0, #0
    3b50:	f7ff bf7c 	b.w	3a4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3b54:	42a3      	cmp	r3, r4
    3b56:	d0e7      	beq.n	3b28 <ready_thread+0x2c>
    3b58:	681b      	ldr	r3, [r3, #0]
    3b5a:	e7e4      	b.n	3b26 <ready_thread+0x2a>
}
    3b5c:	bc70      	pop	{r4, r5, r6}
    3b5e:	4770      	bx	lr
    3b60:	20000344 	.word	0x20000344

00003b64 <unready_thread>:
{
    3b64:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3b66:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3b6a:	7b43      	ldrb	r3, [r0, #13]
    3b6c:	2a00      	cmp	r2, #0
{
    3b6e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3b70:	da04      	bge.n	3b7c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3b76:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3b78:	f000 ff84 	bl	4a84 <sys_dlist_remove>
	update_cache(thread == _current);
    3b7c:	4b04      	ldr	r3, [pc, #16]	; (3b90 <unready_thread+0x2c>)
    3b7e:	6898      	ldr	r0, [r3, #8]
    3b80:	1a43      	subs	r3, r0, r1
    3b82:	4258      	negs	r0, r3
    3b84:	4158      	adcs	r0, r3
}
    3b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3b8a:	f7ff bf5f 	b.w	3a4c <update_cache>
    3b8e:	bf00      	nop
    3b90:	20000344 	.word	0x20000344

00003b94 <pend_locked>:
{
    3b94:	b570      	push	{r4, r5, r6, lr}
    3b96:	4615      	mov	r5, r2
    3b98:	461c      	mov	r4, r3
    3b9a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    3b9c:	f000 ff84 	bl	4aa8 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ba0:	f1b4 3fff 	cmp.w	r4, #4294967295
    3ba4:	bf08      	it	eq
    3ba6:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    3baa:	d008      	beq.n	3bbe <pend_locked+0x2a>
    3bac:	462a      	mov	r2, r5
    3bae:	4623      	mov	r3, r4
    3bb0:	f106 0018 	add.w	r0, r6, #24
    3bb4:	4902      	ldr	r1, [pc, #8]	; (3bc0 <pend_locked+0x2c>)
}
    3bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3bba:	f000 ba4d 	b.w	4058 <z_add_timeout>
    3bbe:	bd70      	pop	{r4, r5, r6, pc}
    3bc0:	00004b5d 	.word	0x00004b5d

00003bc4 <z_time_slice>:
{
    3bc4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3bc6:	f04f 0320 	mov.w	r3, #32
    3bca:	f3ef 8511 	mrs	r5, BASEPRI
    3bce:	f383 8812 	msr	BASEPRI_MAX, r3
    3bd2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    3bd6:	4b10      	ldr	r3, [pc, #64]	; (3c18 <z_time_slice+0x54>)
	if (pending_current == curr) {
    3bd8:	4a10      	ldr	r2, [pc, #64]	; (3c1c <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    3bda:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    3bdc:	6810      	ldr	r0, [r2, #0]
    3bde:	42a0      	cmp	r0, r4
    3be0:	d106      	bne.n	3bf0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    3be2:	f7ff ff0b 	bl	39fc <z_reset_time_slice>
	__asm__ volatile(
    3be6:	f385 8811 	msr	BASEPRI, r5
    3bea:	f3bf 8f6f 	isb	sy
}
    3bee:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3bf0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3bf2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    3bf4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3bf6:	4a0a      	ldr	r2, [pc, #40]	; (3c20 <z_time_slice+0x5c>)
    3bf8:	5cd3      	ldrb	r3, [r2, r3]
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d0f3      	beq.n	3be6 <z_time_slice+0x22>
    3bfe:	4620      	mov	r0, r4
    3c00:	f7ff fece 	bl	39a0 <sliceable>
    3c04:	2800      	cmp	r0, #0
    3c06:	d0ee      	beq.n	3be6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    3c08:	7b63      	ldrb	r3, [r4, #13]
    3c0a:	06db      	lsls	r3, r3, #27
    3c0c:	d102      	bne.n	3c14 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    3c0e:	4620      	mov	r0, r4
    3c10:	f7ff ff3a 	bl	3a88 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    3c14:	4620      	mov	r0, r4
    3c16:	e7e4      	b.n	3be2 <z_time_slice+0x1e>
    3c18:	20000344 	.word	0x20000344
    3c1c:	20000368 	.word	0x20000368
    3c20:	2000078d 	.word	0x2000078d

00003c24 <z_pend_curr>:
{
    3c24:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    3c26:	480c      	ldr	r0, [pc, #48]	; (3c58 <z_pend_curr+0x34>)
    3c28:	4d0c      	ldr	r5, [pc, #48]	; (3c5c <z_pend_curr+0x38>)
    3c2a:	6886      	ldr	r6, [r0, #8]
    3c2c:	602e      	str	r6, [r5, #0]
{
    3c2e:	460c      	mov	r4, r1
    3c30:	4611      	mov	r1, r2
    3c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    3c36:	f04f 0620 	mov.w	r6, #32
    3c3a:	f3ef 8511 	mrs	r5, BASEPRI
    3c3e:	f386 8812 	msr	BASEPRI_MAX, r6
    3c42:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    3c46:	6880      	ldr	r0, [r0, #8]
    3c48:	f7ff ffa4 	bl	3b94 <pend_locked>
	ret = arch_swap(key);
    3c4c:	4620      	mov	r0, r4
}
    3c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3c52:	f7fd bb5f 	b.w	1314 <arch_swap>
    3c56:	bf00      	nop
    3c58:	20000344 	.word	0x20000344
    3c5c:	20000368 	.word	0x20000368

00003c60 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3c60:	b949      	cbnz	r1, 3c76 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3c62:	f3ef 8005 	mrs	r0, IPSR
    3c66:	b930      	cbnz	r0, 3c76 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3c68:	4b05      	ldr	r3, [pc, #20]	; (3c80 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3c6a:	699a      	ldr	r2, [r3, #24]
    3c6c:	689b      	ldr	r3, [r3, #8]
    3c6e:	429a      	cmp	r2, r3
    3c70:	d001      	beq.n	3c76 <z_reschedule+0x16>
    3c72:	f7fd bb4f 	b.w	1314 <arch_swap>
	__asm__ volatile(
    3c76:	f381 8811 	msr	BASEPRI, r1
    3c7a:	f3bf 8f6f 	isb	sy
}
    3c7e:	4770      	bx	lr
    3c80:	20000344 	.word	0x20000344

00003c84 <z_sched_start>:
{
    3c84:	b510      	push	{r4, lr}
	__asm__ volatile(
    3c86:	f04f 0220 	mov.w	r2, #32
    3c8a:	f3ef 8411 	mrs	r4, BASEPRI
    3c8e:	f382 8812 	msr	BASEPRI_MAX, r2
    3c92:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3c96:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3c98:	0751      	lsls	r1, r2, #29
    3c9a:	d404      	bmi.n	3ca6 <z_sched_start+0x22>
	__asm__ volatile(
    3c9c:	f384 8811 	msr	BASEPRI, r4
    3ca0:	f3bf 8f6f 	isb	sy
}
    3ca4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3ca6:	f022 0204 	bic.w	r2, r2, #4
    3caa:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3cac:	f7ff ff26 	bl	3afc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3cb0:	4621      	mov	r1, r4
    3cb2:	4802      	ldr	r0, [pc, #8]	; (3cbc <z_sched_start+0x38>)
}
    3cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3cb8:	f7ff bfd2 	b.w	3c60 <z_reschedule>
    3cbc:	2000078e 	.word	0x2000078e

00003cc0 <z_impl_k_thread_suspend>:
{
    3cc0:	b570      	push	{r4, r5, r6, lr}
    3cc2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3cc4:	3018      	adds	r0, #24
    3cc6:	f000 ff7f 	bl	4bc8 <z_abort_timeout>
	__asm__ volatile(
    3cca:	f04f 0320 	mov.w	r3, #32
    3cce:	f3ef 8611 	mrs	r6, BASEPRI
    3cd2:	f383 8812 	msr	BASEPRI_MAX, r3
    3cd6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3cda:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3cde:	7b63      	ldrb	r3, [r4, #13]
    3ce0:	2a00      	cmp	r2, #0
    3ce2:	da05      	bge.n	3cf0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ce8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3cea:	4620      	mov	r0, r4
    3cec:	f000 feca 	bl	4a84 <sys_dlist_remove>
		update_cache(thread == _current);
    3cf0:	4d0b      	ldr	r5, [pc, #44]	; (3d20 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3cf2:	7b63      	ldrb	r3, [r4, #13]
    3cf4:	68a8      	ldr	r0, [r5, #8]
    3cf6:	f043 0310 	orr.w	r3, r3, #16
    3cfa:	7363      	strb	r3, [r4, #13]
    3cfc:	1b03      	subs	r3, r0, r4
    3cfe:	4258      	negs	r0, r3
    3d00:	4158      	adcs	r0, r3
    3d02:	f7ff fea3 	bl	3a4c <update_cache>
	__asm__ volatile(
    3d06:	f386 8811 	msr	BASEPRI, r6
    3d0a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3d0e:	68ab      	ldr	r3, [r5, #8]
    3d10:	42a3      	cmp	r3, r4
    3d12:	d103      	bne.n	3d1c <z_impl_k_thread_suspend+0x5c>
}
    3d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3d18:	f000 bf4c 	b.w	4bb4 <z_reschedule_unlocked>
}
    3d1c:	bd70      	pop	{r4, r5, r6, pc}
    3d1e:	bf00      	nop
    3d20:	20000344 	.word	0x20000344

00003d24 <k_sched_lock>:
	__asm__ volatile(
    3d24:	f04f 0320 	mov.w	r3, #32
    3d28:	f3ef 8111 	mrs	r1, BASEPRI
    3d2c:	f383 8812 	msr	BASEPRI_MAX, r3
    3d30:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3d34:	4b04      	ldr	r3, [pc, #16]	; (3d48 <k_sched_lock+0x24>)
    3d36:	689a      	ldr	r2, [r3, #8]
    3d38:	7bd3      	ldrb	r3, [r2, #15]
    3d3a:	3b01      	subs	r3, #1
    3d3c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3d3e:	f381 8811 	msr	BASEPRI, r1
    3d42:	f3bf 8f6f 	isb	sy
}
    3d46:	4770      	bx	lr
    3d48:	20000344 	.word	0x20000344

00003d4c <k_sched_unlock>:
{
    3d4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d4e:	f04f 0320 	mov.w	r3, #32
    3d52:	f3ef 8411 	mrs	r4, BASEPRI
    3d56:	f383 8812 	msr	BASEPRI_MAX, r3
    3d5a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3d5e:	4b08      	ldr	r3, [pc, #32]	; (3d80 <k_sched_unlock+0x34>)
    3d60:	689a      	ldr	r2, [r3, #8]
    3d62:	7bd3      	ldrb	r3, [r2, #15]
    3d64:	3301      	adds	r3, #1
    3d66:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3d68:	2000      	movs	r0, #0
    3d6a:	f7ff fe6f 	bl	3a4c <update_cache>
	__asm__ volatile(
    3d6e:	f384 8811 	msr	BASEPRI, r4
    3d72:	f3bf 8f6f 	isb	sy
}
    3d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3d7a:	f000 bf1b 	b.w	4bb4 <z_reschedule_unlocked>
    3d7e:	bf00      	nop
    3d80:	20000344 	.word	0x20000344

00003d84 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3d84:	4b02      	ldr	r3, [pc, #8]	; (3d90 <z_sched_init+0xc>)
    3d86:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    3d8a:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    3d8e:	4770      	bx	lr
    3d90:	20000344 	.word	0x20000344

00003d94 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    3d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3d96:	f04f 0320 	mov.w	r3, #32
    3d9a:	f3ef 8511 	mrs	r5, BASEPRI
    3d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    3da2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3da6:	4919      	ldr	r1, [pc, #100]	; (3e0c <z_impl_k_yield+0x78>)
    3da8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3daa:	7b43      	ldrb	r3, [r0, #13]
    3dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3db0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3db2:	f000 fe67 	bl	4a84 <sys_dlist_remove>
	}
	queue_thread(_current);
    3db6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3db8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3dba:	4608      	mov	r0, r1
    3dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3dc0:	735a      	strb	r2, [r3, #13]
    3dc2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    3dc6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3dc8:	4282      	cmp	r2, r0
    3dca:	bf08      	it	eq
    3dcc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3dce:	b922      	cbnz	r2, 3dda <z_impl_k_yield+0x46>
	node->prev = tail;
    3dd0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    3dd4:	6023      	str	r3, [r4, #0]
	list->tail = node;
    3dd6:	620b      	str	r3, [r1, #32]
}
    3dd8:	e00c      	b.n	3df4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    3dda:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3dde:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    3de2:	42be      	cmp	r6, r7
    3de4:	d00e      	beq.n	3e04 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3de6:	42b7      	cmp	r7, r6
    3de8:	dd0c      	ble.n	3e04 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    3dea:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3dec:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3df0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3df2:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3df4:	2001      	movs	r0, #1
    3df6:	f7ff fe29 	bl	3a4c <update_cache>
    3dfa:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3dfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3e00:	f7fd ba88 	b.w	1314 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3e04:	42a2      	cmp	r2, r4
    3e06:	d0e3      	beq.n	3dd0 <z_impl_k_yield+0x3c>
    3e08:	6812      	ldr	r2, [r2, #0]
    3e0a:	e7e0      	b.n	3dce <z_impl_k_yield+0x3a>
    3e0c:	20000344 	.word	0x20000344

00003e10 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3e10:	ea50 0301 	orrs.w	r3, r0, r1
{
    3e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e18:	4605      	mov	r5, r0
    3e1a:	460e      	mov	r6, r1
	if (ticks == 0) {
    3e1c:	d103      	bne.n	3e26 <z_tick_sleep+0x16>
	z_impl_k_yield();
    3e1e:	f7ff ffb9 	bl	3d94 <z_impl_k_yield>
		k_yield();
		return 0;
    3e22:	2000      	movs	r0, #0
    3e24:	e02c      	b.n	3e80 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    3e26:	1c83      	adds	r3, r0, #2
    3e28:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    3e2c:	db2a      	blt.n	3e84 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3e2e:	f000 fef1 	bl	4c14 <sys_clock_tick_get_32>
    3e32:	182c      	adds	r4, r5, r0
    3e34:	f04f 0320 	mov.w	r3, #32
    3e38:	f3ef 8811 	mrs	r8, BASEPRI
    3e3c:	f383 8812 	msr	BASEPRI_MAX, r3
    3e40:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3e44:	4f11      	ldr	r7, [pc, #68]	; (3e8c <z_tick_sleep+0x7c>)
    3e46:	4b12      	ldr	r3, [pc, #72]	; (3e90 <z_tick_sleep+0x80>)
    3e48:	68b8      	ldr	r0, [r7, #8]
    3e4a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3e4c:	f7ff fe8a 	bl	3b64 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3e50:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3e52:	4910      	ldr	r1, [pc, #64]	; (3e94 <z_tick_sleep+0x84>)
    3e54:	462a      	mov	r2, r5
    3e56:	4633      	mov	r3, r6
    3e58:	3018      	adds	r0, #24
    3e5a:	f000 f8fd 	bl	4058 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3e5e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3e60:	7b53      	ldrb	r3, [r2, #13]
    3e62:	f043 0310 	orr.w	r3, r3, #16
    3e66:	7353      	strb	r3, [r2, #13]
    3e68:	4640      	mov	r0, r8
    3e6a:	f7fd fa53 	bl	1314 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3e6e:	f000 fed1 	bl	4c14 <sys_clock_tick_get_32>
    3e72:	1a20      	subs	r0, r4, r0
    3e74:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3e78:	2801      	cmp	r0, #1
    3e7a:	f173 0300 	sbcs.w	r3, r3, #0
    3e7e:	dbd0      	blt.n	3e22 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    3e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3e84:	f06f 0401 	mvn.w	r4, #1
    3e88:	1a24      	subs	r4, r4, r0
    3e8a:	e7d3      	b.n	3e34 <z_tick_sleep+0x24>
    3e8c:	20000344 	.word	0x20000344
    3e90:	20000368 	.word	0x20000368
    3e94:	00004b5d 	.word	0x00004b5d

00003e98 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3e98:	f1b1 3fff 	cmp.w	r1, #4294967295
    3e9c:	bf08      	it	eq
    3e9e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    3ea2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ea4:	d106      	bne.n	3eb4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3ea6:	4b08      	ldr	r3, [pc, #32]	; (3ec8 <z_impl_k_sleep+0x30>)
    3ea8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3eaa:	f7ff ff09 	bl	3cc0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3eae:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3eb2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3eb4:	f7ff ffac 	bl	3e10 <z_tick_sleep>
    3eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3ebc:	fb80 0303 	smull	r0, r3, r0, r3
    3ec0:	0bc0      	lsrs	r0, r0, #15
    3ec2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    3ec6:	e7f4      	b.n	3eb2 <z_impl_k_sleep+0x1a>
    3ec8:	20000344 	.word	0x20000344

00003ecc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3ecc:	4b01      	ldr	r3, [pc, #4]	; (3ed4 <z_impl_z_current_get+0x8>)
    3ece:	6898      	ldr	r0, [r3, #8]
    3ed0:	4770      	bx	lr
    3ed2:	bf00      	nop
    3ed4:	20000344 	.word	0x20000344

00003ed8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3edc:	4604      	mov	r4, r0
    3ede:	f04f 0320 	mov.w	r3, #32
    3ee2:	f3ef 8611 	mrs	r6, BASEPRI
    3ee6:	f383 8812 	msr	BASEPRI_MAX, r3
    3eea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3eee:	7b03      	ldrb	r3, [r0, #12]
    3ef0:	07d9      	lsls	r1, r3, #31
    3ef2:	d50b      	bpl.n	3f0c <z_thread_abort+0x34>
	__asm__ volatile(
    3ef4:	f386 8811 	msr	BASEPRI, r6
    3ef8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    3efc:	4040      	eors	r0, r0
    3efe:	f380 8811 	msr	BASEPRI, r0
    3f02:	f04f 0004 	mov.w	r0, #4
    3f06:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3f0c:	7b43      	ldrb	r3, [r0, #13]
    3f0e:	071a      	lsls	r2, r3, #28
    3f10:	d504      	bpl.n	3f1c <z_thread_abort+0x44>
    3f12:	f386 8811 	msr	BASEPRI, r6
    3f16:	f3bf 8f6f 	isb	sy
    3f1a:	e7f5      	b.n	3f08 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3f1c:	f023 0220 	bic.w	r2, r3, #32
    3f20:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3f24:	09d2      	lsrs	r2, r2, #7
    3f26:	d120      	bne.n	3f6a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3f28:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3f2a:	68a3      	ldr	r3, [r4, #8]
    3f2c:	b113      	cbz	r3, 3f34 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    3f2e:	4620      	mov	r0, r4
    3f30:	f000 fdb0 	bl	4a94 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3f34:	f104 0018 	add.w	r0, r4, #24
    3f38:	f000 fe46 	bl	4bc8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3f3c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    3f40:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    3f44:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f46:	42bd      	cmp	r5, r7
    3f48:	d000      	beq.n	3f4c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3f4a:	b9b5      	cbnz	r5, 3f7a <z_thread_abort+0xa2>
		update_cache(1);
    3f4c:	2001      	movs	r0, #1
    3f4e:	f7ff fd7d 	bl	3a4c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3f52:	4b10      	ldr	r3, [pc, #64]	; (3f94 <z_thread_abort+0xbc>)
    3f54:	689b      	ldr	r3, [r3, #8]
    3f56:	42a3      	cmp	r3, r4
    3f58:	d1db      	bne.n	3f12 <z_thread_abort+0x3a>
    3f5a:	f3ef 8305 	mrs	r3, IPSR
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d1d7      	bne.n	3f12 <z_thread_abort+0x3a>
    3f62:	4630      	mov	r0, r6
    3f64:	f7fd f9d6 	bl	1314 <arch_swap>
	return ret;
    3f68:	e7d3      	b.n	3f12 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f6a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3f6e:	f043 0308 	orr.w	r3, r3, #8
    3f72:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f74:	f000 fd86 	bl	4a84 <sys_dlist_remove>
}
    3f78:	e7d7      	b.n	3f2a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    3f7a:	4628      	mov	r0, r5
    3f7c:	f000 fd8a 	bl	4a94 <unpend_thread_no_timeout>
    3f80:	f105 0018 	add.w	r0, r5, #24
    3f84:	f000 fe20 	bl	4bc8 <z_abort_timeout>
    3f88:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3f8c:	4628      	mov	r0, r5
    3f8e:	f7ff fdb5 	bl	3afc <ready_thread>
    3f92:	e7d7      	b.n	3f44 <z_thread_abort+0x6c>
    3f94:	20000344 	.word	0x20000344

00003f98 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3f98:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3f9a:	4806      	ldr	r0, [pc, #24]	; (3fb4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3f9c:	4a06      	ldr	r2, [pc, #24]	; (3fb8 <z_data_copy+0x20>)
    3f9e:	4907      	ldr	r1, [pc, #28]	; (3fbc <z_data_copy+0x24>)
    3fa0:	1a12      	subs	r2, r2, r0
    3fa2:	f000 fd5e 	bl	4a62 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3faa:	4a05      	ldr	r2, [pc, #20]	; (3fc0 <z_data_copy+0x28>)
    3fac:	4905      	ldr	r1, [pc, #20]	; (3fc4 <z_data_copy+0x2c>)
    3fae:	4806      	ldr	r0, [pc, #24]	; (3fc8 <z_data_copy+0x30>)
    3fb0:	f000 bd57 	b.w	4a62 <z_early_memcpy>
    3fb4:	20000000 	.word	0x20000000
    3fb8:	20000096 	.word	0x20000096
    3fbc:	000057b0 	.word	0x000057b0
    3fc0:	00000000 	.word	0x00000000
    3fc4:	000057b0 	.word	0x000057b0
    3fc8:	20000000 	.word	0x20000000

00003fcc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3fcc:	4b03      	ldr	r3, [pc, #12]	; (3fdc <elapsed+0x10>)
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	b90b      	cbnz	r3, 3fd6 <elapsed+0xa>
    3fd2:	f7fe bca3 	b.w	291c <sys_clock_elapsed>
}
    3fd6:	2000      	movs	r0, #0
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	20000374 	.word	0x20000374

00003fe0 <next_timeout>:

static int32_t next_timeout(void)
{
    3fe0:	b510      	push	{r4, lr}
	return list->head == list;
    3fe2:	4b0e      	ldr	r3, [pc, #56]	; (401c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c>)
    3fe4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fe6:	429c      	cmp	r4, r3
    3fe8:	d104      	bne.n	3ff4 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3fea:	f7ff ffef 	bl	3fcc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    3fee:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    3ff2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    3ff4:	f7ff ffea 	bl	3fcc <elapsed>
	if ((to == NULL) ||
    3ff8:	2c00      	cmp	r4, #0
    3ffa:	d0f8      	beq.n	3fee <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3ffc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    4000:	1a1b      	subs	r3, r3, r0
    4002:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    4006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    400a:	f172 0100 	sbcs.w	r1, r2, #0
    400e:	daee      	bge.n	3fee <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    4010:	2a00      	cmp	r2, #0
    4012:	bfac      	ite	ge
    4014:	4618      	movge	r0, r3
    4016:	2000      	movlt	r0, #0
	return ret;
    4018:	e7eb      	b.n	3ff2 <next_timeout+0x12>
    401a:	bf00      	nop
    401c:	20000088 	.word	0x20000088

00004020 <remove_timeout>:
{
    4020:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4022:	b170      	cbz	r0, 4042 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4024:	4b0b      	ldr	r3, [pc, #44]	; (4054 <remove_timeout+0x34>)
    4026:	685b      	ldr	r3, [r3, #4]
    4028:	4298      	cmp	r0, r3
    402a:	d00a      	beq.n	4042 <remove_timeout+0x22>
    402c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    402e:	b143      	cbz	r3, 4042 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4030:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4034:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4038:	1912      	adds	r2, r2, r4
    403a:	eb41 0105 	adc.w	r1, r1, r5
    403e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    4042:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    4046:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4048:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    404a:	2300      	movs	r3, #0
	node->prev = NULL;
    404c:	e9c0 3300 	strd	r3, r3, [r0]
}
    4050:	bd30      	pop	{r4, r5, pc}
    4052:	bf00      	nop
    4054:	20000088 	.word	0x20000088

00004058 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4058:	f1b3 3fff 	cmp.w	r3, #4294967295
    405c:	bf08      	it	eq
    405e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4064:	4604      	mov	r4, r0
    4066:	461d      	mov	r5, r3
    4068:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    406a:	d05c      	beq.n	4126 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    406c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    406e:	f04f 0320 	mov.w	r3, #32
    4072:	f3ef 8711 	mrs	r7, BASEPRI
    4076:	f383 8812 	msr	BASEPRI_MAX, r3
    407a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    407e:	3201      	adds	r2, #1
    4080:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    4084:	da24      	bge.n	40d0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4086:	492d      	ldr	r1, [pc, #180]	; (413c <z_add_timeout+0xe4>)
    4088:	e9d1 2000 	ldrd	r2, r0, [r1]
    408c:	f06f 0301 	mvn.w	r3, #1
    4090:	1a9b      	subs	r3, r3, r2
    4092:	f04f 32ff 	mov.w	r2, #4294967295
    4096:	eb62 0000 	sbc.w	r0, r2, r0
    409a:	1b9e      	subs	r6, r3, r6
    409c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    40a0:	2e01      	cmp	r6, #1
    40a2:	f170 0300 	sbcs.w	r3, r0, #0
    40a6:	da01      	bge.n	40ac <z_add_timeout+0x54>
    40a8:	2601      	movs	r6, #1
    40aa:	2000      	movs	r0, #0
    40ac:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    40b0:	4e23      	ldr	r6, [pc, #140]	; (4140 <z_add_timeout+0xe8>)
    40b2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    40b6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40b8:	45b4      	cmp	ip, r6
    40ba:	bf08      	it	eq
    40bc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    40c0:	f1bc 0f00 	cmp.w	ip, #0
    40c4:	d10d      	bne.n	40e2 <z_add_timeout+0x8a>
	node->prev = tail;
    40c6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    40ca:	602c      	str	r4, [r5, #0]
	list->tail = node;
    40cc:	6074      	str	r4, [r6, #4]
}
    40ce:	e01c      	b.n	410a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    40d0:	f7ff ff7c 	bl	3fcc <elapsed>
    40d4:	3601      	adds	r6, #1
    40d6:	f145 0500 	adc.w	r5, r5, #0
    40da:	1836      	adds	r6, r6, r0
    40dc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    40e0:	e7e4      	b.n	40ac <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    40e2:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    40e6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    40ea:	4293      	cmp	r3, r2
    40ec:	eb71 0e00 	sbcs.w	lr, r1, r0
    40f0:	da1a      	bge.n	4128 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    40f2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    40f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
    40f8:	eb60 0001 	sbc.w	r0, r0, r1
    40fc:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    4100:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    4104:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4106:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    410a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    410c:	42b3      	cmp	r3, r6
    410e:	d006      	beq.n	411e <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4110:	429c      	cmp	r4, r3
    4112:	d104      	bne.n	411e <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    4114:	f7ff ff64 	bl	3fe0 <next_timeout>
    4118:	2100      	movs	r1, #0
    411a:	f7fe fbcd 	bl	28b8 <sys_clock_set_timeout>
	__asm__ volatile(
    411e:	f387 8811 	msr	BASEPRI, r7
    4122:	f3bf 8f6f 	isb	sy
		}
	}
}
    4126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    4128:	1a9b      	subs	r3, r3, r2
    412a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    412e:	45ac      	cmp	ip, r5
    4130:	e9c4 3104 	strd	r3, r1, [r4, #16]
    4134:	d0c7      	beq.n	40c6 <z_add_timeout+0x6e>
    4136:	f8dc c000 	ldr.w	ip, [ip]
    413a:	e7c1      	b.n	40c0 <z_add_timeout+0x68>
    413c:	200001d0 	.word	0x200001d0
    4140:	20000088 	.word	0x20000088

00004144 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    4144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    4148:	f04f 0320 	mov.w	r3, #32
    414c:	f3ef 8c11 	mrs	ip, BASEPRI
    4150:	f383 8812 	msr	BASEPRI_MAX, r3
    4154:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4158:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 420c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    415c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4210 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    4160:	4f2c      	ldr	r7, [pc, #176]	; (4214 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    4162:	f8c9 0000 	str.w	r0, [r9]
    4166:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    416a:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    416c:	4550      	cmp	r0, sl
    416e:	bf08      	it	eq
    4170:	2000      	moveq	r0, #0
    4172:	2500      	movs	r5, #0
		curr_tick += dt;
    4174:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    4178:	f8d9 3000 	ldr.w	r3, [r9]
    417c:	46e0      	mov	r8, ip
    417e:	b380      	cbz	r0, 41e2 <sys_clock_announce+0x9e>
    4180:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    4184:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    4188:	42b3      	cmp	r3, r6
    418a:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    418e:	da05      	bge.n	419c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    4190:	1af6      	subs	r6, r6, r3
    4192:	eb6c 040e 	sbc.w	r4, ip, lr
    4196:	e9c0 6404 	strd	r6, r4, [r0, #16]
    419a:	e022      	b.n	41e2 <sys_clock_announce+0x9e>
		curr_tick += dt;
    419c:	18b2      	adds	r2, r6, r2
    419e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    41a2:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    41a6:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    41aa:	f7ff ff39 	bl	4020 <remove_timeout>
	__asm__ volatile(
    41ae:	f388 8811 	msr	BASEPRI, r8
    41b2:	f3bf 8f6f 	isb	sy
		t->fn(t);
    41b6:	6883      	ldr	r3, [r0, #8]
    41b8:	4798      	blx	r3
	__asm__ volatile(
    41ba:	f04f 0320 	mov.w	r3, #32
    41be:	f3ef 8811 	mrs	r8, BASEPRI
    41c2:	f383 8812 	msr	BASEPRI_MAX, r3
    41c6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    41ca:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    41ce:	f8da 0000 	ldr.w	r0, [sl]
    41d2:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41d4:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    41d6:	46c4      	mov	ip, r8
    41d8:	f8c9 3000 	str.w	r3, [r9]
    41dc:	d1ca      	bne.n	4174 <sys_clock_announce+0x30>
		curr_tick += dt;
    41de:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    41e2:	189a      	adds	r2, r3, r2
    41e4:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    41e8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    41ea:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    41ee:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    41f2:	f7ff fef5 	bl	3fe0 <next_timeout>
    41f6:	4621      	mov	r1, r4
    41f8:	f7fe fb5e 	bl	28b8 <sys_clock_set_timeout>
	__asm__ volatile(
    41fc:	f388 8811 	msr	BASEPRI, r8
    4200:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    4204:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    4208:	f7ff bcdc 	b.w	3bc4 <z_time_slice>
    420c:	20000088 	.word	0x20000088
    4210:	20000374 	.word	0x20000374
    4214:	200001d0 	.word	0x200001d0

00004218 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4218:	b510      	push	{r4, lr}
	__asm__ volatile(
    421a:	f04f 0320 	mov.w	r3, #32
    421e:	f3ef 8411 	mrs	r4, BASEPRI
    4222:	f383 8812 	msr	BASEPRI_MAX, r3
    4226:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    422a:	f7ff fecf 	bl	3fcc <elapsed>
    422e:	4a06      	ldr	r2, [pc, #24]	; (4248 <sys_clock_tick_get+0x30>)
    4230:	4603      	mov	r3, r0
    4232:	e9d2 0100 	ldrd	r0, r1, [r2]
    4236:	1818      	adds	r0, r3, r0
    4238:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    423c:	f384 8811 	msr	BASEPRI, r4
    4240:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4244:	bd10      	pop	{r4, pc}
    4246:	bf00      	nop
    4248:	200001d0 	.word	0x200001d0

0000424c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    424c:	4801      	ldr	r0, [pc, #4]	; (4254 <boot_banner+0x8>)
    424e:	f000 b824 	b.w	429a <printk>
    4252:	bf00      	nop
    4254:	00005782 	.word	0x00005782

00004258 <gpio_pin_configure_dt>:
{
    4258:	b4f0      	push	{r4, r5, r6, r7}
    425a:	4603      	mov	r3, r0
    425c:	460a      	mov	r2, r1
				  spec->pin,
    425e:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    4260:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    4262:	6800      	ldr	r0, [r0, #0]
    4264:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4266:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
    4268:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    426a:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    426c:	d506      	bpl.n	427c <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    426e:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    4272:	d003      	beq.n	427c <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4274:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4276:	bf48      	it	mi
    4278:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    427c:	6834      	ldr	r4, [r6, #0]
    427e:	2501      	movs	r5, #1
    4280:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4282:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4286:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4288:	bf4c      	ite	mi
    428a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    428c:	43ac      	bicpl	r4, r5
    428e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    4290:	683b      	ldr	r3, [r7, #0]
}
    4292:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    4294:	4718      	bx	r3

00004296 <arch_printk_char_out>:
}
    4296:	2000      	movs	r0, #0
    4298:	4770      	bx	lr

0000429a <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    429a:	b40f      	push	{r0, r1, r2, r3}
    429c:	b507      	push	{r0, r1, r2, lr}
    429e:	a904      	add	r1, sp, #16
    42a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    42a4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    42a6:	f7fc f92b 	bl	500 <vprintk>

	va_end(ap);
}
    42aa:	b003      	add	sp, #12
    42ac:	f85d eb04 	ldr.w	lr, [sp], #4
    42b0:	b004      	add	sp, #16
    42b2:	4770      	bx	lr

000042b4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    42b4:	4604      	mov	r4, r0
    42b6:	b508      	push	{r3, lr}
    42b8:	4608      	mov	r0, r1
    42ba:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    42bc:	461a      	mov	r2, r3
    42be:	47a0      	blx	r4
	return z_impl_z_current_get();
    42c0:	f7ff fe04 	bl	3ecc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    42c4:	f7fd fb86 	bl	19d4 <z_impl_k_thread_abort>

000042c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    42c8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    42ca:	f013 0307 	ands.w	r3, r3, #7
    42ce:	d105      	bne.n	42dc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    42d0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    42d2:	2b00      	cmp	r3, #0
    42d4:	bf0c      	ite	eq
    42d6:	2000      	moveq	r0, #0
    42d8:	2003      	movne	r0, #3
    42da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    42dc:	2b02      	cmp	r3, #2
    42de:	d105      	bne.n	42ec <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    42e0:	8b40      	ldrh	r0, [r0, #26]
    42e2:	fab0 f080 	clz	r0, r0
    42e6:	0940      	lsrs	r0, r0, #5
    42e8:	0080      	lsls	r0, r0, #2
    42ea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    42ec:	2b01      	cmp	r3, #1
    42ee:	d105      	bne.n	42fc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    42f0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    42f2:	2b00      	cmp	r3, #0
    42f4:	bf0c      	ite	eq
    42f6:	2000      	moveq	r0, #0
    42f8:	2005      	movne	r0, #5
    42fa:	4770      	bx	lr
	int evt = EVT_NOP;
    42fc:	2000      	movs	r0, #0
}
    42fe:	4770      	bx	lr

00004300 <validate_args>:
{
    4300:	b510      	push	{r4, lr}
    4302:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4304:	b100      	cbz	r0, 4308 <validate_args+0x8>
    4306:	b911      	cbnz	r1, 430e <validate_args+0xe>
		return -EINVAL;
    4308:	f06f 0015 	mvn.w	r0, #21
}
    430c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    430e:	1d08      	adds	r0, r1, #4
    4310:	f000 f895 	bl	443e <sys_notify_validate>
	if ((rv == 0)
    4314:	2800      	cmp	r0, #0
    4316:	d1f9      	bne.n	430c <validate_args+0xc>
	    && ((cli->notify.flags
    4318:	68a3      	ldr	r3, [r4, #8]
    431a:	2b03      	cmp	r3, #3
    431c:	d9f6      	bls.n	430c <validate_args+0xc>
    431e:	e7f3      	b.n	4308 <validate_args+0x8>

00004320 <notify_one>:
{
    4320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4324:	460d      	mov	r5, r1
    4326:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4328:	4619      	mov	r1, r3
    432a:	1d28      	adds	r0, r5, #4
{
    432c:	4690      	mov	r8, r2
    432e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4330:	f000 f896 	bl	4460 <sys_notify_finalize>
	if (cb) {
    4334:	4604      	mov	r4, r0
    4336:	b138      	cbz	r0, 4348 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4338:	4633      	mov	r3, r6
    433a:	4642      	mov	r2, r8
    433c:	4629      	mov	r1, r5
    433e:	4638      	mov	r0, r7
    4340:	46a4      	mov	ip, r4
}
    4342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4346:	4760      	bx	ip
}
    4348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000434c <transition_complete>:
{
    434c:	b410      	push	{r4}
	__asm__ volatile(
    434e:	f04f 0420 	mov.w	r4, #32
    4352:	f3ef 8211 	mrs	r2, BASEPRI
    4356:	f384 8812 	msr	BASEPRI_MAX, r4
    435a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    435e:	6141      	str	r1, [r0, #20]
}
    4360:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4362:	2101      	movs	r1, #1
    4364:	f7fc b8da 	b.w	51c <process_event>

00004368 <onoff_manager_init>:
{
    4368:	b538      	push	{r3, r4, r5, lr}
    436a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    436c:	4605      	mov	r5, r0
    436e:	b158      	cbz	r0, 4388 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4370:	b151      	cbz	r1, 4388 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4372:	680b      	ldr	r3, [r1, #0]
    4374:	b143      	cbz	r3, 4388 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4376:	684b      	ldr	r3, [r1, #4]
    4378:	b133      	cbz	r3, 4388 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    437a:	221c      	movs	r2, #28
    437c:	2100      	movs	r1, #0
    437e:	f000 f91b 	bl	45b8 <memset>
    4382:	612c      	str	r4, [r5, #16]
	return 0;
    4384:	2000      	movs	r0, #0
}
    4386:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4388:	f06f 0015 	mvn.w	r0, #21
    438c:	e7fb      	b.n	4386 <onoff_manager_init+0x1e>

0000438e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    438e:	b570      	push	{r4, r5, r6, lr}
    4390:	4605      	mov	r5, r0
    4392:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4394:	f7ff ffb4 	bl	4300 <validate_args>

	if (rv < 0) {
    4398:	1e04      	subs	r4, r0, #0
    439a:	db15      	blt.n	43c8 <onoff_request+0x3a>
    439c:	f04f 0320 	mov.w	r3, #32
    43a0:	f3ef 8211 	mrs	r2, BASEPRI
    43a4:	f383 8812 	msr	BASEPRI_MAX, r3
    43a8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    43ac:	8b6b      	ldrh	r3, [r5, #26]
    43ae:	8b2c      	ldrh	r4, [r5, #24]
    43b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    43b4:	428b      	cmp	r3, r1
    43b6:	f004 0407 	and.w	r4, r4, #7
    43ba:	d107      	bne.n	43cc <onoff_request+0x3e>
	__asm__ volatile(
    43bc:	f382 8811 	msr	BASEPRI, r2
    43c0:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    43c4:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    43c8:	4620      	mov	r0, r4
    43ca:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    43cc:	2c02      	cmp	r4, #2
    43ce:	d10c      	bne.n	43ea <onoff_request+0x5c>
		mgr->refs += 1U;
    43d0:	3301      	adds	r3, #1
    43d2:	836b      	strh	r3, [r5, #26]
    43d4:	f382 8811 	msr	BASEPRI, r2
    43d8:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    43dc:	2300      	movs	r3, #0
    43de:	4622      	mov	r2, r4
    43e0:	4631      	mov	r1, r6
    43e2:	4628      	mov	r0, r5
    43e4:	f7ff ff9c 	bl	4320 <notify_one>
    43e8:	e7ee      	b.n	43c8 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    43ea:	2c06      	cmp	r4, #6
    43ec:	d814      	bhi.n	4418 <onoff_request+0x8a>
    43ee:	e8df f004 	tbb	[pc, r4]
    43f2:	1304      	.short	0x1304
    43f4:	1a041313 	.word	0x1a041313
    43f8:	04          	.byte	0x04
    43f9:	00          	.byte	0x00
	parent->next = child;
    43fa:	2300      	movs	r3, #0
    43fc:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    43fe:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4400:	b93b      	cbnz	r3, 4412 <onoff_request+0x84>
	list->head = node;
    4402:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    4406:	b9ac      	cbnz	r4, 4434 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4408:	2102      	movs	r1, #2
    440a:	4628      	mov	r0, r5
    440c:	f7fc f886 	bl	51c <process_event>
    4410:	e7da      	b.n	43c8 <onoff_request+0x3a>
	parent->next = child;
    4412:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4414:	606e      	str	r6, [r5, #4]
}
    4416:	e7f6      	b.n	4406 <onoff_request+0x78>
    4418:	f382 8811 	msr	BASEPRI, r2
    441c:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    4420:	f06f 0404 	mvn.w	r4, #4
    4424:	e7d0      	b.n	43c8 <onoff_request+0x3a>
    4426:	f382 8811 	msr	BASEPRI, r2
    442a:	f3bf 8f6f 	isb	sy
    442e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4432:	e7c9      	b.n	43c8 <onoff_request+0x3a>
    4434:	f382 8811 	msr	BASEPRI, r2
    4438:	f3bf 8f6f 	isb	sy
		if (notify) {
    443c:	e7c4      	b.n	43c8 <onoff_request+0x3a>

0000443e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    443e:	4603      	mov	r3, r0
    4440:	b158      	cbz	r0, 445a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4442:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4444:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4448:	2a01      	cmp	r2, #1
    444a:	d003      	beq.n	4454 <sys_notify_validate+0x16>
    444c:	2a03      	cmp	r2, #3
    444e:	d104      	bne.n	445a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4450:	6802      	ldr	r2, [r0, #0]
    4452:	b112      	cbz	r2, 445a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4454:	2000      	movs	r0, #0
    4456:	6098      	str	r0, [r3, #8]
    4458:	4770      	bx	lr
    445a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    445e:	4770      	bx	lr

00004460 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4460:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4462:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4464:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4468:	2a03      	cmp	r2, #3
    446a:	f04f 0200 	mov.w	r2, #0
{
    446e:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4470:	bf0c      	ite	eq
    4472:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    4474:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4476:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4478:	4770      	bx	lr

0000447a <encode_uint>:
{
    447a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    447e:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    4480:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4482:	2b6f      	cmp	r3, #111	; 0x6f
{
    4484:	4680      	mov	r8, r0
    4486:	460f      	mov	r7, r1
    4488:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    448a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    448e:	d029      	beq.n	44e4 <encode_uint+0x6a>
    4490:	d824      	bhi.n	44dc <encode_uint+0x62>
		return 10;
    4492:	2b58      	cmp	r3, #88	; 0x58
    4494:	bf0c      	ite	eq
    4496:	2610      	moveq	r6, #16
    4498:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    449a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    449e:	4632      	mov	r2, r6
    44a0:	2300      	movs	r3, #0
    44a2:	4640      	mov	r0, r8
    44a4:	4639      	mov	r1, r7
    44a6:	f7fb fe19 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    44aa:	2a09      	cmp	r2, #9
    44ac:	b2d4      	uxtb	r4, r2
    44ae:	d81e      	bhi.n	44ee <encode_uint+0x74>
    44b0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    44b2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    44b4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    44b6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    44ba:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    44be:	d301      	bcc.n	44c4 <encode_uint+0x4a>
    44c0:	45d1      	cmp	r9, sl
    44c2:	d811      	bhi.n	44e8 <encode_uint+0x6e>
	if (conv->flag_hash) {
    44c4:	782b      	ldrb	r3, [r5, #0]
    44c6:	069b      	lsls	r3, r3, #26
    44c8:	d505      	bpl.n	44d6 <encode_uint+0x5c>
		if (radix == 8) {
    44ca:	2e08      	cmp	r6, #8
    44cc:	d115      	bne.n	44fa <encode_uint+0x80>
			conv->altform_0 = true;
    44ce:	78ab      	ldrb	r3, [r5, #2]
    44d0:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    44d4:	70ab      	strb	r3, [r5, #2]
}
    44d6:	4648      	mov	r0, r9
    44d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    44dc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    44e0:	2b70      	cmp	r3, #112	; 0x70
    44e2:	e7d7      	b.n	4494 <encode_uint+0x1a>
	switch (specifier) {
    44e4:	2608      	movs	r6, #8
    44e6:	e7d8      	b.n	449a <encode_uint+0x20>
		value /= radix;
    44e8:	4680      	mov	r8, r0
    44ea:	460f      	mov	r7, r1
    44ec:	e7d7      	b.n	449e <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    44ee:	f1bb 0f19 	cmp.w	fp, #25
    44f2:	bf94      	ite	ls
    44f4:	3437      	addls	r4, #55	; 0x37
    44f6:	3457      	addhi	r4, #87	; 0x57
    44f8:	e7db      	b.n	44b2 <encode_uint+0x38>
		} else if (radix == 16) {
    44fa:	2e10      	cmp	r6, #16
    44fc:	d1eb      	bne.n	44d6 <encode_uint+0x5c>
			conv->altform_0c = true;
    44fe:	78ab      	ldrb	r3, [r5, #2]
    4500:	f043 0310 	orr.w	r3, r3, #16
    4504:	e7e6      	b.n	44d4 <encode_uint+0x5a>

00004506 <outs>:
{
    4506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    450a:	4607      	mov	r7, r0
    450c:	4688      	mov	r8, r1
    450e:	4615      	mov	r5, r2
    4510:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4512:	4614      	mov	r4, r2
    4514:	42b4      	cmp	r4, r6
    4516:	d305      	bcc.n	4524 <outs+0x1e>
    4518:	b10e      	cbz	r6, 451e <outs+0x18>
	return (int)count;
    451a:	1b60      	subs	r0, r4, r5
    451c:	e008      	b.n	4530 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    451e:	7823      	ldrb	r3, [r4, #0]
    4520:	2b00      	cmp	r3, #0
    4522:	d0fa      	beq.n	451a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    4524:	f814 0b01 	ldrb.w	r0, [r4], #1
    4528:	4641      	mov	r1, r8
    452a:	47b8      	blx	r7
		if (rc < 0) {
    452c:	2800      	cmp	r0, #0
    452e:	daf1      	bge.n	4514 <outs+0xe>
}
    4530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004534 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4534:	4770      	bx	lr

00004536 <z_log_minimal_printk>:
{
    4536:	b40f      	push	{r0, r1, r2, r3}
    4538:	b507      	push	{r0, r1, r2, lr}
    453a:	a904      	add	r1, sp, #16
    453c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    4540:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    4542:	f7fb ffdd 	bl	500 <vprintk>
}
    4546:	b003      	add	sp, #12
    4548:	f85d eb04 	ldr.w	lr, [sp], #4
    454c:	b004      	add	sp, #16
    454e:	4770      	bx	lr

00004550 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4550:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    4552:	6800      	ldr	r0, [r0, #0]
    4554:	f7fc be5c 	b.w	1210 <z_arm_fatal_error>

00004558 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4558:	2100      	movs	r1, #0
    455a:	2001      	movs	r0, #1
    455c:	f7fc be58 	b.w	1210 <z_arm_fatal_error>

00004560 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4560:	b508      	push	{r3, lr}
	handler();
    4562:	f7fc feb7 	bl	12d4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    456a:	f7fc bf8f 	b.w	148c <z_arm_exc_exit>

0000456e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    456e:	3901      	subs	r1, #1
    4570:	4603      	mov	r3, r0
    4572:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4576:	b90a      	cbnz	r2, 457c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4578:	701a      	strb	r2, [r3, #0]

	return dest;
}
    457a:	4770      	bx	lr
		*d = *s;
    457c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4580:	e7f7      	b.n	4572 <strcpy+0x4>

00004582 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4582:	4603      	mov	r3, r0
	size_t n = 0;
    4584:	2000      	movs	r0, #0

	while (*s != '\0') {
    4586:	5c1a      	ldrb	r2, [r3, r0]
    4588:	b902      	cbnz	r2, 458c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    458a:	4770      	bx	lr
		n++;
    458c:	3001      	adds	r0, #1
    458e:	e7fa      	b.n	4586 <strlen+0x4>

00004590 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4590:	4603      	mov	r3, r0
	size_t n = 0;
    4592:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4594:	5c1a      	ldrb	r2, [r3, r0]
    4596:	b10a      	cbz	r2, 459c <strnlen+0xc>
    4598:	4288      	cmp	r0, r1
    459a:	d100      	bne.n	459e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    459c:	4770      	bx	lr
		n++;
    459e:	3001      	adds	r0, #1
    45a0:	e7f8      	b.n	4594 <strnlen+0x4>

000045a2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    45a2:	b510      	push	{r4, lr}
    45a4:	1e43      	subs	r3, r0, #1
    45a6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    45a8:	4291      	cmp	r1, r2
    45aa:	d100      	bne.n	45ae <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    45ac:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    45ae:	f811 4b01 	ldrb.w	r4, [r1], #1
    45b2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    45b6:	e7f7      	b.n	45a8 <memcpy+0x6>

000045b8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    45b8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    45ba:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    45bc:	4603      	mov	r3, r0
	while (n > 0) {
    45be:	4293      	cmp	r3, r2
    45c0:	d100      	bne.n	45c4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    45c2:	4770      	bx	lr
		*(d_byte++) = c_byte;
    45c4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    45c8:	e7f9      	b.n	45be <memset+0x6>

000045ca <_stdout_hook_default>:
}
    45ca:	f04f 30ff 	mov.w	r0, #4294967295
    45ce:	4770      	bx	lr

000045d0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    45d0:	2806      	cmp	r0, #6
    45d2:	d108      	bne.n	45e6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    45d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45d8:	2201      	movs	r2, #1
    45da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    45de:	f3bf 8f4f 	dsb	sy
        __WFE();
    45e2:	bf20      	wfe
    while (true)
    45e4:	e7fd      	b.n	45e2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    45e6:	4770      	bx	lr

000045e8 <pm_state_exit_post_ops>:
    45e8:	2300      	movs	r3, #0
    45ea:	f383 8811 	msr	BASEPRI, r3
    45ee:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    45f2:	4770      	bx	lr

000045f4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    45f4:	6903      	ldr	r3, [r0, #16]
    45f6:	b2c9      	uxtb	r1, r1
    45f8:	220c      	movs	r2, #12
    45fa:	fb01 3302 	mla	r3, r1, r2, r3
    45fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    4600:	f000 0007 	and.w	r0, r0, #7
    4604:	4770      	bx	lr

00004606 <set_on_state>:
	__asm__ volatile(
    4606:	f04f 0320 	mov.w	r3, #32
    460a:	f3ef 8211 	mrs	r2, BASEPRI
    460e:	f383 8812 	msr	BASEPRI_MAX, r3
    4612:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4616:	6803      	ldr	r3, [r0, #0]
    4618:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    461c:	f043 0302 	orr.w	r3, r3, #2
    4620:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4622:	f382 8811 	msr	BASEPRI, r2
    4626:	f3bf 8f6f 	isb	sy
}
    462a:	4770      	bx	lr

0000462c <stop>:
{
    462c:	b570      	push	{r4, r5, r6, lr}
    462e:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4630:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4632:	f04f 0420 	mov.w	r4, #32
    4636:	f3ef 8511 	mrs	r5, BASEPRI
    463a:	f384 8812 	msr	BASEPRI_MAX, r4
    463e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4642:	260c      	movs	r6, #12
    4644:	fb06 3401 	mla	r4, r6, r1, r3
    4648:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    464a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    464e:	d008      	beq.n	4662 <stop+0x36>
    4650:	42a2      	cmp	r2, r4
    4652:	d006      	beq.n	4662 <stop+0x36>
	__asm__ volatile(
    4654:	f385 8811 	msr	BASEPRI, r5
    4658:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    465c:	f04f 30ff 	mov.w	r0, #4294967295
}
    4660:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4662:	4371      	muls	r1, r6
    4664:	440b      	add	r3, r1
    4666:	2201      	movs	r2, #1
    4668:	641a      	str	r2, [r3, #64]	; 0x40
    466a:	f385 8811 	msr	BASEPRI, r5
    466e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4672:	6843      	ldr	r3, [r0, #4]
    4674:	440b      	add	r3, r1
    4676:	685b      	ldr	r3, [r3, #4]
    4678:	4798      	blx	r3
	return 0;
    467a:	2000      	movs	r0, #0
    467c:	e7f0      	b.n	4660 <stop+0x34>

0000467e <api_stop>:
	return stop(dev, subsys, CTX_API);
    467e:	2280      	movs	r2, #128	; 0x80
    4680:	f7ff bfd4 	b.w	462c <stop>

00004684 <async_start>:
{
    4684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4686:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4688:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    468a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    468c:	f04f 0520 	mov.w	r5, #32
    4690:	f3ef 8611 	mrs	r6, BASEPRI
    4694:	f385 8812 	msr	BASEPRI_MAX, r5
    4698:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    469c:	250c      	movs	r5, #12
    469e:	4369      	muls	r1, r5
    46a0:	440c      	add	r4, r1
    46a2:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    46a4:	f005 0c07 	and.w	ip, r5, #7
    46a8:	f1bc 0f01 	cmp.w	ip, #1
    46ac:	d10b      	bne.n	46c6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    46ae:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    46b0:	f386 8811 	msr	BASEPRI, r6
    46b4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    46b8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    46bc:	6843      	ldr	r3, [r0, #4]
    46be:	585b      	ldr	r3, [r3, r1]
    46c0:	4798      	blx	r3
	return 0;
    46c2:	2000      	movs	r0, #0
}
    46c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    46c6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    46ca:	42af      	cmp	r7, r5
    46cc:	f386 8811 	msr	BASEPRI, r6
    46d0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    46d4:	bf0c      	ite	eq
    46d6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    46da:	f04f 30ff 	movne.w	r0, #4294967295
    46de:	e7f1      	b.n	46c4 <async_start+0x40>

000046e0 <api_start>:
{
    46e0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    46e2:	2480      	movs	r4, #128	; 0x80
    46e4:	9400      	str	r4, [sp, #0]
    46e6:	f7ff ffcd 	bl	4684 <async_start>
}
    46ea:	b002      	add	sp, #8
    46ec:	bd10      	pop	{r4, pc}

000046ee <onoff_started_callback>:
{
    46ee:	b410      	push	{r4}
	return &data->mgr[type];
    46f0:	6900      	ldr	r0, [r0, #16]
    46f2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    46f4:	241c      	movs	r4, #28
    46f6:	fb03 0004 	mla	r0, r3, r4, r0
    46fa:	2100      	movs	r1, #0
}
    46fc:	bc10      	pop	{r4}
	notify(mgr, 0);
    46fe:	4710      	bx	r2

00004700 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4700:	2000      	movs	r0, #0
    4702:	f000 b989 	b.w	4a18 <nrfx_clock_stop>

00004706 <blocking_start_callback>:
{
    4706:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4708:	f7ff b902 	b.w	3910 <z_impl_k_sem_give>

0000470c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    470c:	6843      	ldr	r3, [r0, #4]
    470e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4710:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4714:	600b      	str	r3, [r1, #0]
}
    4716:	2000      	movs	r0, #0
    4718:	4770      	bx	lr

0000471a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    471a:	6843      	ldr	r3, [r0, #4]
    471c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    471e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    4722:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4726:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    472a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    472e:	2000      	movs	r0, #0
    4730:	4770      	bx	lr

00004732 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4732:	6843      	ldr	r3, [r0, #4]
    4734:	685b      	ldr	r3, [r3, #4]
}
    4736:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    4738:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    473c:	4770      	bx	lr

0000473e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    473e:	6843      	ldr	r3, [r0, #4]
    4740:	685b      	ldr	r3, [r3, #4]
}
    4742:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4744:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4748:	4770      	bx	lr

0000474a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    474a:	6843      	ldr	r3, [r0, #4]
    474c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    474e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4752:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4756:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4758:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    475c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4760:	2000      	movs	r0, #0
    4762:	4770      	bx	lr

00004764 <gpio_nrfx_manage_callback>:
{
    4764:	b510      	push	{r4, lr}
	return port->data;
    4766:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4768:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    476a:	b1f8      	cbz	r0, 47ac <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    476c:	4288      	cmp	r0, r1
    476e:	d119      	bne.n	47a4 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4770:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4772:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    4774:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4776:	42a1      	cmp	r1, r4
    4778:	d100      	bne.n	477c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    477a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    477c:	2000      	movs	r0, #0
    477e:	6008      	str	r0, [r1, #0]
	if (set) {
    4780:	b12a      	cbz	r2, 478e <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    4782:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4784:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4786:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4788:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    478a:	b902      	cbnz	r2, 478e <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    478c:	6099      	str	r1, [r3, #8]
	return 0;
    478e:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4790:	e010      	b.n	47b4 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4792:	4281      	cmp	r1, r0
    4794:	d106      	bne.n	47a4 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4796:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4798:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    479a:	6898      	ldr	r0, [r3, #8]
    479c:	4281      	cmp	r1, r0
    479e:	d1ed      	bne.n	477c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    47a0:	609c      	str	r4, [r3, #8]
}
    47a2:	e7eb      	b.n	477c <gpio_nrfx_manage_callback+0x18>
	return node->next;
    47a4:	4604      	mov	r4, r0
    47a6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    47a8:	2800      	cmp	r0, #0
    47aa:	d1f2      	bne.n	4792 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    47ac:	2a00      	cmp	r2, #0
    47ae:	d1e8      	bne.n	4782 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    47b0:	f06f 0015 	mvn.w	r0, #21
}
    47b4:	bd10      	pop	{r4, pc}

000047b6 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    47b6:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    47b8:	6843      	ldr	r3, [r0, #4]
    47ba:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    47bc:	7a05      	ldrb	r5, [r0, #8]
    47be:	6844      	ldr	r4, [r0, #4]
    47c0:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    47c4:	42a3      	cmp	r3, r4
    47c6:	d302      	bcc.n	47ce <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    47c8:	f06f 0001 	mvn.w	r0, #1
}
    47cc:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    47ce:	795c      	ldrb	r4, [r3, #5]
    47d0:	428c      	cmp	r4, r1
    47d2:	d001      	beq.n	47d8 <pinctrl_lookup_state+0x22>
		(*state)++;
    47d4:	3308      	adds	r3, #8
    47d6:	e7f0      	b.n	47ba <pinctrl_lookup_state+0x4>
			return 0;
    47d8:	2000      	movs	r0, #0
    47da:	e7f7      	b.n	47cc <pinctrl_lookup_state+0x16>

000047dc <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    47dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    47e4:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    47e6:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    47ea:	4281      	cmp	r1, r0
    47ec:	d102      	bne.n	47f4 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    47ee:	2000      	movs	r0, #0
}
    47f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    47f4:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    47f6:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    47fa:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    47fe:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    4800:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    4804:	bf08      	it	eq
    4806:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    480a:	2d19      	cmp	r5, #25
    480c:	d86a      	bhi.n	48e4 <pinctrl_configure_pins+0x108>
    480e:	e8df f005 	tbb	[pc, r5]
    4812:	170d      	.short	0x170d
    4814:	2e221f1c 	.word	0x2e221f1c
    4818:	6969691f 	.word	0x6969691f
    481c:	69553269 	.word	0x69553269
    4820:	69696969 	.word	0x69696969
    4824:	69696969 	.word	0x69696969
    4828:	66636058 	.word	0x66636058
			NRF_PSEL_UART(reg, TXD) = pin;
    482c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4830:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4834:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    4838:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
    483c:	2501      	movs	r5, #1
    483e:	e002      	b.n	4846 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
    4840:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4844:	2500      	movs	r5, #0
    4846:	46ac      	mov	ip, r5
    4848:	e01c      	b.n	4884 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
    484a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    484e:	e7ef      	b.n	4830 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
    4850:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    4854:	e7f6      	b.n	4844 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4856:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    485a:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    485c:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4860:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    4864:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
    4868:	f04f 0c01 	mov.w	ip, #1
    486c:	e00a      	b.n	4884 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    486e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    4872:	2501      	movs	r5, #1
    4874:	e7f2      	b.n	485c <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4876:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    487a:	2c00      	cmp	r4, #0
    487c:	d1e2      	bne.n	4844 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    487e:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4880:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
    4882:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4884:	f850 eb04 	ldr.w	lr, [r0], #4
    4888:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    488c:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4890:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4894:	ea4f 2404 	mov.w	r4, r4, lsl #8
    4898:	bf18      	it	ne
    489a:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
    489e:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    48a2:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    48a6:	bf18      	it	ne
    48a8:	2501      	movne	r5, #1
    48aa:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    48ae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    48b2:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    48b6:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    48ba:	e796      	b.n	47ea <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    48bc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    48c0:	e7db      	b.n	487a <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    48c2:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    48c6:	6805      	ldr	r5, [r0, #0]
    48c8:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    48cc:	2d00      	cmp	r5, #0
    48ce:	d0d0      	beq.n	4872 <pinctrl_configure_pins+0x96>
    48d0:	e7ae      	b.n	4830 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    48d2:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    48d6:	e7f6      	b.n	48c6 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    48d8:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    48dc:	e7f3      	b.n	48c6 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    48de:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    48e2:	e7f0      	b.n	48c6 <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
    48e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    48e8:	e782      	b.n	47f0 <pinctrl_configure_pins+0x14>

000048ea <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    48ea:	6902      	ldr	r2, [r0, #16]
{
    48ec:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    48ee:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    48f2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    48f6:	2000      	movs	r0, #0
    48f8:	4770      	bx	lr

000048fa <uarte_nrfx_err_check>:
	return config->uarte_regs;
    48fa:	6843      	ldr	r3, [r0, #4]
    48fc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    48fe:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4902:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4906:	4770      	bx	lr

00004908 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4908:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    490a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    490c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    490e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4912:	b150      	cbz	r0, 492a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    4914:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4916:	2000      	movs	r0, #0
    4918:	7812      	ldrb	r2, [r2, #0]
    491a:	700a      	strb	r2, [r1, #0]
    491c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4920:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4924:	2201      	movs	r2, #1
    4926:	601a      	str	r2, [r3, #0]
	return 0;
    4928:	4770      	bx	lr
		return -1;
    492a:	f04f 30ff 	mov.w	r0, #4294967295
}
    492e:	4770      	bx	lr

00004930 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4930:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4932:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4934:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4938:	b940      	cbnz	r0, 494c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    493a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    493c:	079b      	lsls	r3, r3, #30
    493e:	d406      	bmi.n	494e <is_tx_ready.isra.0+0x1e>
    4940:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4944:	3800      	subs	r0, #0
    4946:	bf18      	it	ne
    4948:	2001      	movne	r0, #1
    494a:	4770      	bx	lr
    494c:	2001      	movs	r0, #1
}
    494e:	4770      	bx	lr

00004950 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4950:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4952:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4954:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4958:	05c9      	lsls	r1, r1, #23
    495a:	d518      	bpl.n	498e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    495c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4960:	b1a9      	cbz	r1, 498e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4962:	f04f 0020 	mov.w	r0, #32
    4966:	f3ef 8111 	mrs	r1, BASEPRI
    496a:	f380 8812 	msr	BASEPRI_MAX, r0
    496e:	f3bf 8f6f 	isb	sy
    4972:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4976:	b130      	cbz	r0, 4986 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4978:	2000      	movs	r0, #0
    497a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    497e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4982:	2001      	movs	r0, #1
    4984:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4986:	f381 8811 	msr	BASEPRI, r1
    498a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    498e:	6852      	ldr	r2, [r2, #4]
    4990:	06d2      	lsls	r2, r2, #27
    4992:	d515      	bpl.n	49c0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4994:	f04f 0120 	mov.w	r1, #32
    4998:	f3ef 8211 	mrs	r2, BASEPRI
    499c:	f381 8812 	msr	BASEPRI_MAX, r1
    49a0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49a4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    49a8:	b111      	cbz	r1, 49b0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    49aa:	2100      	movs	r1, #0
    49ac:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    49b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    49b4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    49b8:	f382 8811 	msr	BASEPRI, r2
    49bc:	f3bf 8f6f 	isb	sy
}
    49c0:	4770      	bx	lr

000049c2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    49c2:	4770      	bx	lr

000049c4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    49c4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    49c8:	009b      	lsls	r3, r3, #2
    49ca:	b29b      	uxth	r3, r3
    49cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    49d0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    49d4:	2200      	movs	r2, #0
    49d6:	601a      	str	r2, [r3, #0]
    49d8:	681b      	ldr	r3, [r3, #0]
}
    49da:	4770      	bx	lr

000049dc <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    49dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    49e0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    49e4:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    49e6:	bf04      	itt	eq
    49e8:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    49ec:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    49f0:	1f83      	subs	r3, r0, #6
    49f2:	4258      	negs	r0, r3
    49f4:	4158      	adcs	r0, r3
    49f6:	4770      	bx	lr

000049f8 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    49f8:	4700      	bx	r0

000049fa <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    49fa:	f000 b90f 	b.w	4c1c <z_impl_k_busy_wait>

000049fe <nrfx_clock_enable>:
{
    49fe:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4a00:	2000      	movs	r0, #0
    4a02:	f7fc fc41 	bl	1288 <arch_irq_is_enabled>
    4a06:	b908      	cbnz	r0, 4a0c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4a08:	f7fc fc30 	bl	126c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a10:	2200      	movs	r2, #0
    4a12:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4a16:	bd08      	pop	{r3, pc}

00004a18 <nrfx_clock_stop>:
    clock_stop(domain);
    4a18:	f7fe b92c 	b.w	2c74 <clock_stop>

00004a1c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4a1c:	f000 001f 	and.w	r0, r0, #31
    4a20:	0080      	lsls	r0, r0, #2
    4a22:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a26:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    4a2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4a32:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    4a36:	4770      	bx	lr

00004a38 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4a38:	f7fe bd4e 	b.w	34d8 <_DoInit>

00004a3c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    4a3c:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    4a3e:	f7ff fffb 	bl	4a38 <SEGGER_RTT_Init>

	return 0;
}
    4a42:	2000      	movs	r0, #0
    4a44:	bd08      	pop	{r3, pc}

00004a46 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    4a46:	4770      	bx	lr

00004a48 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4a48:	b140      	cbz	r0, 4a5c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4a4a:	68c3      	ldr	r3, [r0, #12]
    4a4c:	7858      	ldrb	r0, [r3, #1]
    4a4e:	f010 0001 	ands.w	r0, r0, #1
    4a52:	bf1e      	ittt	ne
    4a54:	7818      	ldrbne	r0, [r3, #0]
    4a56:	fab0 f080 	clzne	r0, r0
    4a5a:	0940      	lsrne	r0, r0, #5
}
    4a5c:	4770      	bx	lr

00004a5e <z_early_memset>:
	(void) memset(dst, c, n);
    4a5e:	f7ff bdab 	b.w	45b8 <memset>

00004a62 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4a62:	f7ff bd9e 	b.w	45a2 <memcpy>

00004a66 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4a66:	f3ef 8005 	mrs	r0, IPSR
}
    4a6a:	3800      	subs	r0, #0
    4a6c:	bf18      	it	ne
    4a6e:	2001      	movne	r0, #1
    4a70:	4770      	bx	lr

00004a72 <k_thread_name_get>:
}
    4a72:	2000      	movs	r0, #0
    4a74:	4770      	bx	lr

00004a76 <z_pm_save_idle_exit>:
{
    4a76:	b508      	push	{r3, lr}
	pm_system_resume();
    4a78:	f7fc faa0 	bl	fbc <pm_system_resume>
}
    4a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4a80:	f7ff bf9f 	b.w	49c2 <sys_clock_idle_exit>

00004a84 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4a84:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4a88:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4a8a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4a8c:	2300      	movs	r3, #0
	node->prev = NULL;
    4a8e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4a92:	4770      	bx	lr

00004a94 <unpend_thread_no_timeout>:
{
    4a94:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4a96:	f7ff fff5 	bl	4a84 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4a9a:	7b43      	ldrb	r3, [r0, #13]
    4a9c:	f023 0302 	bic.w	r3, r3, #2
    4aa0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4aa2:	2300      	movs	r3, #0
    4aa4:	6083      	str	r3, [r0, #8]
}
    4aa6:	bd08      	pop	{r3, pc}

00004aa8 <add_to_waitq_locked>:
{
    4aa8:	b538      	push	{r3, r4, r5, lr}
    4aaa:	4604      	mov	r4, r0
    4aac:	460d      	mov	r5, r1
	unready_thread(thread);
    4aae:	f7ff f859 	bl	3b64 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4ab2:	7b63      	ldrb	r3, [r4, #13]
    4ab4:	f043 0302 	orr.w	r3, r3, #2
    4ab8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4aba:	b1e5      	cbz	r5, 4af6 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    4abc:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    4abe:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ac0:	429d      	cmp	r5, r3
    4ac2:	d109      	bne.n	4ad8 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    4ac4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4ac6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4aca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4acc:	606c      	str	r4, [r5, #4]
}
    4ace:	e012      	b.n	4af6 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4ad0:	686a      	ldr	r2, [r5, #4]
    4ad2:	4293      	cmp	r3, r2
    4ad4:	d0f6      	beq.n	4ac4 <add_to_waitq_locked+0x1c>
    4ad6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ad8:	2b00      	cmp	r3, #0
    4ada:	d0f3      	beq.n	4ac4 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    4adc:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4ae0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4ae4:	428a      	cmp	r2, r1
    4ae6:	d0f3      	beq.n	4ad0 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ae8:	4291      	cmp	r1, r2
    4aea:	ddf1      	ble.n	4ad0 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    4aec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4aee:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4af2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4af4:	605c      	str	r4, [r3, #4]
}
    4af6:	bd38      	pop	{r3, r4, r5, pc}

00004af8 <z_ready_thread>:
{
    4af8:	b510      	push	{r4, lr}
	__asm__ volatile(
    4afa:	f04f 0320 	mov.w	r3, #32
    4afe:	f3ef 8411 	mrs	r4, BASEPRI
    4b02:	f383 8812 	msr	BASEPRI_MAX, r3
    4b06:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4b0a:	f7fe fff7 	bl	3afc <ready_thread>
	__asm__ volatile(
    4b0e:	f384 8811 	msr	BASEPRI, r4
    4b12:	f3bf 8f6f 	isb	sy
}
    4b16:	bd10      	pop	{r4, pc}

00004b18 <z_sched_wake_thread>:
{
    4b18:	b538      	push	{r3, r4, r5, lr}
    4b1a:	4604      	mov	r4, r0
	__asm__ volatile(
    4b1c:	f04f 0320 	mov.w	r3, #32
    4b20:	f3ef 8511 	mrs	r5, BASEPRI
    4b24:	f383 8812 	msr	BASEPRI_MAX, r3
    4b28:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4b2c:	7b43      	ldrb	r3, [r0, #13]
    4b2e:	f013 0f28 	tst.w	r3, #40	; 0x28
    4b32:	d10b      	bne.n	4b4c <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    4b34:	6883      	ldr	r3, [r0, #8]
    4b36:	b10b      	cbz	r3, 4b3c <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    4b38:	f7ff ffac 	bl	4a94 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4b3c:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    4b3e:	b951      	cbnz	r1, 4b56 <z_sched_wake_thread+0x3e>
    4b40:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    4b44:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    4b46:	4620      	mov	r0, r4
    4b48:	f7fe ffd8 	bl	3afc <ready_thread>
	__asm__ volatile(
    4b4c:	f385 8811 	msr	BASEPRI, r5
    4b50:	f3bf 8f6f 	isb	sy
}
    4b54:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4b56:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    4b5a:	e7f3      	b.n	4b44 <z_sched_wake_thread+0x2c>

00004b5c <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    4b5c:	2101      	movs	r1, #1
    4b5e:	3818      	subs	r0, #24
    4b60:	f7ff bfda 	b.w	4b18 <z_sched_wake_thread>

00004b64 <z_unpend_first_thread>:
{
    4b64:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4b66:	f04f 0320 	mov.w	r3, #32
    4b6a:	f3ef 8511 	mrs	r5, BASEPRI
    4b6e:	f383 8812 	msr	BASEPRI_MAX, r3
    4b72:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4b76:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b78:	42a0      	cmp	r0, r4
    4b7a:	d00d      	beq.n	4b98 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    4b7c:	b134      	cbz	r4, 4b8c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    4b7e:	4620      	mov	r0, r4
    4b80:	f7ff ff88 	bl	4a94 <unpend_thread_no_timeout>
    4b84:	f104 0018 	add.w	r0, r4, #24
    4b88:	f000 f81e 	bl	4bc8 <z_abort_timeout>
	__asm__ volatile(
    4b8c:	f385 8811 	msr	BASEPRI, r5
    4b90:	f3bf 8f6f 	isb	sy
}
    4b94:	4620      	mov	r0, r4
    4b96:	bd38      	pop	{r3, r4, r5, pc}
    4b98:	2400      	movs	r4, #0
    4b9a:	e7f7      	b.n	4b8c <z_unpend_first_thread+0x28>

00004b9c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4b9c:	4603      	mov	r3, r0
    4b9e:	b920      	cbnz	r0, 4baa <z_reschedule_irqlock+0xe>
    4ba0:	f3ef 8205 	mrs	r2, IPSR
    4ba4:	b90a      	cbnz	r2, 4baa <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4ba6:	f7fc bbb5 	b.w	1314 <arch_swap>
    4baa:	f383 8811 	msr	BASEPRI, r3
    4bae:	f3bf 8f6f 	isb	sy
}
    4bb2:	4770      	bx	lr

00004bb4 <z_reschedule_unlocked>:
	__asm__ volatile(
    4bb4:	f04f 0320 	mov.w	r3, #32
    4bb8:	f3ef 8011 	mrs	r0, BASEPRI
    4bbc:	f383 8812 	msr	BASEPRI_MAX, r3
    4bc0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4bc4:	f7ff bfea 	b.w	4b9c <z_reschedule_irqlock>

00004bc8 <z_abort_timeout>:
{
    4bc8:	b510      	push	{r4, lr}
    4bca:	f04f 0220 	mov.w	r2, #32
    4bce:	f3ef 8411 	mrs	r4, BASEPRI
    4bd2:	f382 8812 	msr	BASEPRI_MAX, r2
    4bd6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4bda:	6803      	ldr	r3, [r0, #0]
    4bdc:	b13b      	cbz	r3, 4bee <z_abort_timeout+0x26>
			remove_timeout(to);
    4bde:	f7ff fa1f 	bl	4020 <remove_timeout>
			ret = 0;
    4be2:	2000      	movs	r0, #0
	__asm__ volatile(
    4be4:	f384 8811 	msr	BASEPRI, r4
    4be8:	f3bf 8f6f 	isb	sy
}
    4bec:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4bee:	f06f 0015 	mvn.w	r0, #21
    4bf2:	e7f7      	b.n	4be4 <z_abort_timeout+0x1c>

00004bf4 <z_get_next_timeout_expiry>:
{
    4bf4:	b510      	push	{r4, lr}
	__asm__ volatile(
    4bf6:	f04f 0320 	mov.w	r3, #32
    4bfa:	f3ef 8411 	mrs	r4, BASEPRI
    4bfe:	f383 8812 	msr	BASEPRI_MAX, r3
    4c02:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4c06:	f7ff f9eb 	bl	3fe0 <next_timeout>
	__asm__ volatile(
    4c0a:	f384 8811 	msr	BASEPRI, r4
    4c0e:	f3bf 8f6f 	isb	sy
}
    4c12:	bd10      	pop	{r4, pc}

00004c14 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4c14:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4c16:	f7ff faff 	bl	4218 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4c1a:	bd08      	pop	{r3, pc}

00004c1c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4c1c:	b108      	cbz	r0, 4c22 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4c1e:	f7fc bff7 	b.w	1c10 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4c22:	4770      	bx	lr

00004c24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4c24:	4770      	bx	lr
	...
