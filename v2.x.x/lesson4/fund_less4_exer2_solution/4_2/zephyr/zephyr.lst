
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 1e 00 20 bd 2e 00 00 07 67 00 00 91 2e 00 00     @.. .....g......
  10:	91 2e 00 00 91 2e 00 00 91 2e 00 00 00 00 00 00     ................
	...
  2c:	8d 27 00 00 91 2e 00 00 00 00 00 00 39 27 00 00     .'..........9'..
  3c:	91 2e 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  50:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  60:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  70:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  80:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  90:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  a0:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  b0:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  c0:	3d 28 00 00 3d 28 00 00 3d 28 00 00 3d 28 00 00     =(..=(..=(..=(..
  d0:	3d 28 00 00 3d 28 00 00 3d 28 00 00                 =(..=(..=(..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	4686      	mov	lr, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e08      	ldr	r6, [sp, #32]
     11c:	4615      	mov	r5, r2
     11e:	4674      	mov	r4, lr
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c2 	bne.w	2ac <CONFIG_FLASH_SIZE+0xac>
     128:	4285      	cmp	r5, r0
     12a:	fab2 f282 	clz	r2, r2
     12e:	d945      	bls.n	1bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4f>
     130:	b14a      	cbz	r2, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c2 0320 	rsb	r3, r2, #32
     136:	fa00 fc02 	lsl.w	ip, r0, r2
     13a:	fa2e f303 	lsr.w	r3, lr, r3
     13e:	4095      	lsls	r5, r2
     140:	ea43 0c0c 	orr.w	ip, r3, ip
     144:	4094      	lsls	r4, r2
     146:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     14a:	b2a8      	uxth	r0, r5
     14c:	fbbc f8fe 	udiv	r8, ip, lr
     150:	0c23      	lsrs	r3, r4, #16
     152:	fb0e cc18 	mls	ip, lr, r8, ip
     156:	fb08 f900 	mul.w	r9, r8, r0
     15a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     15e:	4599      	cmp	r9, r3
     160:	d928      	bls.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     162:	18eb      	adds	r3, r5, r3
     164:	f108 37ff 	add.w	r7, r8, #4294967295
     168:	d204      	bcs.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16a:	4599      	cmp	r9, r3
     16c:	d902      	bls.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	f1a8 0702 	sub.w	r7, r8, #2
     172:	442b      	add	r3, r5
     174:	eba3 0309 	sub.w	r3, r3, r9
     178:	b2a4      	uxth	r4, r4
     17a:	fbb3 fcfe 	udiv	ip, r3, lr
     17e:	fb0e 331c 	mls	r3, lr, ip, r3
     182:	fb0c f000 	mul.w	r0, ip, r0
     186:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18a:	42a0      	cmp	r0, r4
     18c:	d914      	bls.n	1b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4b>
     18e:	192c      	adds	r4, r5, r4
     190:	f10c 33ff 	add.w	r3, ip, #4294967295
     194:	d204      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     196:	42a0      	cmp	r0, r4
     198:	d902      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19a:	f1ac 0302 	sub.w	r3, ip, #2
     19e:	442c      	add	r4, r5
     1a0:	1a24      	subs	r4, r4, r0
     1a2:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1a6:	b11e      	cbz	r6, 1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	40d4      	lsrs	r4, r2
     1aa:	2300      	movs	r3, #0
     1ac:	6034      	str	r4, [r6, #0]
     1ae:	6073      	str	r3, [r6, #4]
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	4647      	mov	r7, r8
     1b6:	e7dd      	b.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     1b8:	4663      	mov	r3, ip
     1ba:	e7f1      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1bc:	bb92      	cbnz	r2, 224 <CONFIG_FLASH_SIZE+0x24>
     1be:	1b43      	subs	r3, r0, r5
     1c0:	2101      	movs	r1, #1
     1c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c6:	b2af      	uxth	r7, r5
     1c8:	fbb3 fcfe 	udiv	ip, r3, lr
     1cc:	0c20      	lsrs	r0, r4, #16
     1ce:	fb0e 331c 	mls	r3, lr, ip, r3
     1d2:	fb0c f807 	mul.w	r8, ip, r7
     1d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1da:	4598      	cmp	r8, r3
     1dc:	d962      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
     1de:	18eb      	adds	r3, r5, r3
     1e0:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e4:	d204      	bcs.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1e6:	4598      	cmp	r8, r3
     1e8:	d902      	bls.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     1ea:	f1ac 0002 	sub.w	r0, ip, #2
     1ee:	442b      	add	r3, r5
     1f0:	eba3 0308 	sub.w	r3, r3, r8
     1f4:	b2a4      	uxth	r4, r4
     1f6:	fbb3 fcfe 	udiv	ip, r3, lr
     1fa:	fb0e 331c 	mls	r3, lr, ip, r3
     1fe:	fb0c f707 	mul.w	r7, ip, r7
     202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     206:	42a7      	cmp	r7, r4
     208:	d94e      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     20a:	192c      	adds	r4, r5, r4
     20c:	f10c 33ff 	add.w	r3, ip, #4294967295
     210:	d204      	bcs.n	21c <CONFIG_FLASH_SIZE+0x1c>
     212:	42a7      	cmp	r7, r4
     214:	d902      	bls.n	21c <CONFIG_FLASH_SIZE+0x1c>
     216:	f1ac 0302 	sub.w	r3, ip, #2
     21a:	442c      	add	r4, r5
     21c:	1be4      	subs	r4, r4, r7
     21e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     222:	e7c0      	b.n	1a6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x39>
     224:	f1c2 0320 	rsb	r3, r2, #32
     228:	fa20 f103 	lsr.w	r1, r0, r3
     22c:	4095      	lsls	r5, r2
     22e:	4090      	lsls	r0, r2
     230:	fa2e f303 	lsr.w	r3, lr, r3
     234:	4303      	orrs	r3, r0
     236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23a:	b2af      	uxth	r7, r5
     23c:	fbb1 fcfe 	udiv	ip, r1, lr
     240:	fb0e 101c 	mls	r0, lr, ip, r1
     244:	0c19      	lsrs	r1, r3, #16
     246:	fb0c f807 	mul.w	r8, ip, r7
     24a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     24e:	4588      	cmp	r8, r1
     250:	fa04 f402 	lsl.w	r4, r4, r2
     254:	d922      	bls.n	29c <CONFIG_FLASH_SIZE+0x9c>
     256:	1869      	adds	r1, r5, r1
     258:	f10c 30ff 	add.w	r0, ip, #4294967295
     25c:	d204      	bcs.n	268 <CONFIG_FLASH_SIZE+0x68>
     25e:	4588      	cmp	r8, r1
     260:	d902      	bls.n	268 <CONFIG_FLASH_SIZE+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	4429      	add	r1, r5
     268:	eba1 0108 	sub.w	r1, r1, r8
     26c:	b29b      	uxth	r3, r3
     26e:	fbb1 fcfe 	udiv	ip, r1, lr
     272:	fb0e 111c 	mls	r1, lr, ip, r1
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     27e:	429f      	cmp	r7, r3
     280:	d90e      	bls.n	2a0 <CONFIG_FLASH_SIZE+0xa0>
     282:	18eb      	adds	r3, r5, r3
     284:	f10c 31ff 	add.w	r1, ip, #4294967295
     288:	d204      	bcs.n	294 <CONFIG_FLASH_SIZE+0x94>
     28a:	429f      	cmp	r7, r3
     28c:	d902      	bls.n	294 <CONFIG_FLASH_SIZE+0x94>
     28e:	f1ac 0102 	sub.w	r1, ip, #2
     292:	442b      	add	r3, r5
     294:	1bdb      	subs	r3, r3, r7
     296:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     29a:	e792      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     29c:	4660      	mov	r0, ip
     29e:	e7e3      	b.n	268 <CONFIG_FLASH_SIZE+0x68>
     2a0:	4661      	mov	r1, ip
     2a2:	e7f7      	b.n	294 <CONFIG_FLASH_SIZE+0x94>
     2a4:	4660      	mov	r0, ip
     2a6:	e7a3      	b.n	1f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x83>
     2a8:	4663      	mov	r3, ip
     2aa:	e7b7      	b.n	21c <CONFIG_FLASH_SIZE+0x1c>
     2ac:	4283      	cmp	r3, r0
     2ae:	d906      	bls.n	2be <CONFIG_FLASH_SIZE+0xbe>
     2b0:	b916      	cbnz	r6, 2b8 <CONFIG_FLASH_SIZE+0xb8>
     2b2:	2100      	movs	r1, #0
     2b4:	4608      	mov	r0, r1
     2b6:	e77b      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2b8:	e9c6 e000 	strd	lr, r0, [r6]
     2bc:	e7f9      	b.n	2b2 <CONFIG_FLASH_SIZE+0xb2>
     2be:	fab3 f783 	clz	r7, r3
     2c2:	b98f      	cbnz	r7, 2e8 <CONFIG_FLASH_SIZE+0xe8>
     2c4:	4283      	cmp	r3, r0
     2c6:	d301      	bcc.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c8:	4572      	cmp	r2, lr
     2ca:	d808      	bhi.n	2de <CONFIG_FLASH_SIZE+0xde>
     2cc:	ebbe 0402 	subs.w	r4, lr, r2
     2d0:	eb60 0303 	sbc.w	r3, r0, r3
     2d4:	2001      	movs	r0, #1
     2d6:	469c      	mov	ip, r3
     2d8:	b91e      	cbnz	r6, 2e2 <CONFIG_FLASH_SIZE+0xe2>
     2da:	2100      	movs	r1, #0
     2dc:	e768      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     2de:	4638      	mov	r0, r7
     2e0:	e7fa      	b.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     2e2:	e9c6 4c00 	strd	r4, ip, [r6]
     2e6:	e7f8      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     2e8:	f1c7 0c20 	rsb	ip, r7, #32
     2ec:	40bb      	lsls	r3, r7
     2ee:	fa22 f40c 	lsr.w	r4, r2, ip
     2f2:	431c      	orrs	r4, r3
     2f4:	fa2e f10c 	lsr.w	r1, lr, ip
     2f8:	fa20 f30c 	lsr.w	r3, r0, ip
     2fc:	40b8      	lsls	r0, r7
     2fe:	4301      	orrs	r1, r0
     300:	ea4f 4914 	mov.w	r9, r4, lsr #16
     304:	fa0e f507 	lsl.w	r5, lr, r7
     308:	fbb3 f8f9 	udiv	r8, r3, r9
     30c:	fa1f fe84 	uxth.w	lr, r4
     310:	fb09 3018 	mls	r0, r9, r8, r3
     314:	0c0b      	lsrs	r3, r1, #16
     316:	fb08 fa0e 	mul.w	sl, r8, lr
     31a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     31e:	459a      	cmp	sl, r3
     320:	fa02 f207 	lsl.w	r2, r2, r7
     324:	d940      	bls.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     326:	18e3      	adds	r3, r4, r3
     328:	f108 30ff 	add.w	r0, r8, #4294967295
     32c:	d204      	bcs.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     32e:	459a      	cmp	sl, r3
     330:	d902      	bls.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     332:	f1a8 0002 	sub.w	r0, r8, #2
     336:	4423      	add	r3, r4
     338:	eba3 030a 	sub.w	r3, r3, sl
     33c:	b289      	uxth	r1, r1
     33e:	fbb3 f8f9 	udiv	r8, r3, r9
     342:	fb09 3318 	mls	r3, r9, r8, r3
     346:	fb08 fe0e 	mul.w	lr, r8, lr
     34a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     34e:	458e      	cmp	lr, r1
     350:	d92c      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     352:	1861      	adds	r1, r4, r1
     354:	f108 33ff 	add.w	r3, r8, #4294967295
     358:	d204      	bcs.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>
     35a:	458e      	cmp	lr, r1
     35c:	d902      	bls.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>
     35e:	f1a8 0302 	sub.w	r3, r8, #2
     362:	4421      	add	r1, r4
     364:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     368:	fba0 9802 	umull	r9, r8, r0, r2
     36c:	eba1 010e 	sub.w	r1, r1, lr
     370:	4541      	cmp	r1, r8
     372:	46ce      	mov	lr, r9
     374:	4643      	mov	r3, r8
     376:	d302      	bcc.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     378:	d106      	bne.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37a:	454d      	cmp	r5, r9
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	ebb9 0e02 	subs.w	lr, r9, r2
     382:	eb68 0304 	sbc.w	r3, r8, r4
     386:	3801      	subs	r0, #1
     388:	2e00      	cmp	r6, #0
     38a:	d0a6      	beq.n	2da <CONFIG_FLASH_SIZE+0xda>
     38c:	ebb5 020e 	subs.w	r2, r5, lr
     390:	eb61 0103 	sbc.w	r1, r1, r3
     394:	fa01 fc0c 	lsl.w	ip, r1, ip
     398:	fa22 f307 	lsr.w	r3, r2, r7
     39c:	ea4c 0303 	orr.w	r3, ip, r3
     3a0:	40f9      	lsrs	r1, r7
     3a2:	e9c6 3100 	strd	r3, r1, [r6]
     3a6:	e798      	b.n	2da <CONFIG_FLASH_SIZE+0xda>
     3a8:	4640      	mov	r0, r8
     3aa:	e7c5      	b.n	338 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x38>
     3ac:	4643      	mov	r3, r8
     3ae:	e7d9      	b.n	364 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x64>

000003b0 <button_pressed>:
LOG_MODULE_REGISTER(Less4_Exer2,LOG_LEVEL_DBG);

/* STEP 7 - Replace the callback function button_pressed() */
void button_pressed(const struct device *dev, struct gpio_callback *cb,
            uint32_t pins)
{
     3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     3b4:	af00      	add	r7, sp, #0
  int i;
  int j;
  long int factorial;
  LOG_INF("Calculating the factorials of numbers 1 to %d:",MAX_NUMBER_FACT);
     3b6:	466c      	mov	r4, sp
     3b8:	b088      	sub	sp, #32
     3ba:	466a      	mov	r2, sp
     3bc:	4b16      	ldr	r3, [pc, #88]	; (418 <CONFIG_LOG_BUFFER_SIZE+0x18>)
     3be:	6153      	str	r3, [r2, #20]
     3c0:	230a      	movs	r3, #10
     3c2:	6193      	str	r3, [r2, #24]
     3c4:	2303      	movs	r3, #3
     3c6:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     3ca:	4814      	ldr	r0, [pc, #80]	; (41c <CONFIG_LOG_BUFFER_SIZE+0x1c>)
  for (i=1;i<=MAX_NUMBER_FACT;i++){
       factorial =1;
        for (j=1;j<=i;j++){
            factorial = factorial*j;
        }
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     3cc:	4d14      	ldr	r5, [pc, #80]	; (420 <CONFIG_LOG_BUFFER_SIZE+0x20>)
     3ce:	f8df 804c 	ldr.w	r8, [pc, #76]	; 41c <CONFIG_LOG_BUFFER_SIZE+0x1c>
     3d2:	2300      	movs	r3, #0
     3d4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     3d8:	f001 fc10 	bl	1bfc <z_impl_z_log_msg_static_create>
     3dc:	2604      	movs	r6, #4
     3de:	46a5      	mov	sp, r4
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     3e0:	2401      	movs	r4, #1
        for (j=1;j<=i;j++){
     3e2:	2301      	movs	r3, #1
       factorial =1;
     3e4:	4619      	mov	r1, r3
            factorial = factorial*j;
     3e6:	4359      	muls	r1, r3
        for (j=1;j<=i;j++){
     3e8:	3301      	adds	r3, #1
     3ea:	42a3      	cmp	r3, r4
     3ec:	ddfb      	ble.n	3e6 <button_pressed+0x36>
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     3ee:	46e9      	mov	r9, sp
     3f0:	b088      	sub	sp, #32
     3f2:	466a      	mov	r2, sp
     3f4:	e9c2 5405 	strd	r5, r4, [r2, #20]
     3f8:	61d1      	str	r1, [r2, #28]
     3fa:	f842 6f10 	str.w	r6, [r2, #16]!
     3fe:	2300      	movs	r3, #0
     400:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
     404:	4640      	mov	r0, r8
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     406:	3401      	adds	r4, #1
     408:	f001 fbf8 	bl	1bfc <z_impl_z_log_msg_static_create>
     40c:	2c0b      	cmp	r4, #11
     40e:	46cd      	mov	sp, r9
     410:	d1e7      	bne.n	3e2 <button_pressed+0x32>
  }
  /*Important note! 
  Code in ISR runs at a high priority, therefore, it should be written with timing in mind.
  Too lengthy or too complex tasks should not be performed by an ISR, they should be deferred to a thread 
  */
}
     412:	46bd      	mov	sp, r7
     414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     418:	00007314 	.word	0x00007314
     41c:	0000708c 	.word	0x0000708c
     420:	00007343 	.word	0x00007343

00000424 <main>:

static struct gpio_callback button_cb_data;

void main(void)
{
     424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;
	/* STEP 6 - Write some logs */
    int exercise_num=2;
    uint8_t data[] = {0x00, 0x01, 0x02, 0x03,
     428:	4b4f      	ldr	r3, [pc, #316]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
{
     42a:	b08a      	sub	sp, #40	; 0x28
     42c:	af00      	add	r7, sp, #0
    uint8_t data[] = {0x00, 0x01, 0x02, 0x03,
     42e:	463a      	mov	r2, r7
     430:	f103 0508 	add.w	r5, r3, #8
     434:	46b8      	mov	r8, r7
     436:	6818      	ldr	r0, [r3, #0]
     438:	6859      	ldr	r1, [r3, #4]
     43a:	4614      	mov	r4, r2
     43c:	c403      	stmia	r4!, {r0, r1}
     43e:	3308      	adds	r3, #8
     440:	42ab      	cmp	r3, r5
     442:	4622      	mov	r2, r4
     444:	d1f7      	bne.n	436 <main+0x12>
     446:	6818      	ldr	r0, [r3, #0]
     448:	791b      	ldrb	r3, [r3, #4]
     44a:	6020      	str	r0, [r4, #0]
     44c:	7123      	strb	r3, [r4, #4]
                      0x04, 0x05, 0x06, 0x07,
                      'H', 'e', 'l', 'l','o'};
    //Printf-like messages
    LOG_INF("nRF Connect SDK Fundamentals");
     44e:	46e9      	mov	r9, sp
     450:	4b46      	ldr	r3, [pc, #280]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     452:	627b      	str	r3, [r7, #36]	; 0x24
     454:	2602      	movs	r6, #2
     456:	623e      	str	r6, [r7, #32]
     458:	4845      	ldr	r0, [pc, #276]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     45a:	2300      	movs	r3, #0
     45c:	f107 0220 	add.w	r2, r7, #32
     460:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     464:	f001 fbca 	bl	1bfc <z_impl_z_log_msg_static_create>
    LOG_INF("Exercise %d",exercise_num);    
     468:	b088      	sub	sp, #32
     46a:	466c      	mov	r4, sp
     46c:	4b41      	ldr	r3, [pc, #260]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     46e:	4625      	mov	r5, r4
     470:	f04f 0a03 	mov.w	sl, #3
     474:	e9c4 3605 	strd	r3, r6, [r4, #20]
     478:	f845 af10 	str.w	sl, [r5, #16]!
     47c:	483c      	ldr	r0, [pc, #240]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     47e:	2300      	movs	r3, #0
     480:	462a      	mov	r2, r5
     482:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     486:	f001 fbb9 	bl	1bfc <z_impl_z_log_msg_static_create>
     48a:	46cd      	mov	sp, r9
    LOG_DBG("A log message in debug level");
     48c:	46a5      	mov	sp, r4
     48e:	4b3a      	ldr	r3, [pc, #232]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     490:	6163      	str	r3, [r4, #20]
     492:	4b3a      	ldr	r3, [pc, #232]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     494:	61a3      	str	r3, [r4, #24]
     496:	f8c4 a010 	str.w	sl, [r4, #16]
     49a:	4835      	ldr	r0, [pc, #212]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     49c:	2300      	movs	r3, #0
     49e:	462a      	mov	r2, r5
     4a0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     4a4:	f001 fbaa 	bl	1bfc <z_impl_z_log_msg_static_create>
     4a8:	46cd      	mov	sp, r9
    LOG_WRN("A log message in warning level!");
     4aa:	4b35      	ldr	r3, [pc, #212]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     4ac:	e9c7 6308 	strd	r6, r3, [r7, #32]
     4b0:	482f      	ldr	r0, [pc, #188]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     4b2:	2300      	movs	r3, #0
     4b4:	f107 0220 	add.w	r2, r7, #32
     4b8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
     4bc:	f001 fb9e 	bl	1bfc <z_impl_z_log_msg_static_create>
    LOG_ERR("A log message in Error level!");
     4c0:	4b30      	ldr	r3, [pc, #192]	; (584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>)
     4c2:	e9c7 6308 	strd	r6, r3, [r7, #32]
     4c6:	482a      	ldr	r0, [pc, #168]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     4c8:	2300      	movs	r3, #0
     4ca:	f107 0220 	add.w	r2, r7, #32
     4ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     4d2:	f001 fb93 	bl	1bfc <z_impl_z_log_msg_static_create>
    //Hexdump some data
    LOG_HEXDUMP_INF(data, sizeof(data),"Sample Data!"); 
     4d6:	46a5      	mov	sp, r4
     4d8:	4b2b      	ldr	r3, [pc, #172]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     4da:	6163      	str	r3, [r4, #20]
     4dc:	4b2b      	ldr	r3, [pc, #172]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
     4de:	61a3      	str	r3, [r4, #24]
     4e0:	f44f 7300 	mov.w	r3, #512	; 0x200
     4e4:	83a3      	strh	r3, [r4, #28]
     4e6:	4b2a      	ldr	r3, [pc, #168]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     4e8:	6123      	str	r3, [r4, #16]
     4ea:	492a      	ldr	r1, [pc, #168]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
     4ec:	4820      	ldr	r0, [pc, #128]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     4ee:	4643      	mov	r3, r8
     4f0:	462a      	mov	r2, r5
     4f2:	f001 fb83 	bl	1bfc <z_impl_z_log_msg_static_create>
     4f6:	46cd      	mov	sp, r9
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     4f8:	4c27      	ldr	r4, [pc, #156]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     4fa:	4620      	mov	r0, r4
     4fc:	f006 fb7e 	bl	6bfc <z_device_is_ready>

	/* Only checking one since led.port and button.port point to the same device, &gpio0 */
	if (!device_is_ready(led.port)) {
     500:	b370      	cbz	r0, 560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
		return;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     502:	4826      	ldr	r0, [pc, #152]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     504:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     508:	f005 fc0e 	bl	5d28 <gpio_pin_configure_dt>
	if (ret < 0) {
     50c:	2800      	cmp	r0, #0
     50e:	db27      	blt.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
		return;
	}

	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     510:	4823      	ldr	r0, [pc, #140]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     512:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     516:	f005 fc07 	bl	5d28 <gpio_pin_configure_dt>
	if (ret < 0) {
     51a:	2800      	cmp	r0, #0
     51c:	db20      	blt.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     51e:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
     520:	68a5      	ldr	r5, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     522:	681b      	ldr	r3, [r3, #0]
					     GPIO_INT_ENABLE_DISABLE_ONLY));
#else
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));
#endif /* CONFIG_GPIO_ENABLE_DISABLE_INTERRUPT */

	return api->pin_interrupt_configure(port, pin, mode, trig);
     524:	69ae      	ldr	r6, [r5, #24]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     526:	f413 5f00 	tst.w	r3, #8192	; 0x2000
	return api->pin_interrupt_configure(port, pin, mode, trig);
     52a:	bf14      	ite	ne
     52c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     530:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     534:	210d      	movs	r1, #13
     536:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     53a:	4620      	mov	r0, r4
     53c:	47b0      	blx	r6
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     53e:	4919      	ldr	r1, [pc, #100]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     540:	4b19      	ldr	r3, [pc, #100]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     542:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     548:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     54a:	69eb      	ldr	r3, [r5, #28]
     54c:	b113      	cbz	r3, 554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     54e:	2201      	movs	r2, #1
     550:	4620      	mov	r0, r4
     552:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     554:	2100      	movs	r1, #0
     556:	f04f 7096 	mov.w	r0, #19660800	; 0x12c0000
     55a:	f005 f963 	bl	5824 <z_impl_k_sleep>
     55e:	e7f9      	b.n	554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>

	gpio_add_callback(button.port, &button_cb_data);	
	while (1) {
        k_msleep(SLEEP_TIME_MS); 
	}
     560:	3728      	adds	r7, #40	; 0x28
     562:	46bd      	mov	sp, r7
     564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     568:	00007130 	.word	0x00007130
     56c:	0000735e 	.word	0x0000735e
     570:	0000708c 	.word	0x0000708c
     574:	0000737b 	.word	0x0000737b
     578:	00007387 	.word	0x00007387
     57c:	000073f6 	.word	0x000073f6
     580:	000073a8 	.word	0x000073a8
     584:	000073c8 	.word	0x000073c8
     588:	000073e6 	.word	0x000073e6
     58c:	000073e9 	.word	0x000073e9
     590:	01000003 	.word	0x01000003
     594:	00d01cc0 	.word	0x00d01cc0
     598:	00006f10 	.word	0x00006f10
     59c:	00007148 	.word	0x00007148
     5a0:	00007150 	.word	0x00007150
     5a4:	20000700 	.word	0x20000700
     5a8:	000003b1 	.word	0x000003b1

000005ac <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5b0:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5b2:	0784      	lsls	r4, r0, #30
{
     5b4:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5b6:	f002 0304 	and.w	r3, r2, #4
     5ba:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5bc:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     5c0:	f103 0301 	add.w	r3, r3, #1
     5c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     5c8:	9203      	str	r2, [sp, #12]
     5ca:	4605      	mov	r5, r0
     5cc:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5ce:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     5d0:	f040 81be 	bne.w	950 <__z_interrupt_stack_SIZEOF+0x110>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     5d4:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5d6:	b130      	cbz	r0, 5e6 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     5d8:	2907      	cmp	r1, #7
     5da:	d809      	bhi.n	5f0 <cbvprintf_package+0x44>
		return -ENOSPC;
     5dc:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     5e0:	b011      	add	sp, #68	; 0x44
     5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     5e6:	f001 0607 	and.w	r6, r1, #7
     5ea:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     5ec:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     5f0:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     5f2:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     5f6:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     5f8:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     5fc:	f04f 33ff 	mov.w	r3, #4294967295
     600:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     602:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     606:	464f      	mov	r7, r9
	bool parsing = false;
     608:	46cb      	mov	fp, r9
	size = sizeof(char *);
     60a:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     60c:	b10d      	cbz	r5, 612 <cbvprintf_package+0x66>
				*(const char **)buf = s;
     60e:	9a00      	ldr	r2, [sp, #0]
     610:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     612:	9805      	ldr	r0, [sp, #20]
     614:	2800      	cmp	r0, #0
     616:	f300 80eb 	bgt.w	7f0 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     61a:	489a      	ldr	r0, [pc, #616]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     61c:	9a00      	ldr	r2, [sp, #0]
     61e:	4282      	cmp	r2, r0
     620:	d303      	bcc.n	62a <cbvprintf_package+0x7e>
     622:	4899      	ldr	r0, [pc, #612]	; (888 <__z_interrupt_stack_SIZEOF+0x48>)
     624:	4282      	cmp	r2, r0
     626:	f0c0 80e3 	bcc.w	7f0 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     62a:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     62c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     630:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     632:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     636:	f100 8106 	bmi.w	846 <__z_interrupt_stack_SIZEOF+0x6>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     63a:	2f0f      	cmp	r7, #15
     63c:	f200 80b4 	bhi.w	7a8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     640:	2d00      	cmp	r5, #0
     642:	f000 8108 	beq.w	856 <__z_interrupt_stack_SIZEOF+0x16>
					str_ptr_pos[s_idx] = s_ptr_idx;
     646:	f107 0240 	add.w	r2, r7, #64	; 0x40
     64a:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     64e:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     650:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     654:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     658:	9804      	ldr	r0, [sp, #16]
     65a:	3001      	adds	r0, #1
     65c:	9004      	str	r0, [sp, #16]
     65e:	e0ea      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
			switch (*fmt) {
     660:	287a      	cmp	r0, #122	; 0x7a
     662:	d860      	bhi.n	726 <cbvprintf_package+0x17a>
     664:	284b      	cmp	r0, #75	; 0x4b
     666:	d80e      	bhi.n	686 <cbvprintf_package+0xda>
     668:	2847      	cmp	r0, #71	; 0x47
     66a:	d85c      	bhi.n	726 <cbvprintf_package+0x17a>
     66c:	2829      	cmp	r0, #41	; 0x29
     66e:	d82f      	bhi.n	6d0 <cbvprintf_package+0x124>
     670:	2825      	cmp	r0, #37	; 0x25
     672:	d055      	beq.n	720 <cbvprintf_package+0x174>
     674:	d857      	bhi.n	726 <cbvprintf_package+0x17a>
     676:	2820      	cmp	r0, #32
     678:	d07d      	beq.n	776 <cbvprintf_package+0x1ca>
     67a:	3823      	subs	r0, #35	; 0x23
     67c:	f1d0 0b00 	rsbs	fp, r0, #0
     680:	eb4b 0b00 	adc.w	fp, fp, r0
     684:	e077      	b.n	776 <cbvprintf_package+0x1ca>
     686:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     68a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     68e:	d84a      	bhi.n	726 <cbvprintf_package+0x17a>
     690:	e8df f00c 	tbb	[pc, ip]
     694:	49494971 	.word	0x49494971
     698:	49494949 	.word	0x49494949
     69c:	49494949 	.word	0x49494949
     6a0:	4949494c 	.word	0x4949494c
     6a4:	49494949 	.word	0x49494949
     6a8:	4c495a49 	.word	0x4c495a49
     6ac:	5a5a5a4c 	.word	0x5a5a5a4c
     6b0:	496e4c71 	.word	0x496e4c71
     6b4:	4c184971 	.word	0x4c184971
     6b8:	83494918 	.word	0x83494918
     6bc:	49494c80 	.word	0x49494c80
     6c0:	494c      	.short	0x494c
     6c2:	80          	.byte	0x80
     6c3:	00          	.byte	0x00
     6c4:	2000      	movs	r0, #0
     6c6:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     6ca:	f04f 0a04 	mov.w	sl, #4
     6ce:	e039      	b.n	744 <cbvprintf_package+0x198>
			switch (*fmt) {
     6d0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     6d4:	fa5f fc8c 	uxtb.w	ip, ip
     6d8:	2201      	movs	r2, #1
     6da:	fa02 fc0c 	lsl.w	ip, r2, ip
     6de:	ea1c 0f0e 	tst.w	ip, lr
     6e2:	d148      	bne.n	776 <cbvprintf_package+0x1ca>
     6e4:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     6e8:	d12e      	bne.n	748 <cbvprintf_package+0x19c>
     6ea:	ea1c 0b02 	ands.w	fp, ip, r2
     6ee:	d042      	beq.n	776 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
     6f0:	3c01      	subs	r4, #1
     6f2:	4454      	add	r4, sl
     6f4:	f1ca 0c00 	rsb	ip, sl, #0
     6f8:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     6fc:	2d00      	cmp	r5, #0
     6fe:	d061      	beq.n	7c4 <cbvprintf_package+0x218>
     700:	eba3 0c05 	sub.w	ip, r3, r5
     704:	44a4      	add	ip, r4
     706:	45b4      	cmp	ip, r6
     708:	f63f af68 	bhi.w	5dc <cbvprintf_package+0x30>
		if (is_str_arg) {
     70c:	2800      	cmp	r0, #0
     70e:	d168      	bne.n	7e2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     710:	2b04      	cmp	r3, #4
     712:	d147      	bne.n	7a4 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
     714:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     718:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     71a:	3404      	adds	r4, #4
     71c:	2304      	movs	r3, #4
     71e:	e02a      	b.n	776 <cbvprintf_package+0x1ca>
				arg_idx--;
     720:	9a01      	ldr	r2, [sp, #4]
     722:	3a01      	subs	r2, #1
     724:	9201      	str	r2, [sp, #4]
				parsing = false;
     726:	f04f 0b00 	mov.w	fp, #0
				continue;
     72a:	e024      	b.n	776 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
     72c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     730:	286c      	cmp	r0, #108	; 0x6c
     732:	d134      	bne.n	79e <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
     734:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     738:	2000      	movs	r0, #0
     73a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     73c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     73e:	d1c4      	bne.n	6ca <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
     740:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     744:	4653      	mov	r3, sl
     746:	e7d3      	b.n	6f0 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
     748:	f108 0807 	add.w	r8, r8, #7
     74c:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     750:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     752:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     756:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     75a:	b135      	cbz	r5, 76a <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
     75c:	9806      	ldr	r0, [sp, #24]
     75e:	4420      	add	r0, r4
     760:	42b0      	cmp	r0, r6
     762:	f63f af3b 	bhi.w	5dc <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
     766:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     76a:	3408      	adds	r4, #8
				parsing = false;
     76c:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     770:	f04f 0a08 	mov.w	sl, #8
     774:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     776:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     77a:	2800      	cmp	r0, #0
     77c:	d078      	beq.n	870 <__z_interrupt_stack_SIZEOF+0x30>
			if (!parsing) {
     77e:	f1bb 0f00 	cmp.w	fp, #0
     782:	f47f af6d 	bne.w	660 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
     786:	2825      	cmp	r0, #37	; 0x25
     788:	d1f5      	bne.n	776 <cbvprintf_package+0x1ca>
					arg_idx++;
     78a:	9b01      	ldr	r3, [sp, #4]
     78c:	3301      	adds	r3, #1
     78e:	9301      	str	r3, [sp, #4]
					parsing = true;
     790:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     794:	f04f 0a04 	mov.w	sl, #4
     798:	e7ec      	b.n	774 <cbvprintf_package+0x1c8>
			switch (*fmt) {
     79a:	4658      	mov	r0, fp
     79c:	e793      	b.n	6c6 <cbvprintf_package+0x11a>
     79e:	2000      	movs	r0, #0
				parsing = false;
     7a0:	4683      	mov	fp, r0
     7a2:	e7a5      	b.n	6f0 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
     7a4:	2b08      	cmp	r3, #8
     7a6:	d002      	beq.n	7ae <cbvprintf_package+0x202>
					return -EINVAL;
     7a8:	f06f 0015 	mvn.w	r0, #21
     7ac:	e718      	b.n	5e0 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
     7ae:	f108 0807 	add.w	r8, r8, #7
     7b2:	f028 0807 	bic.w	r8, r8, #7
     7b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     7ba:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     7be:	3408      	adds	r4, #8
     7c0:	2308      	movs	r3, #8
     7c2:	e7d8      	b.n	776 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
     7c4:	b968      	cbnz	r0, 7e2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     7c6:	2b04      	cmp	r3, #4
     7c8:	d102      	bne.n	7d0 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
     7ca:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     7ce:	e7a4      	b.n	71a <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
     7d0:	2b08      	cmp	r3, #8
     7d2:	d1e9      	bne.n	7a8 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
     7d4:	f108 0807 	add.w	r8, r8, #7
     7d8:	f028 0807 	bic.w	r8, r8, #7
     7dc:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     7e0:	e7ed      	b.n	7be <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7e2:	9a05      	ldr	r2, [sp, #20]
     7e4:	3a01      	subs	r2, #1
     7e6:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     7e8:	f858 2b04 	ldr.w	r2, [r8], #4
     7ec:	9200      	str	r2, [sp, #0]
     7ee:	e70d      	b.n	60c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
     7f0:	9a03      	ldr	r2, [sp, #12]
     7f2:	0790      	lsls	r0, r2, #30
     7f4:	d520      	bpl.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     7f6:	eba4 0e05 	sub.w	lr, r4, r5
     7fa:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7fe:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     802:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     806:	d2cf      	bcs.n	7a8 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     808:	2f0f      	cmp	r7, #15
     80a:	d8cd      	bhi.n	7a8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     80c:	b1f5      	cbz	r5, 84c <__z_interrupt_stack_SIZEOF+0xc>
					str_ptr_pos[s_idx] = s_ptr_idx;
     80e:	f107 0240 	add.w	r2, r7, #64	; 0x40
     812:	eb0d 0e02 	add.w	lr, sp, r2
     816:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     818:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     81a:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     81e:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     822:	f1bc 0f00 	cmp.w	ip, #0
     826:	f43f af17 	beq.w	658 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     82a:	f060 007f 	orn	r0, r0, #127	; 0x7f
     82e:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     832:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     836:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     838:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     83c:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     83e:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     840:	f64f 7eda 	movw	lr, #65498	; 0xffda
     844:	e797      	b.n	776 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     846:	f04f 0c00 	mov.w	ip, #0
     84a:	e7da      	b.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
				} else if (is_ro) {
     84c:	f1bc 0f00 	cmp.w	ip, #0
     850:	d001      	beq.n	856 <__z_interrupt_stack_SIZEOF+0x16>
					len += 1;
     852:	3601      	adds	r6, #1
     854:	e7ef      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
				} else if (rws_pos_en) {
     856:	9802      	ldr	r0, [sp, #8]
					len += 2;
     858:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     85a:	2800      	cmp	r0, #0
     85c:	d1eb      	bne.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
					len += strlen(s) + 1 + 1;
     85e:	9800      	ldr	r0, [sp, #0]
     860:	e9cd 3106 	strd	r3, r1, [sp, #24]
     864:	f005 ff63 	bl	672e <strlen>
     868:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     86c:	4406      	add	r6, r0
     86e:	e7e2      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
	if (BUF_OFFSET / sizeof(int) > 255) {
     870:	1b63      	subs	r3, r4, r5
     872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     876:	d297      	bcs.n	7a8 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
     878:	b945      	cbnz	r5, 88c <__z_interrupt_stack_SIZEOF+0x4c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     87a:	f1a6 0408 	sub.w	r4, r6, #8
     87e:	18e0      	adds	r0, r4, r3
     880:	e6ae      	b.n	5e0 <cbvprintf_package+0x34>
     882:	bf00      	nop
     884:	00006eb8 	.word	0x00006eb8
     888:	00007be4 	.word	0x00007be4
	if (rws_pos_en) {
     88c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     88e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     890:	089b      	lsrs	r3, r3, #2
     892:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     894:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     898:	b1c2      	cbz	r2, 8cc <__z_interrupt_stack_SIZEOF+0x8c>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     89a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     89c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     8a0:	f1b9 0f00 	cmp.w	r9, #0
     8a4:	d005      	beq.n	8b2 <__z_interrupt_stack_SIZEOF+0x72>
     8a6:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     8a8:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
     8aa:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     8ae:	4297      	cmp	r7, r2
     8b0:	d10e      	bne.n	8d0 <__z_interrupt_stack_SIZEOF+0x90>
		if (BUF_OFFSET + 1 + size > len) {
     8b2:	f1c5 0301 	rsb	r3, r5, #1
     8b6:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
     8ba:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     8be:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     8c0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
     8c4:	4557      	cmp	r7, sl
     8c6:	d112      	bne.n	8ee <__z_interrupt_stack_SIZEOF+0xae>
	return BUF_OFFSET;
     8c8:	1b60      	subs	r0, r4, r5
     8ca:	e689      	b.n	5e0 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     8cc:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     8ce:	e7e5      	b.n	89c <__z_interrupt_stack_SIZEOF+0x5c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     8d0:	f810 3b01 	ldrb.w	r3, [r0], #1
     8d4:	0619      	lsls	r1, r3, #24
     8d6:	d508      	bpl.n	8ea <__z_interrupt_stack_SIZEOF+0xaa>
			if (BUF_OFFSET + 1 > len) {
     8d8:	eb04 0e0c 	add.w	lr, r4, ip
     8dc:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     8e2:	f63f ae7b 	bhi.w	5dc <cbvprintf_package+0x30>
			*buf++ = pos;
     8e6:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
     8ea:	3201      	adds	r2, #1
     8ec:	e7df      	b.n	8ae <__z_interrupt_stack_SIZEOF+0x6e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     8ee:	f1b9 0f00 	cmp.w	r9, #0
     8f2:	d003      	beq.n	8fc <__z_interrupt_stack_SIZEOF+0xbc>
     8f4:	f998 2000 	ldrsb.w	r2, [r8]
     8f8:	2a00      	cmp	r2, #0
     8fa:	db17      	blt.n	92c <__z_interrupt_stack_SIZEOF+0xec>
		if (rws_pos_en) {
     8fc:	9b02      	ldr	r3, [sp, #8]
     8fe:	b1d3      	cbz	r3, 936 <__z_interrupt_stack_SIZEOF+0xf6>
			*buf++ = str_ptr_arg[i];
     900:	f81a 200b 	ldrb.w	r2, [sl, fp]
     904:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
     908:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
     90a:	9b01      	ldr	r3, [sp, #4]
     90c:	1898      	adds	r0, r3, r2
     90e:	4420      	add	r0, r4
     910:	42b0      	cmp	r0, r6
     912:	f63f ae63 	bhi.w	5dc <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
     916:	f898 0000 	ldrb.w	r0, [r8]
     91a:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
     91e:	9900      	ldr	r1, [sp, #0]
     920:	9203      	str	r2, [sp, #12]
     922:	4620      	mov	r0, r4
     924:	f005 ff13 	bl	674e <memcpy>
		buf += size;
     928:	9a03      	ldr	r2, [sp, #12]
     92a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     92c:	f10a 0a01 	add.w	sl, sl, #1
     930:	f108 0801 	add.w	r8, r8, #1
     934:	e7c6      	b.n	8c4 <__z_interrupt_stack_SIZEOF+0x84>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     936:	f898 2000 	ldrb.w	r2, [r8]
     93a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
     93e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     940:	9b02      	ldr	r3, [sp, #8]
     942:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     946:	9800      	ldr	r0, [sp, #0]
     948:	f005 fef1 	bl	672e <strlen>
     94c:	1c42      	adds	r2, r0, #1
     94e:	e7dc      	b.n	90a <__z_interrupt_stack_SIZEOF+0xca>
		return -EFAULT;
     950:	f06f 000d 	mvn.w	r0, #13
     954:	e644      	b.n	5e0 <cbvprintf_package+0x34>
     956:	bf00      	nop

00000958 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     95c:	b095      	sub	sp, #84	; 0x54
     95e:	af00      	add	r7, sp, #0
     960:	4604      	mov	r4, r0
     962:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     966:	61bb      	str	r3, [r7, #24]
     968:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     96c:	627a      	str	r2, [r7, #36]	; 0x24
     96e:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     970:	6239      	str	r1, [r7, #32]
     972:	b951      	cbnz	r1, 98a <cbprintf_package_convert+0x32>
	buf += ros_nbr;
     974:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     976:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     978:	7880      	ldrb	r0, [r0, #2]
     97a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     97e:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
     980:	6a3b      	ldr	r3, [r7, #32]
     982:	429e      	cmp	r6, r3
     984:	d81a      	bhi.n	9bc <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
     986:	1b03      	subs	r3, r0, r4
     988:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     98a:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     98e:	78e3      	ldrb	r3, [r4, #3]
     990:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
     992:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
     994:	f1ba 0f00 	cmp.w	sl, #0
     998:	d002      	beq.n	9a0 <cbprintf_package_convert+0x48>
     99a:	f01b 0f01 	tst.w	fp, #1
     99e:	d117      	bne.n	9d0 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
     9a0:	697b      	ldr	r3, [r7, #20]
     9a2:	bb5b      	cbnz	r3, 9fc <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     9a6:	b11b      	cbz	r3, 9b0 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
     9a8:	69ba      	ldr	r2, [r7, #24]
     9aa:	6a39      	ldr	r1, [r7, #32]
     9ac:	4620      	mov	r0, r4
     9ae:	4798      	blx	r3
		}

		return in_len;
     9b0:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     9b2:	4628      	mov	r0, r5
     9b4:	3754      	adds	r7, #84	; 0x54
     9b6:	46bd      	mov	sp, r7
     9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     9bc:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
     9be:	4628      	mov	r0, r5
     9c0:	f005 feb5 	bl	672e <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
     9c4:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
     9c6:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
     9c8:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
     9ca:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
     9cc:	623b      	str	r3, [r7, #32]
     9ce:	e7d7      	b.n	980 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
     9d0:	f894 8000 	ldrb.w	r8, [r4]
     9d4:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     9d6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     9da:	ea4f 0288 	mov.w	r2, r8, lsl #2
     9de:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     9e0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     9e4:	2b00      	cmp	r3, #0
     9e6:	f040 8101 	bne.w	bec <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
     9ea:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     9ec:	46c1      	mov	r9, r8
     9ee:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
     9f2:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     9f4:	454b      	cmp	r3, r9
     9f6:	d14e      	bne.n	a96 <cbprintf_package_convert+0x13e>
     9f8:	44d0      	add	r8, sl
     9fa:	e013      	b.n	a24 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
     9fc:	f01b 0f02 	tst.w	fp, #2
     a00:	d0d0      	beq.n	9a4 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
     a02:	f894 8000 	ldrb.w	r8, [r4]
     a06:	ea4f 0388 	mov.w	r3, r8, lsl #2
     a0a:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     a0c:	6863      	ldr	r3, [r4, #4]
     a0e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
     a12:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     a16:	2b00      	cmp	r3, #0
     a18:	d178      	bne.n	b0c <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
     a1a:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     a1c:	f1ba 0f00 	cmp.w	sl, #0
     a20:	d14e      	bne.n	ac0 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
     a22:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
     a24:	f01b 0f05 	tst.w	fp, #5
     a28:	bf0c      	ite	eq
     a2a:	2302      	moveq	r3, #2
     a2c:	2301      	movne	r3, #1
     a2e:	627b      	str	r3, [r7, #36]	; 0x24
     a30:	697b      	ldr	r3, [r7, #20]
     a32:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     a36:	f00b 0302 	and.w	r3, fp, #2
     a3a:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
     a3c:	45d0      	cmp	r8, sl
     a3e:	d0b8      	beq.n	9b2 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
     a40:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
     a44:	f818 3c01 	ldrb.w	r3, [r8, #-1]
     a48:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
     a4c:	4bac      	ldr	r3, [pc, #688]	; (d00 <cbprintf_package_convert+0x3a8>)
     a4e:	4599      	cmp	r9, r3
     a50:	d302      	bcc.n	a58 <cbprintf_package_convert+0x100>
     a52:	4bac      	ldr	r3, [pc, #688]	; (d04 <cbprintf_package_convert+0x3ac>)
     a54:	4599      	cmp	r9, r3
     a56:	d339      	bcc.n	acc <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     a58:	693b      	ldr	r3, [r7, #16]
     a5a:	2b00      	cmp	r3, #0
     a5c:	d043      	beq.n	ae6 <cbprintf_package_convert+0x18e>
     a5e:	69f8      	ldr	r0, [r7, #28]
     a60:	f005 f9b2 	bl	5dc8 <is_ptr>
     a64:	2800      	cmp	r0, #0
     a66:	d03e      	beq.n	ae6 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     a68:	46e9      	mov	r9, sp
     a6a:	b08a      	sub	sp, #40	; 0x28
     a6c:	466a      	mov	r2, sp
     a6e:	4ba6      	ldr	r3, [pc, #664]	; (d08 <cbprintf_package_convert+0x3b0>)
     a70:	6153      	str	r3, [r2, #20]
     a72:	69fb      	ldr	r3, [r7, #28]
     a74:	e9c2 3106 	strd	r3, r1, [r2, #24]
     a78:	f44f 7300 	mov.w	r3, #512	; 0x200
     a7c:	8413      	strh	r3, [r2, #32]
     a7e:	4ba3      	ldr	r3, [pc, #652]	; (d0c <cbprintf_package_convert+0x3b4>)
     a80:	f842 3f10 	str.w	r3, [r2, #16]!
     a84:	48a2      	ldr	r0, [pc, #648]	; (d10 <cbprintf_package_convert+0x3b8>)
     a86:	2300      	movs	r3, #0
     a88:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     a8c:	f001 f8b6 	bl	1bfc <z_impl_z_log_msg_static_create>
				out_len -= 2;
     a90:	3d02      	subs	r5, #2
     a92:	46cd      	mov	sp, r9
				continue;
     a94:	e7d2      	b.n	a3c <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
     a96:	f819 2b01 	ldrb.w	r2, [r9], #1
     a9a:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     a9c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     aa0:	f005 fe45 	bl	672e <strlen>
				if (strl && strl_cnt < strl_len) {
     aa4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     aa8:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     aaa:	b13a      	cbz	r2, abc <cbprintf_package_convert+0x164>
     aac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     ab0:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     ab2:	bf3e      	ittt	cc
     ab4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     ab6:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     aba:	3601      	addcc	r6, #1
				out_len += len;
     abc:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     abe:	e799      	b.n	9f4 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     ac0:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     ac4:	bf1c      	itt	ne
     ac6:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     ac8:	44d0      	addne	r8, sl
     aca:	e7ab      	b.n	a24 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     acc:	693b      	ldr	r3, [r7, #16]
     ace:	b123      	cbz	r3, ada <cbprintf_package_convert+0x182>
     ad0:	69f8      	ldr	r0, [r7, #28]
     ad2:	f005 f979 	bl	5dc8 <is_ptr>
     ad6:	2800      	cmp	r0, #0
     ad8:	d1c6      	bne.n	a68 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     ada:	f01b 0f01 	tst.w	fp, #1
     ade:	d105      	bne.n	aec <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
     ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ae2:	1aed      	subs	r5, r5, r3
     ae4:	e7aa      	b.n	a3c <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     ae6:	6a3b      	ldr	r3, [r7, #32]
     ae8:	2b00      	cmp	r3, #0
     aea:	d0a7      	beq.n	a3c <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
     aec:	4648      	mov	r0, r9
     aee:	f005 fe1e 	bl	672e <strlen>
				if (strl && strl_cnt < strl_len) {
     af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     af4:	b143      	cbz	r3, b08 <cbprintf_package_convert+0x1b0>
     af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     afa:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
     afc:	bf3f      	itttt	cc
     afe:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
     b00:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
     b02:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
     b06:	3601      	addcc	r6, #1
				out_len += (len - 1);
     b08:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
     b0a:	e797      	b.n	a3c <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     b0c:	f1ba 0f00 	cmp.w	sl, #0
     b10:	d071      	beq.n	bf6 <cbprintf_package_convert+0x29e>
     b12:	f01b 0604 	ands.w	r6, fp, #4
     b16:	d071      	beq.n	bfc <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
     b18:	46d1      	mov	r9, sl
		scpy_cnt = 0;
     b1a:	2600      	movs	r6, #0
		dst = keep_str_pos;
     b1c:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
     b20:	4652      	mov	r2, sl
     b22:	4641      	mov	r1, r8
     b24:	f005 fe13 	bl	674e <memcpy>
	str_pos += ros_nbr;
     b28:	697b      	ldr	r3, [r7, #20]
     b2a:	005b      	lsls	r3, r3, #1
     b2c:	60bb      	str	r3, [r7, #8]
     b2e:	697b      	ldr	r3, [r7, #20]
     b30:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
     b32:	eb08 0343 	add.w	r3, r8, r3, lsl #1
     b36:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     b38:	f00b 0302 	and.w	r3, fp, #2
     b3c:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     b3e:	697b      	ldr	r3, [r7, #20]
     b40:	4598      	cmp	r8, r3
     b42:	d15d      	bne.n	c00 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
     b44:	7823      	ldrb	r3, [r4, #0]
     b46:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     b48:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     b4a:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     b4e:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     b52:	bf0c      	ite	eq
     b54:	ea4f 0159 	moveq.w	r1, r9, lsr #1
     b58:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     b5a:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     b5e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     b60:	f040 809d 	bne.w	c9e <cbprintf_package_convert+0x346>
     b64:	f01b 0f04 	tst.w	fp, #4
     b68:	bf14      	ite	ne
     b6a:	4648      	movne	r0, r9
     b6c:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     b6e:	f894 b002 	ldrb.w	fp, [r4, #2]
     b72:	f894 8003 	ldrb.w	r8, [r4, #3]
     b76:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
     b78:	7062      	strb	r2, [r4, #1]
     b7a:	70a0      	strb	r0, [r4, #2]
     b7c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     b7e:	69ba      	ldr	r2, [r7, #24]
     b80:	68f9      	ldr	r1, [r7, #12]
     b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b84:	4620      	mov	r0, r4
     b86:	4798      	blx	r3
	if (rv < 0) {
     b88:	1e05      	subs	r5, r0, #0
     b8a:	f6ff af12 	blt.w	9b2 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
     b8e:	69fb      	ldr	r3, [r7, #28]
     b90:	7023      	strb	r3, [r4, #0]
     b92:	693b      	ldr	r3, [r7, #16]
     b94:	7063      	strb	r3, [r4, #1]
     b96:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     b9a:	69ba      	ldr	r2, [r7, #24]
     b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
     b9e:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     ba2:	4649      	mov	r1, r9
     ba4:	f107 0040 	add.w	r0, r7, #64	; 0x40
     ba8:	4798      	blx	r3
	if (rv < 0) {
     baa:	f1b0 0800 	subs.w	r8, r0, #0
     bae:	f2c0 80a3 	blt.w	cf8 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     bb2:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
     bb4:	69ba      	ldr	r2, [r7, #24]
     bb6:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     bb8:	eba3 010a 	sub.w	r1, r3, sl
     bbc:	68fb      	ldr	r3, [r7, #12]
     bbe:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
     bc0:	68bb      	ldr	r3, [r7, #8]
     bc2:	1ac9      	subs	r1, r1, r3
     bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bc6:	4798      	blx	r3
	if (rv < 0) {
     bc8:	2800      	cmp	r0, #0
     bca:	f2c0 8097 	blt.w	cfc <cbprintf_package_convert+0x3a4>
	out_len += rv;
     bce:	44a8      	add	r8, r5
	out_len += rv;
     bd0:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     bd4:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
     bd8:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     bdc:	45b3      	cmp	fp, r6
     bde:	d360      	bcc.n	ca2 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
     be0:	2100      	movs	r1, #0
     be2:	69ba      	ldr	r2, [r7, #24]
     be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     be6:	4608      	mov	r0, r1
     be8:	4798      	blx	r3
	return out_len;
     bea:	e6e2      	b.n	9b2 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
     bec:	f04f 0900 	mov.w	r9, #0
     bf0:	f107 0030 	add.w	r0, r7, #48	; 0x30
     bf4:	e794      	b.n	b20 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
     bf6:	4656      	mov	r6, sl
		keep_cnt = 0;
     bf8:	46d1      	mov	r9, sl
     bfa:	e795      	b.n	b28 <cbprintf_package_convert+0x1d0>
     bfc:	46b1      	mov	r9, r6
     bfe:	e793      	b.n	b28 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
     c00:	f818 1b02 	ldrb.w	r1, [r8], #2
     c04:	4a3e      	ldr	r2, [pc, #248]	; (d00 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
     c06:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
     c0a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
     c0e:	4293      	cmp	r3, r2
     c10:	d302      	bcc.n	c18 <cbprintf_package_convert+0x2c0>
     c12:	4a3c      	ldr	r2, [pc, #240]	; (d04 <cbprintf_package_convert+0x3ac>)
     c14:	4293      	cmp	r3, r2
     c16:	d31c      	bcc.n	c52 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     c18:	693b      	ldr	r3, [r7, #16]
     c1a:	b123      	cbz	r3, c26 <cbprintf_package_convert+0x2ce>
     c1c:	69f8      	ldr	r0, [r7, #28]
     c1e:	f005 f8d3 	bl	5dc8 <is_ptr>
     c22:	2800      	cmp	r0, #0
     c24:	d18b      	bne.n	b3e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     c26:	687b      	ldr	r3, [r7, #4]
     c28:	b9f3      	cbnz	r3, c68 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
     c2a:	f109 0228 	add.w	r2, r9, #40	; 0x28
     c2e:	f107 0028 	add.w	r0, r7, #40	; 0x28
     c32:	4402      	add	r2, r0
     c34:	f109 0301 	add.w	r3, r9, #1
     c38:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
     c3c:	f107 0250 	add.w	r2, r7, #80	; 0x50
     c40:	fa52 f383 	uxtab	r3, r2, r3
     c44:	f109 0902 	add.w	r9, r9, #2
     c48:	fa5f f989 	uxtb.w	r9, r9
     c4c:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     c50:	e775      	b.n	b3e <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     c52:	693b      	ldr	r3, [r7, #16]
     c54:	b12b      	cbz	r3, c62 <cbprintf_package_convert+0x30a>
     c56:	69f8      	ldr	r0, [r7, #28]
     c58:	f005 f8b6 	bl	5dc8 <is_ptr>
     c5c:	2800      	cmp	r0, #0
     c5e:	f47f af6e 	bne.w	b3e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     c62:	f01b 0f01 	tst.w	fp, #1
     c66:	d009      	beq.n	c7c <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     c68:	f106 0228 	add.w	r2, r6, #40	; 0x28
     c6c:	f107 0128 	add.w	r1, r7, #40	; 0x28
     c70:	1c73      	adds	r3, r6, #1
     c72:	1856      	adds	r6, r2, r1
     c74:	f806 5c20 	strb.w	r5, [r6, #-32]
     c78:	b2de      	uxtb	r6, r3
     c7a:	e760      	b.n	b3e <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     c7c:	f01b 0f04 	tst.w	fp, #4
     c80:	f43f af5d 	beq.w	b3e <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
     c84:	f109 0228 	add.w	r2, r9, #40	; 0x28
     c88:	f107 0128 	add.w	r1, r7, #40	; 0x28
     c8c:	f109 0301 	add.w	r3, r9, #1
     c90:	eb02 0901 	add.w	r9, r2, r1
     c94:	f809 5c10 	strb.w	r5, [r9, #-16]
     c98:	fa5f f983 	uxtb.w	r9, r3
     c9c:	e74f      	b.n	b3e <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     c9e:	2000      	movs	r0, #0
     ca0:	e765      	b.n	b6e <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
     ca2:	f81b 300a 	ldrb.w	r3, [fp, sl]
     ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
     caa:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     cae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     cb0:	b1fb      	cbz	r3, cf2 <cbprintf_package_convert+0x39a>
     cb2:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
     cb6:	69ba      	ldr	r2, [r7, #24]
     cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cba:	2101      	movs	r1, #1
     cbc:	f107 002f 	add.w	r0, r7, #47	; 0x2f
     cc0:	4798      	blx	r3
		if (rv < 0) {
     cc2:	2800      	cmp	r0, #0
     cc4:	db1a      	blt.n	cfc <cbprintf_package_convert+0x3a4>
		out_len += rv;
     cc6:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     cc8:	f1b8 0f00 	cmp.w	r8, #0
     ccc:	d106      	bne.n	cdc <cbprintf_package_convert+0x384>
     cce:	4648      	mov	r0, r9
     cd0:	f005 fd2d 	bl	672e <strlen>
     cd4:	f100 0801 	add.w	r8, r0, #1
     cd8:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     cdc:	69ba      	ldr	r2, [r7, #24]
     cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ce0:	4641      	mov	r1, r8
     ce2:	4648      	mov	r0, r9
     ce4:	4798      	blx	r3
		if (rv < 0) {
     ce6:	2800      	cmp	r0, #0
     ce8:	db08      	blt.n	cfc <cbprintf_package_convert+0x3a4>
		out_len += rv;
     cea:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     cec:	f10b 0b01 	add.w	fp, fp, #1
     cf0:	e774      	b.n	bdc <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
     cf2:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
     cf6:	e7de      	b.n	cb6 <cbprintf_package_convert+0x35e>
     cf8:	4645      	mov	r5, r8
     cfa:	e65a      	b.n	9b2 <cbprintf_package_convert+0x5a>
     cfc:	4605      	mov	r5, r0
     cfe:	e658      	b.n	9b2 <cbprintf_package_convert+0x5a>
     d00:	00006eb8 	.word	0x00006eb8
     d04:	00007be4 	.word	0x00007be4
     d08:	00007407 	.word	0x00007407
     d0c:	01000004 	.word	0x01000004
     d10:	000070ac 	.word	0x000070ac

00000d14 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     d14:	4b01      	ldr	r3, [pc, #4]	; (d1c <__printk_hook_install+0x8>)
     d16:	6018      	str	r0, [r3, #0]
}
     d18:	4770      	bx	lr
     d1a:	bf00      	nop
     d1c:	20000000 	.word	0x20000000

00000d20 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     d20:	b530      	push	{r4, r5, lr}
     d22:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     d24:	2500      	movs	r5, #0
     d26:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     d2a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     d2c:	9500      	str	r5, [sp, #0]
     d2e:	a903      	add	r1, sp, #12
     d30:	4805      	ldr	r0, [pc, #20]	; (d48 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     d32:	9505      	str	r5, [sp, #20]
     d34:	f000 f918 	bl	f68 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     d38:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     d3c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     d3e:	bfb8      	it	lt
     d40:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     d42:	b007      	add	sp, #28
     d44:	bd30      	pop	{r4, r5, pc}
     d46:	bf00      	nop
     d48:	00005e17 	.word	0x00005e17

00000d4c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d50:	8b05      	ldrh	r5, [r0, #24]
{
     d52:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     d54:	0728      	lsls	r0, r5, #28
{
     d56:	4690      	mov	r8, r2
	if (processing) {
     d58:	d411      	bmi.n	d7e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     d5a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d5c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     d60:	f040 80cd 	bne.w	efe <process_event+0x1b2>
			evt = process_recheck(mgr);
     d64:	4620      	mov	r0, r4
     d66:	f005 f88d 	bl	5e84 <process_recheck>
		}

		if (evt == EVT_NOP) {
     d6a:	b178      	cbz	r0, d8c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     d6c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d6e:	8b21      	ldrh	r1, [r4, #24]
     d70:	2804      	cmp	r0, #4
     d72:	d811      	bhi.n	d98 <process_event+0x4c>
     d74:	e8df f000 	tbb	[pc, r0]
     d78:	856d10c3 	.word	0x856d10c3
     d7c:	95          	.byte	0x95
     d7d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     d7e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d80:	bf0c      	ite	eq
     d82:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d86:	f045 0520 	orrne.w	r5, r5, #32
     d8a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d8c:	f388 8811 	msr	BASEPRI, r8
     d90:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d98:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d9c:	45aa      	cmp	sl, r5
     d9e:	f000 80a6 	beq.w	eee <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     da2:	2700      	movs	r7, #0
     da4:	46b9      	mov	r9, r7
     da6:	463e      	mov	r6, r7
     da8:	68a3      	ldr	r3, [r4, #8]
     daa:	2b00      	cmp	r3, #0
     dac:	f000 80bd 	beq.w	f2a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     db0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     db4:	8321      	strh	r1, [r4, #24]
     db6:	f388 8811 	msr	BASEPRI, r8
     dba:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     dbe:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     dc0:	2900      	cmp	r1, #0
     dc2:	f000 80bb 	beq.w	f3c <process_event+0x1f0>
	return node->next;
     dc6:	680d      	ldr	r5, [r1, #0]
     dc8:	2900      	cmp	r1, #0
     dca:	f000 80b7 	beq.w	f3c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     dce:	f8d1 8004 	ldr.w	r8, [r1, #4]
     dd2:	4633      	mov	r3, r6
     dd4:	4652      	mov	r2, sl
     dd6:	4620      	mov	r0, r4
     dd8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     dda:	2d00      	cmp	r5, #0
     ddc:	d076      	beq.n	ecc <process_event+0x180>
     dde:	682b      	ldr	r3, [r5, #0]
     de0:	4629      	mov	r1, r5
     de2:	461d      	mov	r5, r3
     de4:	e7f0      	b.n	dc8 <process_event+0x7c>
     de6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     dea:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     dec:	2a01      	cmp	r2, #1
     dee:	d81b      	bhi.n	e28 <process_event+0xdc>
	list->head = NULL;
     df0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     df2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     df6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     df8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dfa:	b289      	uxth	r1, r1
	list->tail = NULL;
     dfc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     e00:	d109      	bne.n	e16 <process_event+0xca>
     e02:	463b      	mov	r3, r7
     e04:	e003      	b.n	e0e <process_event+0xc2>
				mgr->refs += 1U;
     e06:	8b62      	ldrh	r2, [r4, #26]
     e08:	3201      	adds	r2, #1
     e0a:	8362      	strh	r2, [r4, #26]
	return node->next;
     e0c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     e0e:	2b00      	cmp	r3, #0
     e10:	d1f9      	bne.n	e06 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e12:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     e16:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     e18:	4620      	mov	r0, r4
     e1a:	f005 f833 	bl	5e84 <process_recheck>
     e1e:	2800      	cmp	r0, #0
     e20:	d07b      	beq.n	f1a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e22:	f041 0120 	orr.w	r1, r1, #32
     e26:	e077      	b.n	f18 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     e28:	2b04      	cmp	r3, #4
     e2a:	d10a      	bne.n	e42 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e2c:	f021 0107 	bic.w	r1, r1, #7
     e30:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     e32:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     e34:	4620      	mov	r0, r4
     e36:	f005 f825 	bl	5e84 <process_recheck>
     e3a:	b110      	cbz	r0, e42 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     e3c:	f041 0120 	orr.w	r1, r1, #32
     e40:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e42:	8b21      	ldrh	r1, [r4, #24]
     e44:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     e48:	45aa      	cmp	sl, r5
     e4a:	d050      	beq.n	eee <process_event+0x1a2>
     e4c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     e4e:	46b9      	mov	r9, r7
     e50:	e7aa      	b.n	da8 <process_event+0x5c>
			transit = mgr->transitions->start;
     e52:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e54:	f021 0107 	bic.w	r1, r1, #7
     e58:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     e5c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     e5e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     e62:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     e64:	d12d      	bne.n	ec2 <process_event+0x176>
		    || (transit != NULL)) {
     e66:	f1b9 0f00 	cmp.w	r9, #0
     e6a:	d040      	beq.n	eee <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e70:	8321      	strh	r1, [r4, #24]
     e72:	f388 8811 	msr	BASEPRI, r8
     e76:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     e7a:	493a      	ldr	r1, [pc, #232]	; (f64 <process_event+0x218>)
     e7c:	4620      	mov	r0, r4
     e7e:	47c8      	blx	r9
     e80:	e029      	b.n	ed6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e82:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     e86:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e88:	f041 0104 	orr.w	r1, r1, #4
     e8c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     e8e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     e90:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     e94:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     e96:	d0e6      	beq.n	e66 <process_event+0x11a>
     e98:	2700      	movs	r7, #0
		res = 0;
     e9a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e9c:	f04f 0a04 	mov.w	sl, #4
     ea0:	e782      	b.n	da8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ea2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     ea6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ea8:	f041 0105 	orr.w	r1, r1, #5
     eac:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     eae:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     eb0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     eb4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     eb6:	d0d6      	beq.n	e66 <process_event+0x11a>
     eb8:	2700      	movs	r7, #0
		res = 0;
     eba:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     ebc:	f04f 0a05 	mov.w	sl, #5
     ec0:	e772      	b.n	da8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     ec2:	2700      	movs	r7, #0
		res = 0;
     ec4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     ec6:	f04f 0a06 	mov.w	sl, #6
     eca:	e76d      	b.n	da8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ecc:	462b      	mov	r3, r5
     ece:	e787      	b.n	de0 <process_event+0x94>
			if (transit != NULL) {
     ed0:	f1b9 0f00 	cmp.w	r9, #0
     ed4:	d1d1      	bne.n	e7a <process_event+0x12e>
	__asm__ volatile(
     ed6:	f04f 0320 	mov.w	r3, #32
     eda:	f3ef 8811 	mrs	r8, BASEPRI
     ede:	f383 8812 	msr	BASEPRI_MAX, r3
     ee2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     ee6:	8b23      	ldrh	r3, [r4, #24]
     ee8:	f023 0308 	bic.w	r3, r3, #8
     eec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     eee:	8b25      	ldrh	r5, [r4, #24]
     ef0:	06ea      	lsls	r2, r5, #27
     ef2:	d52e      	bpl.n	f52 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     ef4:	f025 0310 	bic.w	r3, r5, #16
     ef8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     efa:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     efe:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f00:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     f02:	2e00      	cmp	r6, #0
     f04:	f6bf af6f 	bge.w	de6 <process_event+0x9a>
	list->head = NULL;
     f08:	2300      	movs	r3, #0
		*clients = mgr->clients;
     f0a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     f0c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f10:	f021 0107 	bic.w	r1, r1, #7
     f14:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     f18:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f1a:	8b21      	ldrh	r1, [r4, #24]
     f1c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     f20:	45aa      	cmp	sl, r5
     f22:	f04f 0900 	mov.w	r9, #0
     f26:	f47f af3f 	bne.w	da8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     f2a:	2f00      	cmp	r7, #0
     f2c:	d09b      	beq.n	e66 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     f2e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     f32:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     f34:	f388 8811 	msr	BASEPRI, r8
     f38:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     f3c:	2f00      	cmp	r7, #0
     f3e:	d0c7      	beq.n	ed0 <process_event+0x184>
	return node->next;
     f40:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     f42:	4639      	mov	r1, r7
     f44:	4633      	mov	r3, r6
     f46:	4652      	mov	r2, sl
     f48:	4620      	mov	r0, r4
     f4a:	f004 ffc7 	bl	5edc <notify_one>
	list->head = node;
     f4e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     f50:	e7f4      	b.n	f3c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     f52:	06ab      	lsls	r3, r5, #26
     f54:	f57f af1a 	bpl.w	d8c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     f58:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     f5c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     f5e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     f62:	e6ff      	b.n	d64 <process_event+0x18>
     f64:	00005f09 	.word	0x00005f09

00000f68 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f6c:	4681      	mov	r9, r0
     f6e:	b095      	sub	sp, #84	; 0x54
     f70:	468b      	mov	fp, r1
     f72:	4617      	mov	r7, r2
     f74:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     f76:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     f78:	7838      	ldrb	r0, [r7, #0]
     f7a:	b908      	cbnz	r0, f80 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     f7c:	4628      	mov	r0, r5
     f7e:	e358      	b.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
			OUTC(*fp++);
     f80:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     f82:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     f84:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     f86:	d006      	beq.n	f96 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     f88:	4659      	mov	r1, fp
     f8a:	47c8      	blx	r9
     f8c:	2800      	cmp	r0, #0
     f8e:	f2c0 8350 	blt.w	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
     f92:	3501      	adds	r5, #1
		if (bps == NULL) {
     f94:	e1fb      	b.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
		} state = {
     f96:	2218      	movs	r2, #24
     f98:	2100      	movs	r1, #0
     f9a:	a80e      	add	r0, sp, #56	; 0x38
     f9c:	f005 fbe2 	bl	6764 <memset>
	if (*sp == '%') {
     fa0:	787b      	ldrb	r3, [r7, #1]
     fa2:	2b25      	cmp	r3, #37	; 0x25
     fa4:	d07d      	beq.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
     fa6:	2300      	movs	r3, #0
     fa8:	1c78      	adds	r0, r7, #1
     faa:	4698      	mov	r8, r3
     fac:	469e      	mov	lr, r3
     fae:	469c      	mov	ip, r3
     fb0:	461e      	mov	r6, r3
     fb2:	4601      	mov	r1, r0
		switch (*sp) {
     fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
     fb8:	2a2b      	cmp	r2, #43	; 0x2b
     fba:	f000 80a1 	beq.w	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
     fbe:	f200 8098 	bhi.w	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
     fc2:	2a20      	cmp	r2, #32
     fc4:	f000 809f 	beq.w	1106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
     fc8:	2a23      	cmp	r2, #35	; 0x23
     fca:	f000 809f 	beq.w	110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>
     fce:	b12b      	cbz	r3, fdc <z_cbvprintf_impl+0x74>
     fd0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     fd8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     fdc:	f1b8 0f00 	cmp.w	r8, #0
     fe0:	d005      	beq.n	fee <z_cbvprintf_impl+0x86>
     fe2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fe6:	f043 0320 	orr.w	r3, r3, #32
     fea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     fee:	f1be 0f00 	cmp.w	lr, #0
     ff2:	d005      	beq.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ff4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ff8:	f043 0310 	orr.w	r3, r3, #16
     ffc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1000:	f1bc 0f00 	cmp.w	ip, #0
    1004:	d005      	beq.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
    1006:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    100a:	f043 0308 	orr.w	r3, r3, #8
    100e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1012:	b12e      	cbz	r6, 1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
    1014:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1018:	f043 0304 	orr.w	r3, r3, #4
    101c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    1020:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1024:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1028:	2844      	cmp	r0, #68	; 0x44
    102a:	d103      	bne.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		conv->flag_zero = false;
    102c:	f36f 1386 	bfc	r3, #6, #1
    1030:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1034:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1038:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    103a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    103e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1042:	d17f      	bne.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
		conv->width_star = true;
    1044:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1048:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    104c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    104e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    1052:	781a      	ldrb	r2, [r3, #0]
    1054:	2a2e      	cmp	r2, #46	; 0x2e
    1056:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    105a:	bf0c      	ite	eq
    105c:	2101      	moveq	r1, #1
    105e:	2100      	movne	r1, #0
    1060:	f361 0241 	bfi	r2, r1, #1, #1
    1064:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1068:	d178      	bne.n	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
	if (*sp == '*') {
    106a:	785a      	ldrb	r2, [r3, #1]
    106c:	2a2a      	cmp	r2, #42	; 0x2a
    106e:	d06e      	beq.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
	++sp;
    1070:	3301      	adds	r3, #1
	size_t val = 0;
    1072:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1074:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1078:	4619      	mov	r1, r3
    107a:	f811 0b01 	ldrb.w	r0, [r1], #1
    107e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1082:	2e09      	cmp	r6, #9
    1084:	f240 8095 	bls.w	11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
	conv->unsupported |= ((conv->prec_value < 0)
    1088:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    108c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    108e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1092:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1096:	460a      	mov	r2, r1
    1098:	f360 0241 	bfi	r2, r0, #1, #1
    109c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    10a0:	e05c      	b.n	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
		conv->specifier = *sp++;
    10a2:	1cba      	adds	r2, r7, #2
    10a4:	9203      	str	r2, [sp, #12]
    10a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    10aa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    10ae:	07da      	lsls	r2, r3, #31
    10b0:	f140 812e 	bpl.w	1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
			width = va_arg(ap, int);
    10b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    10b8:	f1b8 0f00 	cmp.w	r8, #0
    10bc:	da07      	bge.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
				conv->flag_dash = true;
    10be:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    10c2:	f042 0204 	orr.w	r2, r2, #4
    10c6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    10ca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    10ce:	075e      	lsls	r6, r3, #29
    10d0:	f140 8127 	bpl.w	1322 <CONFIG_FPROTECT_BLOCK_SIZE+0x322>
			int arg = va_arg(ap, int);
    10d4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    10d8:	f1ba 0f00 	cmp.w	sl, #0
    10dc:	f280 8126 	bge.w	132c <CONFIG_FPROTECT_BLOCK_SIZE+0x32c>
				conv->prec_present = false;
    10e0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    10e4:	f36f 0341 	bfc	r3, #1, #1
    10e8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    10ec:	f04f 3aff 	mov.w	sl, #4294967295
    10f0:	e11c      	b.n	132c <CONFIG_FPROTECT_BLOCK_SIZE+0x32c>
		switch (*sp) {
    10f2:	2a2d      	cmp	r2, #45	; 0x2d
    10f4:	d00d      	beq.n	1112 <CONFIG_FPROTECT_BLOCK_SIZE+0x112>
    10f6:	2a30      	cmp	r2, #48	; 0x30
    10f8:	f47f af69 	bne.w	fce <z_cbvprintf_impl+0x66>
    10fc:	2301      	movs	r3, #1
	} while (loop);
    10fe:	e758      	b.n	fb2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    1100:	f04f 0c01 	mov.w	ip, #1
    1104:	e755      	b.n	fb2 <z_cbvprintf_impl+0x4a>
    1106:	f04f 0e01 	mov.w	lr, #1
    110a:	e752      	b.n	fb2 <z_cbvprintf_impl+0x4a>
    110c:	f04f 0801 	mov.w	r8, #1
    1110:	e74f      	b.n	fb2 <z_cbvprintf_impl+0x4a>
    1112:	2601      	movs	r6, #1
    1114:	e74d      	b.n	fb2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1116:	fb0e 6202 	mla	r2, lr, r2, r6
    111a:	3a30      	subs	r2, #48	; 0x30
    111c:	4603      	mov	r3, r0
    111e:	4618      	mov	r0, r3
    1120:	f810 6b01 	ldrb.w	r6, [r0], #1
    1124:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1128:	f1bc 0f09 	cmp.w	ip, #9
    112c:	d9f3      	bls.n	1116 <CONFIG_FPROTECT_BLOCK_SIZE+0x116>
	if (sp != wp) {
    112e:	4299      	cmp	r1, r3
    1130:	d08f      	beq.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
		conv->unsupported |= ((conv->width_value < 0)
    1132:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1136:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1138:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    113a:	f362 0141 	bfi	r1, r2, #1, #1
    113e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    1142:	e786      	b.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
    1144:	460b      	mov	r3, r1
	size_t val = 0;
    1146:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1148:	f04f 0e0a 	mov.w	lr, #10
    114c:	e7e7      	b.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
		conv->prec_star = true;
    114e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1152:	f042 0204 	orr.w	r2, r2, #4
    1156:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    115a:	3302      	adds	r3, #2
	switch (*sp) {
    115c:	781a      	ldrb	r2, [r3, #0]
    115e:	2a6c      	cmp	r2, #108	; 0x6c
    1160:	d047      	beq.n	11f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f2>
    1162:	d82b      	bhi.n	11bc <CONFIG_FPROTECT_BLOCK_SIZE+0x1bc>
    1164:	2a68      	cmp	r2, #104	; 0x68
    1166:	d031      	beq.n	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
    1168:	2a6a      	cmp	r2, #106	; 0x6a
    116a:	d04b      	beq.n	1204 <CONFIG_FPROTECT_BLOCK_SIZE+0x204>
    116c:	2a4c      	cmp	r2, #76	; 0x4c
    116e:	d051      	beq.n	1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
	conv->specifier = *sp++;
    1170:	461a      	mov	r2, r3
    1172:	f812 3b01 	ldrb.w	r3, [r2], #1
    1176:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1178:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    117a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    117e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1182:	f200 80be 	bhi.w	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
    1186:	2b6d      	cmp	r3, #109	; 0x6d
    1188:	d851      	bhi.n	122e <CONFIG_FPROTECT_BLOCK_SIZE+0x22e>
    118a:	2b69      	cmp	r3, #105	; 0x69
    118c:	f200 80b9 	bhi.w	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
    1190:	2b57      	cmp	r3, #87	; 0x57
    1192:	d867      	bhi.n	1264 <CONFIG_FPROTECT_BLOCK_SIZE+0x264>
    1194:	2b41      	cmp	r3, #65	; 0x41
    1196:	d003      	beq.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    1198:	3b45      	subs	r3, #69	; 0x45
    119a:	2b02      	cmp	r3, #2
    119c:	f200 80b1 	bhi.w	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
		conv->specifier_cat = SPECIFIER_FP;
    11a0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    11a4:	2204      	movs	r2, #4
    11a6:	f362 0302 	bfi	r3, r2, #0, #3
    11aa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    11ae:	2301      	movs	r3, #1
			break;
    11b0:	e073      	b.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
		val = 10U * val + *sp++ - '0';
    11b2:	fb0c 0202 	mla	r2, ip, r2, r0
    11b6:	3a30      	subs	r2, #48	; 0x30
    11b8:	460b      	mov	r3, r1
    11ba:	e75d      	b.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
	switch (*sp) {
    11bc:	2a74      	cmp	r2, #116	; 0x74
    11be:	d025      	beq.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    11c0:	2a7a      	cmp	r2, #122	; 0x7a
    11c2:	d1d5      	bne.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
		conv->length_mod = LENGTH_Z;
    11c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11c8:	2106      	movs	r1, #6
    11ca:	e00c      	b.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
		if (*++sp == 'h') {
    11cc:	785a      	ldrb	r2, [r3, #1]
    11ce:	2a68      	cmp	r2, #104	; 0x68
    11d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11d4:	d106      	bne.n	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
			conv->length_mod = LENGTH_HH;
    11d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    11d8:	f361 02c6 	bfi	r2, r1, #3, #4
    11dc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    11e0:	3302      	adds	r3, #2
    11e2:	e7c5      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
			conv->length_mod = LENGTH_H;
    11e4:	2102      	movs	r1, #2
    11e6:	f361 02c6 	bfi	r2, r1, #3, #4
    11ea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    11ee:	3301      	adds	r3, #1
    11f0:	e7be      	b.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
		if (*++sp == 'l') {
    11f2:	785a      	ldrb	r2, [r3, #1]
    11f4:	2a6c      	cmp	r2, #108	; 0x6c
    11f6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    11fa:	d101      	bne.n	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
			conv->length_mod = LENGTH_LL;
    11fc:	2104      	movs	r1, #4
    11fe:	e7eb      	b.n	11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
			conv->length_mod = LENGTH_L;
    1200:	2103      	movs	r1, #3
    1202:	e7f0      	b.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
		conv->length_mod = LENGTH_J;
    1204:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1208:	2105      	movs	r1, #5
    120a:	e7ec      	b.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
		conv->length_mod = LENGTH_T;
    120c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1210:	2107      	movs	r1, #7
    1212:	e7e8      	b.n	11e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e6>
		conv->unsupported = true;
    1214:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1218:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    121c:	f022 0202 	bic.w	r2, r2, #2
    1220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1224:	f042 0202 	orr.w	r2, r2, #2
    1228:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    122c:	e7df      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
	switch (conv->specifier) {
    122e:	3b6e      	subs	r3, #110	; 0x6e
    1230:	b2d9      	uxtb	r1, r3
    1232:	2301      	movs	r3, #1
    1234:	408b      	lsls	r3, r1
    1236:	f240 4182 	movw	r1, #1154	; 0x482
    123a:	420b      	tst	r3, r1
    123c:	d137      	bne.n	12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
    123e:	f013 0f24 	tst.w	r3, #36	; 0x24
    1242:	d151      	bne.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    1244:	07d8      	lsls	r0, r3, #31
    1246:	d55c      	bpl.n	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
		conv->specifier_cat = SPECIFIER_PTR;
    1248:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    124c:	2103      	movs	r1, #3
    124e:	f361 0302 	bfi	r3, r1, #0, #3
    1252:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1256:	f002 0378 	and.w	r3, r2, #120	; 0x78
    125a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    125e:	424b      	negs	r3, r1
    1260:	414b      	adcs	r3, r1
    1262:	e01a      	b.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
	switch (conv->specifier) {
    1264:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1268:	b2c9      	uxtb	r1, r1
    126a:	2001      	movs	r0, #1
    126c:	fa00 f101 	lsl.w	r1, r0, r1
    1270:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1274:	d194      	bne.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
    1276:	f640 0601 	movw	r6, #2049	; 0x801
    127a:	4231      	tst	r1, r6
    127c:	d11d      	bne.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
    127e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1282:	d03e      	beq.n	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
		conv->specifier_cat = SPECIFIER_SINT;
    1284:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1288:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    128c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1290:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1292:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1296:	d034      	beq.n	1302 <CONFIG_FPROTECT_BLOCK_SIZE+0x302>
	bool unsupported = false;
    1298:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    129a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    129e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    12a2:	430b      	orrs	r3, r1
    12a4:	f363 0241 	bfi	r2, r3, #1, #1
    12a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    12ac:	e6fd      	b.n	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
		conv->specifier_cat = SPECIFIER_UINT;
    12ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    12b2:	2102      	movs	r1, #2
    12b4:	f361 0302 	bfi	r3, r1, #0, #3
    12b8:	e7e8      	b.n	128c <CONFIG_FPROTECT_BLOCK_SIZE+0x28c>
    12ba:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    12be:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    12c0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    12c4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    12c8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    12ca:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    12ce:	bf02      	ittt	eq
    12d0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    12d4:	f041 0101 	orreq.w	r1, r1, #1
    12d8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    12dc:	2b63      	cmp	r3, #99	; 0x63
    12de:	d1db      	bne.n	1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>
			unsupported = (conv->length_mod != LENGTH_NONE);
    12e0:	1e13      	subs	r3, r2, #0
    12e2:	bf18      	it	ne
    12e4:	2301      	movne	r3, #1
    12e6:	e7d8      	b.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
		conv->specifier_cat = SPECIFIER_PTR;
    12e8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    12ec:	2103      	movs	r1, #3
    12ee:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    12f2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    12f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    12fa:	bf14      	ite	ne
    12fc:	2301      	movne	r3, #1
    12fe:	2300      	moveq	r3, #0
    1300:	e7cb      	b.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
		conv->invalid = true;
    1302:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1306:	f043 0301 	orr.w	r3, r3, #1
    130a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    130e:	e7c3      	b.n	1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>
		} else if (conv->width_present) {
    1310:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1314:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1316:	bfb4      	ite	lt
    1318:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    131c:	f04f 38ff 	movge.w	r8, #4294967295
    1320:	e6d5      	b.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
		} else if (conv->prec_present) {
    1322:	0798      	lsls	r0, r3, #30
    1324:	f57f aee2 	bpl.w	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
			precision = conv->prec_value;
    1328:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    132c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1330:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1332:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1336:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    133a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    133e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1340:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1344:	d133      	bne.n	13ae <CONFIG_FPROTECT_BLOCK_SIZE+0x3ae>
			switch (length_mod) {
    1346:	1ecb      	subs	r3, r1, #3
    1348:	2b04      	cmp	r3, #4
    134a:	d804      	bhi.n	1356 <CONFIG_FPROTECT_BLOCK_SIZE+0x356>
    134c:	e8df f003 	tbb	[pc, r3]
    1350:	21464621 	.word	0x21464621
    1354:	21          	.byte	0x21
    1355:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1356:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1358:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    135a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    135e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1362:	d11c      	bne.n	139e <CONFIG_FPROTECT_BLOCK_SIZE+0x39e>
				value->sint = (signed char)value->sint;
    1364:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1368:	17da      	asrs	r2, r3, #31
    136a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    136e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1370:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1374:	f013 0603 	ands.w	r6, r3, #3
    1378:	d050      	beq.n	141c <CONFIG_FPROTECT_BLOCK_SIZE+0x41c>
			OUTS(sp, fp);
    137a:	9b03      	ldr	r3, [sp, #12]
    137c:	463a      	mov	r2, r7
    137e:	4659      	mov	r1, fp
    1380:	4648      	mov	r0, r9
    1382:	f004 fe9e 	bl	60c2 <outs>
    1386:	2800      	cmp	r0, #0
    1388:	f2c0 8153 	blt.w	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    138c:	4405      	add	r5, r0
			continue;
    138e:	9f03      	ldr	r7, [sp, #12]
    1390:	e5f2      	b.n	f78 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1392:	f854 3b04 	ldr.w	r3, [r4], #4
    1396:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1398:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    139c:	e7e8      	b.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
			} else if (length_mod == LENGTH_H) {
    139e:	2902      	cmp	r1, #2
    13a0:	d1e5      	bne.n	136e <CONFIG_FPROTECT_BLOCK_SIZE+0x36e>
				value->sint = (short)value->sint;
    13a2:	b21a      	sxth	r2, r3
    13a4:	f343 33c0 	sbfx	r3, r3, #15, #1
    13a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    13ac:	e7df      	b.n	136e <CONFIG_FPROTECT_BLOCK_SIZE+0x36e>
		} else if (specifier_cat == SPECIFIER_UINT) {
    13ae:	2b02      	cmp	r3, #2
    13b0:	d124      	bne.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
			switch (length_mod) {
    13b2:	1ecb      	subs	r3, r1, #3
    13b4:	2b04      	cmp	r3, #4
    13b6:	d804      	bhi.n	13c2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3c2>
    13b8:	e8df f003 	tbb	[pc, r3]
    13bc:	18101018 	.word	0x18101018
    13c0:	18          	.byte	0x18
    13c1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    13c2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    13c4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    13c8:	f04f 0200 	mov.w	r2, #0
    13cc:	d014      	beq.n	13f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f8>
			} else if (length_mod == LENGTH_H) {
    13ce:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    13d0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    13d4:	d1cc      	bne.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
				value->uint = (unsigned short)value->uint;
    13d6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    13d8:	930e      	str	r3, [sp, #56]	; 0x38
    13da:	e7c9      	b.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
					(uint_value_type)va_arg(ap,
    13dc:	3407      	adds	r4, #7
    13de:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    13e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    13e6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    13ea:	e7c1      	b.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
					(uint_value_type)va_arg(ap, size_t);
    13ec:	f854 3b04 	ldr.w	r3, [r4], #4
    13f0:	930e      	str	r3, [sp, #56]	; 0x38
    13f2:	2300      	movs	r3, #0
    13f4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    13f6:	e7bb      	b.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
				value->uint = (unsigned char)value->uint;
    13f8:	b2db      	uxtb	r3, r3
    13fa:	e7cd      	b.n	1398 <CONFIG_FPROTECT_BLOCK_SIZE+0x398>
		} else if (specifier_cat == SPECIFIER_FP) {
    13fc:	2b04      	cmp	r3, #4
    13fe:	d108      	bne.n	1412 <CONFIG_FPROTECT_BLOCK_SIZE+0x412>
					(sint_value_type)va_arg(ap, long long);
    1400:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1402:	f024 0407 	bic.w	r4, r4, #7
    1406:	e9d4 2300 	ldrd	r2, r3, [r4]
    140a:	3408      	adds	r4, #8
    140c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1410:	e7ae      	b.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1412:	2b03      	cmp	r3, #3
    1414:	d1ac      	bne.n	1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>
			value->ptr = va_arg(ap, void *);
    1416:	f854 3b04 	ldr.w	r3, [r4], #4
    141a:	e7dd      	b.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
		switch (conv->specifier) {
    141c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1420:	2878      	cmp	r0, #120	; 0x78
    1422:	d8b4      	bhi.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
    1424:	2862      	cmp	r0, #98	; 0x62
    1426:	d81c      	bhi.n	1462 <CONFIG_FPROTECT_BLOCK_SIZE+0x462>
    1428:	2825      	cmp	r0, #37	; 0x25
    142a:	f43f adad 	beq.w	f88 <z_cbvprintf_impl+0x20>
    142e:	2858      	cmp	r0, #88	; 0x58
    1430:	d1ad      	bne.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1432:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1436:	9300      	str	r3, [sp, #0]
    1438:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    143c:	ab08      	add	r3, sp, #32
    143e:	aa10      	add	r2, sp, #64	; 0x40
    1440:	f004 fdf9 	bl	6036 <encode_uint>
			if (precision >= 0) {
    1444:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1448:	4607      	mov	r7, r0
			if (precision >= 0) {
    144a:	f280 809a 	bge.w	1582 <CONFIG_FPROTECT_BLOCK_SIZE+0x582>
		if (bps == NULL) {
    144e:	2f00      	cmp	r7, #0
    1450:	d09d      	beq.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
		size_t nj_len = (bpe - bps);
    1452:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1456:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1458:	2e00      	cmp	r6, #0
    145a:	f000 80c1 	beq.w	15e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e0>
			nj_len += 1U;
    145e:	3001      	adds	r0, #1
    1460:	e0be      	b.n	15e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e0>
		switch (conv->specifier) {
    1462:	3863      	subs	r0, #99	; 0x63
    1464:	2815      	cmp	r0, #21
    1466:	d892      	bhi.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
    1468:	a201      	add	r2, pc, #4	; (adr r2, 1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>)
    146a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    146e:	bf00      	nop
    1470:	00001545 	.word	0x00001545
    1474:	00001557 	.word	0x00001557
    1478:	0000138f 	.word	0x0000138f
    147c:	0000138f 	.word	0x0000138f
    1480:	0000138f 	.word	0x0000138f
    1484:	0000138f 	.word	0x0000138f
    1488:	00001557 	.word	0x00001557
    148c:	0000138f 	.word	0x0000138f
    1490:	0000138f 	.word	0x0000138f
    1494:	0000138f 	.word	0x0000138f
    1498:	0000138f 	.word	0x0000138f
    149c:	000015e5 	.word	0x000015e5
    14a0:	0000157d 	.word	0x0000157d
    14a4:	000015a3 	.word	0x000015a3
    14a8:	0000138f 	.word	0x0000138f
    14ac:	0000138f 	.word	0x0000138f
    14b0:	000014c9 	.word	0x000014c9
    14b4:	0000138f 	.word	0x0000138f
    14b8:	0000157d 	.word	0x0000157d
    14bc:	0000138f 	.word	0x0000138f
    14c0:	0000138f 	.word	0x0000138f
    14c4:	0000157d 	.word	0x0000157d
			if (precision >= 0) {
    14c8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    14cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    14ce:	db35      	blt.n	153c <CONFIG_FPROTECT_BLOCK_SIZE+0x53c>
				len = strnlen(bps, precision);
    14d0:	4651      	mov	r1, sl
    14d2:	4638      	mov	r0, r7
    14d4:	f005 f932 	bl	673c <strnlen>
			bpe = bps + len;
    14d8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    14dc:	2f00      	cmp	r7, #0
    14de:	f43f af56 	beq.w	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
		char sign = 0;
    14e2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    14e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    14e8:	f013 0210 	ands.w	r2, r3, #16
    14ec:	9205      	str	r2, [sp, #20]
    14ee:	f000 8093 	beq.w	1618 <CONFIG_FPROTECT_BLOCK_SIZE+0x618>
			nj_len += 2U;
    14f2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    14f4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    14f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    14f8:	bf48      	it	mi
    14fa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    14fc:	9204      	str	r2, [sp, #16]
    14fe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1500:	bf48      	it	mi
    1502:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1504:	f1b8 0f00 	cmp.w	r8, #0
    1508:	f340 80a0 	ble.w	164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>
			if (!conv->flag_dash) {
    150c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1510:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1514:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1518:	0750      	lsls	r0, r2, #29
    151a:	9306      	str	r3, [sp, #24]
    151c:	f100 8096 	bmi.w	164c <CONFIG_FPROTECT_BLOCK_SIZE+0x64c>
				if (conv->flag_zero) {
    1520:	0651      	lsls	r1, r2, #25
    1522:	f140 8089 	bpl.w	1638 <CONFIG_FPROTECT_BLOCK_SIZE+0x638>
					if (sign != 0) {
    1526:	b13e      	cbz	r6, 1538 <CONFIG_FPROTECT_BLOCK_SIZE+0x538>
						OUTC(sign);
    1528:	4659      	mov	r1, fp
    152a:	4630      	mov	r0, r6
    152c:	47c8      	blx	r9
    152e:	2800      	cmp	r0, #0
    1530:	db7f      	blt.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    1532:	9b06      	ldr	r3, [sp, #24]
    1534:	3501      	adds	r5, #1
    1536:	461e      	mov	r6, r3
					pad = '0';
    1538:	2230      	movs	r2, #48	; 0x30
    153a:	e07e      	b.n	163a <CONFIG_FPROTECT_BLOCK_SIZE+0x63a>
				len = strlen(bps);
    153c:	4638      	mov	r0, r7
    153e:	f005 f8f6 	bl	672e <strlen>
    1542:	e7c9      	b.n	14d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d8>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1546:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    154a:	2600      	movs	r6, #0
			bps = buf;
    154c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    154e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1552:	2001      	movs	r0, #1
    1554:	e7c6      	b.n	14e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e4>
			if (conv->flag_plus) {
    1556:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1558:	bf5c      	itt	pl
    155a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    155e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1560:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1564:	bf48      	it	mi
    1566:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1568:	2b00      	cmp	r3, #0
    156a:	f6bf af62 	bge.w	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
				value->uint = (uint_value_type)-sint;
    156e:	4252      	negs	r2, r2
    1570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1574:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1578:	262d      	movs	r6, #45	; 0x2d
    157a:	e75a      	b.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
		switch (conv->specifier) {
    157c:	2600      	movs	r6, #0
    157e:	e758      	b.n	1432 <CONFIG_FPROTECT_BLOCK_SIZE+0x432>
		char sign = 0;
    1580:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1582:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1586:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    158a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    158c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1590:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1592:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1596:	f67f af5a 	bls.w	144e <CONFIG_FPROTECT_BLOCK_SIZE+0x44e>
					conv->pad0_value = precision - (int)len;
    159a:	ebaa 0303 	sub.w	r3, sl, r3
    159e:	9311      	str	r3, [sp, #68]	; 0x44
    15a0:	e755      	b.n	144e <CONFIG_FPROTECT_BLOCK_SIZE+0x44e>
			if (value->ptr != NULL) {
    15a2:	980e      	ldr	r0, [sp, #56]	; 0x38
    15a4:	b390      	cbz	r0, 160c <CONFIG_FPROTECT_BLOCK_SIZE+0x60c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    15a6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    15aa:	9300      	str	r3, [sp, #0]
    15ac:	aa10      	add	r2, sp, #64	; 0x40
    15ae:	ab08      	add	r3, sp, #32
    15b0:	2100      	movs	r1, #0
    15b2:	f004 fd40 	bl	6036 <encode_uint>
				conv->altform_0c = true;
    15b6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    15ba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    15be:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    15c2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    15c6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    15ca:	4607      	mov	r7, r0
				conv->altform_0c = true;
    15cc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    15d0:	dad6      	bge.n	1580 <CONFIG_FPROTECT_BLOCK_SIZE+0x580>
		if (bps == NULL) {
    15d2:	2800      	cmp	r0, #0
    15d4:	f43f aedb 	beq.w	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
		size_t nj_len = (bpe - bps);
    15d8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    15dc:	1a18      	subs	r0, r3, r0
		char sign = 0;
    15de:	2600      	movs	r6, #0
    15e0:	469a      	mov	sl, r3
    15e2:	e77f      	b.n	14e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e4>
				store_count(conv, value->ptr, count);
    15e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    15e6:	2907      	cmp	r1, #7
    15e8:	f63f aed1 	bhi.w	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
    15ec:	e8df f001 	tbb	[pc, r1]
    15f0:	0c06040c 	.word	0x0c06040c
    15f4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    15f8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    15fa:	e6c8      	b.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
		*(short *)dp = (short)count;
    15fc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    15fe:	e6c6      	b.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
		*(intmax_t *)dp = (intmax_t)count;
    1600:	17ea      	asrs	r2, r5, #31
    1602:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1606:	e6c2      	b.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1608:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    160a:	e6c0      	b.n	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
    160c:	4f2e      	ldr	r7, [pc, #184]	; (16c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x6c8>)
		char sign = 0;
    160e:	4606      	mov	r6, r0
			bpe = bps + 5;
    1610:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1614:	2005      	movs	r0, #5
    1616:	e765      	b.n	14e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e4>
		} else if (conv->altform_0) {
    1618:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    161a:	bf48      	it	mi
    161c:	3001      	addmi	r0, #1
    161e:	e769      	b.n	14f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f4>
    1620:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1622:	4610      	mov	r0, r2
    1624:	9206      	str	r2, [sp, #24]
    1626:	4659      	mov	r1, fp
    1628:	47c8      	blx	r9
    162a:	2800      	cmp	r0, #0
    162c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1630:	da04      	bge.n	163c <CONFIG_FPROTECT_BLOCK_SIZE+0x63c>
#undef OUTS
#undef OUTC
}
    1632:	b015      	add	sp, #84	; 0x54
    1634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1638:	2220      	movs	r2, #32
					pad = '0';
    163a:	4643      	mov	r3, r8
				while (width-- > 0) {
    163c:	4619      	mov	r1, r3
    163e:	2900      	cmp	r1, #0
    1640:	f103 33ff 	add.w	r3, r3, #4294967295
    1644:	dcec      	bgt.n	1620 <CONFIG_FPROTECT_BLOCK_SIZE+0x620>
    1646:	4445      	add	r5, r8
    1648:	1a6d      	subs	r5, r5, r1
    164a:	4698      	mov	r8, r3
		if (sign != 0) {
    164c:	b12e      	cbz	r6, 165a <CONFIG_FPROTECT_BLOCK_SIZE+0x65a>
			OUTC(sign);
    164e:	4659      	mov	r1, fp
    1650:	4630      	mov	r0, r6
    1652:	47c8      	blx	r9
    1654:	2800      	cmp	r0, #0
    1656:	dbec      	blt.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    1658:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    165a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    165e:	06da      	lsls	r2, r3, #27
    1660:	d401      	bmi.n	1666 <CONFIG_FPROTECT_BLOCK_SIZE+0x666>
    1662:	071b      	lsls	r3, r3, #28
    1664:	d505      	bpl.n	1672 <CONFIG_FPROTECT_BLOCK_SIZE+0x672>
				OUTC('0');
    1666:	4659      	mov	r1, fp
    1668:	2030      	movs	r0, #48	; 0x30
    166a:	47c8      	blx	r9
    166c:	2800      	cmp	r0, #0
    166e:	dbe0      	blt.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    1670:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1672:	9b05      	ldr	r3, [sp, #20]
    1674:	b133      	cbz	r3, 1684 <CONFIG_FPROTECT_BLOCK_SIZE+0x684>
				OUTC(conv->specifier);
    1676:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    167a:	4659      	mov	r1, fp
    167c:	47c8      	blx	r9
    167e:	2800      	cmp	r0, #0
    1680:	dbd7      	blt.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    1682:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1684:	9e04      	ldr	r6, [sp, #16]
    1686:	442e      	add	r6, r5
    1688:	e005      	b.n	1696 <CONFIG_FPROTECT_BLOCK_SIZE+0x696>
				OUTC('0');
    168a:	4659      	mov	r1, fp
    168c:	2030      	movs	r0, #48	; 0x30
    168e:	47c8      	blx	r9
    1690:	2800      	cmp	r0, #0
    1692:	dbce      	blt.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    1694:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1696:	1b73      	subs	r3, r6, r5
    1698:	2b00      	cmp	r3, #0
    169a:	dcf6      	bgt.n	168a <CONFIG_FPROTECT_BLOCK_SIZE+0x68a>
			OUTS(bps, bpe);
    169c:	4653      	mov	r3, sl
    169e:	463a      	mov	r2, r7
    16a0:	4659      	mov	r1, fp
    16a2:	4648      	mov	r0, r9
    16a4:	f004 fd0d 	bl	60c2 <outs>
    16a8:	2800      	cmp	r0, #0
    16aa:	dbc2      	blt.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    16ac:	4405      	add	r5, r0
		while (width > 0) {
    16ae:	44a8      	add	r8, r5
    16b0:	eba8 0305 	sub.w	r3, r8, r5
    16b4:	2b00      	cmp	r3, #0
    16b6:	f77f ae6a 	ble.w	138e <CONFIG_FPROTECT_BLOCK_SIZE+0x38e>
			OUTC(' ');
    16ba:	4659      	mov	r1, fp
    16bc:	2020      	movs	r0, #32
    16be:	47c8      	blx	r9
    16c0:	2800      	cmp	r0, #0
    16c2:	dbb6      	blt.n	1632 <CONFIG_FPROTECT_BLOCK_SIZE+0x632>
    16c4:	3501      	adds	r5, #1
			--width;
    16c6:	e7f3      	b.n	16b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x6b0>
    16c8:	000074bb 	.word	0x000074bb

000016cc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    16cc:	f002 bc64 	b.w	3f98 <SystemInit>

000016d0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    16d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16d4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1730 <activate_foreach_backend+0x60>
{
    16d8:	4604      	mov	r4, r0
	while (mask_cpy) {
    16da:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    16dc:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    16e0:	b914      	cbnz	r4, 16e8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    16e2:	4638      	mov	r0, r7
    16e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    16e8:	fa94 f5a4 	rbit	r5, r4
    16ec:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    16f0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    16f4:	012e      	lsls	r6, r5, #4
    16f6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    16fa:	ea6f 0a03 	mvn.w	sl, r3
    16fe:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1702:	7b2b      	ldrb	r3, [r5, #12]
    1704:	2b00      	cmp	r3, #0
    1706:	d0eb      	beq.n	16e0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    1708:	f858 3006 	ldr.w	r3, [r8, r6]
    170c:	691b      	ldr	r3, [r3, #16]
    170e:	b94b      	cbnz	r3, 1724 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    1710:	4446      	add	r6, r8
			log_backend_enable(backend,
    1712:	2204      	movs	r2, #4
    1714:	6873      	ldr	r3, [r6, #4]
    1716:	4628      	mov	r0, r5
    1718:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    171a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    171e:	f000 fa59 	bl	1bd4 <log_backend_enable>
    1722:	e7dd      	b.n	16e0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    1724:	4628      	mov	r0, r5
    1726:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1728:	2800      	cmp	r0, #0
    172a:	d1d9      	bne.n	16e0 <activate_foreach_backend+0x10>
    172c:	e7f0      	b.n	1710 <activate_foreach_backend+0x40>
    172e:	bf00      	nop
    1730:	00007104 	.word	0x00007104

00001734 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    1734:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1736:	4910      	ldr	r1, [pc, #64]	; (1778 <enable_logger+0x44>)
    1738:	4810      	ldr	r0, [pc, #64]	; (177c <enable_logger+0x48>)
{
    173a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    173c:	2200      	movs	r2, #0
    173e:	f005 fb8d 	bl	6e5c <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1742:	4d0f      	ldr	r5, [pc, #60]	; (1780 <enable_logger+0x4c>)
    1744:	490f      	ldr	r1, [pc, #60]	; (1784 <enable_logger+0x50>)
    1746:	2200      	movs	r2, #0
    1748:	2300      	movs	r3, #0
    174a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    174e:	2400      	movs	r4, #0
    1750:	230e      	movs	r3, #14
    1752:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1756:	e9cd 4401 	strd	r4, r4, [sp, #4]
    175a:	4b0b      	ldr	r3, [pc, #44]	; (1788 <enable_logger+0x54>)
    175c:	9400      	str	r4, [sp, #0]
    175e:	f44f 7240 	mov.w	r2, #768	; 0x300
    1762:	4628      	mov	r0, r5
    1764:	f003 fbfa 	bl	4f5c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1768:	4908      	ldr	r1, [pc, #32]	; (178c <enable_logger+0x58>)
    176a:	4628      	mov	r0, r5
    176c:	f005 fa5b 	bl	6c26 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1770:	4620      	mov	r0, r4
    1772:	b009      	add	sp, #36	; 0x24
    1774:	bd30      	pop	{r4, r5, pc}
    1776:	bf00      	nop
    1778:	00001791 	.word	0x00001791
    177c:	20000588 	.word	0x20000588
    1780:	20000100 	.word	0x20000100
    1784:	20000d40 	.word	0x20000d40
    1788:	00001a81 	.word	0x00001a81
    178c:	000074c1 	.word	0x000074c1

00001790 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1790:	4801      	ldr	r0, [pc, #4]	; (1798 <log_process_thread_timer_expiry_fn+0x8>)
    1792:	f003 bd3d 	b.w	5210 <z_impl_k_sem_give>
    1796:	bf00      	nop
    1798:	200000ec 	.word	0x200000ec

0000179c <z_log_init>:
{
    179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17a0:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    17a2:	481f      	ldr	r0, [pc, #124]	; (1820 <z_log_init+0x84>)
{
    17a4:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    17a6:	f004 ff0c 	bl	65c2 <atomic_inc>
    17aa:	4606      	mov	r6, r0
    17ac:	2800      	cmp	r0, #0
    17ae:	d030      	beq.n	1812 <z_log_init+0x76>
	uint32_t mask = 0;
    17b0:	2500      	movs	r5, #0
}
    17b2:	4628      	mov	r0, r5
    17b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    17b8:	7b23      	ldrb	r3, [r4, #12]
    17ba:	b173      	cbz	r3, 17da <z_log_init+0x3e>
	if (backend->api->init) {
    17bc:	6823      	ldr	r3, [r4, #0]
    17be:	68db      	ldr	r3, [r3, #12]
    17c0:	b10b      	cbz	r3, 17c6 <z_log_init+0x2a>
		backend->api->init(backend);
    17c2:	4620      	mov	r0, r4
    17c4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    17c6:	6823      	ldr	r3, [r4, #0]
    17c8:	691b      	ldr	r3, [r3, #16]
    17ca:	b9d3      	cbnz	r3, 1802 <z_log_init+0x66>
				log_backend_enable(backend,
    17cc:	6863      	ldr	r3, [r4, #4]
    17ce:	2204      	movs	r2, #4
    17d0:	6819      	ldr	r1, [r3, #0]
    17d2:	4620      	mov	r0, r4
    17d4:	f000 f9fe 	bl	1bd4 <log_backend_enable>
			i++;
    17d8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    17da:	3410      	adds	r4, #16
    17dc:	454c      	cmp	r4, r9
    17de:	d3eb      	bcc.n	17b8 <z_log_init+0x1c>
	if (blocking) {
    17e0:	f1b8 0f00 	cmp.w	r8, #0
    17e4:	d0e5      	beq.n	17b2 <z_log_init+0x16>
		while (mask) {
    17e6:	2d00      	cmp	r5, #0
    17e8:	d0e2      	beq.n	17b0 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    17ea:	4628      	mov	r0, r5
    17ec:	f7ff ff70 	bl	16d0 <activate_foreach_backend>
    17f0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    17f2:	2f00      	cmp	r7, #0
    17f4:	d0f7      	beq.n	17e6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    17f6:	2100      	movs	r1, #0
    17f8:	f44f 70a4 	mov.w	r0, #328	; 0x148
    17fc:	f004 f812 	bl	5824 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    1800:	e7f1      	b.n	17e6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    1802:	4620      	mov	r0, r4
    1804:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1806:	2800      	cmp	r0, #0
    1808:	d0e0      	beq.n	17cc <z_log_init+0x30>
				mask |= BIT(i);
    180a:	fa0a f306 	lsl.w	r3, sl, r6
    180e:	431d      	orrs	r5, r3
    1810:	e7e2      	b.n	17d8 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1812:	4c04      	ldr	r4, [pc, #16]	; (1824 <z_log_init+0x88>)
    1814:	f8df 9010 	ldr.w	r9, [pc, #16]	; 1828 <z_log_init+0x8c>
	uint32_t mask = 0;
    1818:	4605      	mov	r5, r0
				mask |= BIT(i);
    181a:	f04f 0a01 	mov.w	sl, #1
    181e:	e7dd      	b.n	17dc <z_log_init+0x40>
    1820:	2000071c 	.word	0x2000071c
    1824:	00007104 	.word	0x00007104
    1828:	00007124 	.word	0x00007124

0000182c <log_format_func_t_get>:
}
    182c:	4b01      	ldr	r3, [pc, #4]	; (1834 <log_format_func_t_get+0x8>)
    182e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1832:	4770      	bx	lr
    1834:	0000716c 	.word	0x0000716c

00001838 <log_set_timestamp_func>:
{
    1838:	b508      	push	{r3, lr}
    183a:	4603      	mov	r3, r0
    183c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    183e:	b12b      	cbz	r3, 184c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1840:	4a04      	ldr	r2, [pc, #16]	; (1854 <log_set_timestamp_func+0x1c>)
    1842:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1844:	f000 fc78 	bl	2138 <log_output_timestamp_freq_set>
	return 0;
    1848:	2000      	movs	r0, #0
}
    184a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    184c:	f06f 0015 	mvn.w	r0, #21
    1850:	e7fb      	b.n	184a <log_set_timestamp_func+0x12>
    1852:	bf00      	nop
    1854:	20000004 	.word	0x20000004

00001858 <z_log_notify_backend_enabled>:
{
    1858:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    185a:	4c04      	ldr	r4, [pc, #16]	; (186c <z_log_notify_backend_enabled+0x14>)
    185c:	7823      	ldrb	r3, [r4, #0]
    185e:	b913      	cbnz	r3, 1866 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1860:	4803      	ldr	r0, [pc, #12]	; (1870 <z_log_notify_backend_enabled+0x18>)
    1862:	f003 fcd5 	bl	5210 <z_impl_k_sem_give>
	backend_attached = true;
    1866:	2301      	movs	r3, #1
    1868:	7023      	strb	r3, [r4, #0]
}
    186a:	bd10      	pop	{r4, pc}
    186c:	200008ec 	.word	0x200008ec
    1870:	200000ec 	.word	0x200000ec

00001874 <z_log_dropped>:
{
    1874:	b510      	push	{r4, lr}
    1876:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1878:	4808      	ldr	r0, [pc, #32]	; (189c <z_log_dropped+0x28>)
    187a:	f004 fea2 	bl	65c2 <atomic_inc>
	if (buffered) {
    187e:	b15c      	cbz	r4, 1898 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1880:	f3bf 8f5b 	dmb	ish
    1884:	4b06      	ldr	r3, [pc, #24]	; (18a0 <z_log_dropped+0x2c>)
    1886:	e853 1f00 	ldrex	r1, [r3]
    188a:	3901      	subs	r1, #1
    188c:	e843 1200 	strex	r2, r1, [r3]
    1890:	2a00      	cmp	r2, #0
    1892:	d1f8      	bne.n	1886 <z_log_dropped+0x12>
    1894:	f3bf 8f5b 	dmb	ish
}
    1898:	bd10      	pop	{r4, pc}
    189a:	bf00      	nop
    189c:	20000714 	.word	0x20000714
    18a0:	20000718 	.word	0x20000718

000018a4 <z_log_dropped_read_and_clear>:
}
    18a4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    18a6:	4b06      	ldr	r3, [pc, #24]	; (18c0 <z_log_dropped_read_and_clear+0x1c>)
    18a8:	f3bf 8f5b 	dmb	ish
    18ac:	4601      	mov	r1, r0
    18ae:	e853 0f00 	ldrex	r0, [r3]
    18b2:	e843 1200 	strex	r2, r1, [r3]
    18b6:	2a00      	cmp	r2, #0
    18b8:	d1f9      	bne.n	18ae <z_log_dropped_read_and_clear+0xa>
    18ba:	f3bf 8f5b 	dmb	ish
    18be:	4770      	bx	lr
    18c0:	20000714 	.word	0x20000714

000018c4 <dropped_notify>:
{
    18c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    18c6:	f7ff ffed 	bl	18a4 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18ca:	4c08      	ldr	r4, [pc, #32]	; (18ec <dropped_notify+0x28>)
    18cc:	4e08      	ldr	r6, [pc, #32]	; (18f0 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    18ce:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18d0:	42b4      	cmp	r4, r6
    18d2:	d300      	bcc.n	18d6 <dropped_notify+0x12>
}
    18d4:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    18d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    18d8:	795b      	ldrb	r3, [r3, #5]
    18da:	b12b      	cbz	r3, 18e8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    18dc:	6823      	ldr	r3, [r4, #0]
    18de:	685b      	ldr	r3, [r3, #4]
    18e0:	b113      	cbz	r3, 18e8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    18e2:	4629      	mov	r1, r5
    18e4:	4620      	mov	r0, r4
    18e6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18e8:	3410      	adds	r4, #16
    18ea:	e7f1      	b.n	18d0 <dropped_notify+0xc>
    18ec:	00007104 	.word	0x00007104
    18f0:	00007124 	.word	0x00007124

000018f4 <z_log_msg_init>:
{
    18f4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    18f6:	4c04      	ldr	r4, [pc, #16]	; (1908 <z_log_msg_init+0x14>)
    18f8:	4904      	ldr	r1, [pc, #16]	; (190c <z_log_msg_init+0x18>)
    18fa:	4620      	mov	r0, r4
    18fc:	f004 fcf2 	bl	62e4 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    1900:	4b03      	ldr	r3, [pc, #12]	; (1910 <z_log_msg_init+0x1c>)
    1902:	601c      	str	r4, [r3, #0]
}
    1904:	bd10      	pop	{r4, pc}
    1906:	bf00      	nop
    1908:	2000009c 	.word	0x2000009c
    190c:	00007158 	.word	0x00007158
    1910:	2000070c 	.word	0x2000070c

00001914 <log_core_init>:
	panic_mode = false;
    1914:	4a08      	ldr	r2, [pc, #32]	; (1938 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    1916:	4809      	ldr	r0, [pc, #36]	; (193c <log_core_init+0x28>)
{
    1918:	b508      	push	{r3, lr}
	panic_mode = false;
    191a:	2300      	movs	r3, #0
    191c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    191e:	4a08      	ldr	r2, [pc, #32]	; (1940 <log_core_init+0x2c>)
    1920:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    1922:	4a08      	ldr	r2, [pc, #32]	; (1944 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    1924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    1928:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    192a:	f7ff ff85 	bl	1838 <log_set_timestamp_func>
}
    192e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    1932:	f7ff bfdf 	b.w	18f4 <z_log_msg_init>
    1936:	bf00      	nop
    1938:	200008ed 	.word	0x200008ed
    193c:	000065bf 	.word	0x000065bf
    1940:	20000714 	.word	0x20000714
    1944:	20000718 	.word	0x20000718

00001948 <z_log_msg_alloc>:
{
    1948:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    194a:	2200      	movs	r2, #0
    194c:	4801      	ldr	r0, [pc, #4]	; (1954 <z_log_msg_alloc+0xc>)
    194e:	2300      	movs	r3, #0
    1950:	f004 bce9 	b.w	6326 <mpsc_pbuf_alloc>
    1954:	2000009c 	.word	0x2000009c

00001958 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1958:	4801      	ldr	r0, [pc, #4]	; (1960 <z_log_msg_local_claim+0x8>)
    195a:	f004 bd82 	b.w	6462 <mpsc_pbuf_claim>
    195e:	bf00      	nop
    1960:	2000009c 	.word	0x2000009c

00001964 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    1964:	4b02      	ldr	r3, [pc, #8]	; (1970 <z_log_msg_free+0xc>)
{
    1966:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1968:	6818      	ldr	r0, [r3, #0]
    196a:	f004 bdcc 	b.w	6506 <mpsc_pbuf_free>
    196e:	bf00      	nop
    1970:	2000070c 	.word	0x2000070c

00001974 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    1974:	4801      	ldr	r0, [pc, #4]	; (197c <z_log_msg_pending+0x8>)
    1976:	f004 be02 	b.w	657e <mpsc_pbuf_is_pending>
    197a:	bf00      	nop
    197c:	2000009c 	.word	0x2000009c

00001980 <z_impl_log_process>:
{
    1980:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    1982:	4b28      	ldr	r3, [pc, #160]	; (1a24 <z_impl_log_process+0xa4>)
    1984:	7818      	ldrb	r0, [r3, #0]
    1986:	2800      	cmp	r0, #0
    1988:	d04b      	beq.n	1a22 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    198a:	f7ff ffe5 	bl	1958 <z_log_msg_local_claim>
	if (msg) {
    198e:	4605      	mov	r5, r0
    1990:	b190      	cbz	r0, 19b8 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1992:	f3bf 8f5b 	dmb	ish
    1996:	4b24      	ldr	r3, [pc, #144]	; (1a28 <z_impl_log_process+0xa8>)
    1998:	e853 1f00 	ldrex	r1, [r3]
    199c:	3901      	subs	r1, #1
    199e:	e843 1200 	strex	r2, r1, [r3]
    19a2:	2a00      	cmp	r2, #0
    19a4:	d1f8      	bne.n	1998 <z_impl_log_process+0x18>
    19a6:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    19aa:	4c20      	ldr	r4, [pc, #128]	; (1a2c <z_impl_log_process+0xac>)
    19ac:	4e20      	ldr	r6, [pc, #128]	; (1a30 <z_impl_log_process+0xb0>)
    19ae:	42b4      	cmp	r4, r6
    19b0:	d32d      	bcc.n	1a0e <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    19b2:	4628      	mov	r0, r5
    19b4:	f7ff ffd6 	bl	1964 <z_log_msg_free>
	return dropped_cnt > 0;
    19b8:	4b1e      	ldr	r3, [pc, #120]	; (1a34 <z_impl_log_process+0xb4>)
    19ba:	4c1f      	ldr	r4, [pc, #124]	; (1a38 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    19bc:	681b      	ldr	r3, [r3, #0]
    19be:	2b00      	cmp	r3, #0
    19c0:	dd19      	ble.n	19f6 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    19c2:	f005 fa45 	bl	6e50 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    19c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    19ca:	fba0 0302 	umull	r0, r3, r0, r2
    19ce:	fb02 3101 	mla	r1, r2, r1, r3
    19d2:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    19d4:	e9d4 2000 	ldrd	r2, r0, [r4]
    19d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    19dc:	1a9b      	subs	r3, r3, r2
    19de:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    19e2:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    19e6:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    19ea:	4293      	cmp	r3, r2
    19ec:	f171 0100 	sbcs.w	r1, r1, #0
    19f0:	d301      	bcc.n	19f6 <z_impl_log_process+0x76>
				dropped_notify();
    19f2:	f7ff ff67 	bl	18c4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    19f6:	e9d4 3200 	ldrd	r3, r2, [r4]
    19fa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    19fe:	f142 0200 	adc.w	r2, r2, #0
    1a02:	e9c4 3200 	strd	r3, r2, [r4]
}
    1a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    1a0a:	f7ff bfb3 	b.w	1974 <z_log_msg_pending>
	return backend->cb->active;
    1a0e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    1a10:	795b      	ldrb	r3, [r3, #5]
    1a12:	b123      	cbz	r3, 1a1e <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    1a14:	6823      	ldr	r3, [r4, #0]
    1a16:	4629      	mov	r1, r5
    1a18:	681b      	ldr	r3, [r3, #0]
    1a1a:	4620      	mov	r0, r4
    1a1c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a1e:	3410      	adds	r4, #16
    1a20:	e7c5      	b.n	19ae <z_impl_log_process+0x2e>
}
    1a22:	bd70      	pop	{r4, r5, r6, pc}
    1a24:	200008ec 	.word	0x200008ec
    1a28:	20000718 	.word	0x20000718
    1a2c:	00007104 	.word	0x00007104
    1a30:	00007124 	.word	0x00007124
    1a34:	20000714 	.word	0x20000714
    1a38:	20000580 	.word	0x20000580

00001a3c <z_impl_log_panic>:
{
    1a3c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1a3e:	4d0d      	ldr	r5, [pc, #52]	; (1a74 <z_impl_log_panic+0x38>)
    1a40:	7829      	ldrb	r1, [r5, #0]
    1a42:	b961      	cbnz	r1, 1a5e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    1a44:	2001      	movs	r0, #1
    1a46:	f7ff fea9 	bl	179c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a4a:	4c0b      	ldr	r4, [pc, #44]	; (1a78 <z_impl_log_panic+0x3c>)
    1a4c:	4e0b      	ldr	r6, [pc, #44]	; (1a7c <z_impl_log_panic+0x40>)
    1a4e:	42b4      	cmp	r4, r6
    1a50:	d306      	bcc.n	1a60 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1a52:	f7ff ff95 	bl	1980 <z_impl_log_process>
		while (log_process() == true) {
    1a56:	2800      	cmp	r0, #0
    1a58:	d1fb      	bne.n	1a52 <z_impl_log_panic+0x16>
	panic_mode = true;
    1a5a:	2301      	movs	r3, #1
    1a5c:	702b      	strb	r3, [r5, #0]
}
    1a5e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1a60:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1a62:	795b      	ldrb	r3, [r3, #5]
    1a64:	b11b      	cbz	r3, 1a6e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    1a66:	6823      	ldr	r3, [r4, #0]
    1a68:	4620      	mov	r0, r4
    1a6a:	689b      	ldr	r3, [r3, #8]
    1a6c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a6e:	3410      	adds	r4, #16
    1a70:	e7ed      	b.n	1a4e <z_impl_log_panic+0x12>
    1a72:	bf00      	nop
    1a74:	200008ed 	.word	0x200008ed
    1a78:	00007104 	.word	0x00007104
    1a7c:	00007124 	.word	0x00007124

00001a80 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1a80:	2100      	movs	r1, #0
{
    1a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1a86:	4608      	mov	r0, r1
    1a88:	f7ff fe88 	bl	179c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1a8c:	4604      	mov	r4, r0
    1a8e:	b348      	cbz	r0, 1ae4 <log_process_thread_func+0x64>
    1a90:	f240 6867 	movw	r8, #1639	; 0x667
    1a94:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1a98:	f003 fede 	bl	5858 <z_impl_z_current_get>
	proc_tid = process_tid;
    1a9c:	4b1a      	ldr	r3, [pc, #104]	; (1b08 <log_process_thread_func+0x88>)
    1a9e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1aa0:	b130      	cbz	r0, 1ab0 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1aa2:	4b1a      	ldr	r3, [pc, #104]	; (1b0c <log_process_thread_func+0x8c>)
	    process_tid &&
    1aa4:	681b      	ldr	r3, [r3, #0]
    1aa6:	2b09      	cmp	r3, #9
    1aa8:	dd02      	ble.n	1ab0 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    1aaa:	4819      	ldr	r0, [pc, #100]	; (1b10 <log_process_thread_func+0x90>)
    1aac:	f003 fbb0 	bl	5210 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ab0:	4f18      	ldr	r7, [pc, #96]	; (1b14 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    1ab2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1b10 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1ab6:	2500      	movs	r5, #0
		if (activate_mask) {
    1ab8:	b144      	cbz	r4, 1acc <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    1aba:	4620      	mov	r0, r4
    1abc:	f7ff fe08 	bl	16d0 <activate_foreach_backend>
			if (!activate_mask) {
    1ac0:	4604      	mov	r4, r0
    1ac2:	b918      	cbnz	r0, 1acc <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    1ac4:	f04f 38ff 	mov.w	r8, #4294967295
    1ac8:	f04f 39ff 	mov.w	r9, #4294967295
    1acc:	f7ff ff58 	bl	1980 <z_impl_log_process>
		if (log_process() == false) {
    1ad0:	4606      	mov	r6, r0
    1ad2:	b928      	cbnz	r0, 1ae0 <log_process_thread_func+0x60>
			if (processed_any) {
    1ad4:	b9b5      	cbnz	r5, 1b04 <log_process_thread_func+0x84>
    1ad6:	4642      	mov	r2, r8
    1ad8:	464b      	mov	r3, r9
    1ada:	4650      	mov	r0, sl
    1adc:	f003 fbb8 	bl	5250 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1ae0:	4635      	mov	r5, r6
    1ae2:	e7e9      	b.n	1ab8 <log_process_thread_func+0x38>
    1ae4:	f04f 38ff 	mov.w	r8, #4294967295
    1ae8:	f04f 39ff 	mov.w	r9, #4294967295
    1aec:	e7d4      	b.n	1a98 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    1aee:	682b      	ldr	r3, [r5, #0]
    1af0:	699b      	ldr	r3, [r3, #24]
    1af2:	b11b      	cbz	r3, 1afc <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    1af4:	2200      	movs	r2, #0
    1af6:	4611      	mov	r1, r2
    1af8:	4628      	mov	r0, r5
    1afa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1afc:	3510      	adds	r5, #16
    1afe:	42bd      	cmp	r5, r7
    1b00:	d3f5      	bcc.n	1aee <log_process_thread_func+0x6e>
    1b02:	e7e8      	b.n	1ad6 <log_process_thread_func+0x56>
    1b04:	4d04      	ldr	r5, [pc, #16]	; (1b18 <log_process_thread_func+0x98>)
    1b06:	e7fa      	b.n	1afe <log_process_thread_func+0x7e>
    1b08:	20000710 	.word	0x20000710
    1b0c:	20000718 	.word	0x20000718
    1b10:	200000ec 	.word	0x200000ec
    1b14:	00007124 	.word	0x00007124
    1b18:	00007104 	.word	0x00007104

00001b1c <z_log_msg_post_finalize>:
{
    1b1c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    1b1e:	4818      	ldr	r0, [pc, #96]	; (1b80 <z_log_msg_post_finalize+0x64>)
    1b20:	f004 fd4f 	bl	65c2 <atomic_inc>
	if (panic_mode) {
    1b24:	4b17      	ldr	r3, [pc, #92]	; (1b84 <z_log_msg_post_finalize+0x68>)
    1b26:	781b      	ldrb	r3, [r3, #0]
    1b28:	b17b      	cbz	r3, 1b4a <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    1b2a:	f04f 0320 	mov.w	r3, #32
    1b2e:	f3ef 8411 	mrs	r4, BASEPRI
    1b32:	f383 8812 	msr	BASEPRI_MAX, r3
    1b36:	f3bf 8f6f 	isb	sy
    1b3a:	f7ff ff21 	bl	1980 <z_impl_log_process>
	__asm__ volatile(
    1b3e:	f384 8811 	msr	BASEPRI, r4
    1b42:	f3bf 8f6f 	isb	sy
}
    1b46:	b002      	add	sp, #8
    1b48:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    1b4a:	4b0f      	ldr	r3, [pc, #60]	; (1b88 <z_log_msg_post_finalize+0x6c>)
    1b4c:	681b      	ldr	r3, [r3, #0]
    1b4e:	2b00      	cmp	r3, #0
    1b50:	d0f9      	beq.n	1b46 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    1b52:	b950      	cbnz	r0, 1b6a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    1b54:	2200      	movs	r2, #0
    1b56:	2300      	movs	r3, #0
    1b58:	e9cd 2300 	strd	r2, r3, [sp]
    1b5c:	480b      	ldr	r0, [pc, #44]	; (1b8c <z_log_msg_post_finalize+0x70>)
    1b5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1b62:	2300      	movs	r3, #0
    1b64:	f004 f8aa 	bl	5cbc <z_impl_k_timer_start>
    1b68:	e7ed      	b.n	1b46 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1b6a:	280a      	cmp	r0, #10
    1b6c:	d1eb      	bne.n	1b46 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    1b6e:	4807      	ldr	r0, [pc, #28]	; (1b8c <z_log_msg_post_finalize+0x70>)
    1b70:	f005 f980 	bl	6e74 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1b74:	4806      	ldr	r0, [pc, #24]	; (1b90 <z_log_msg_post_finalize+0x74>)
}
    1b76:	b002      	add	sp, #8
    1b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b7c:	f003 bb48 	b.w	5210 <z_impl_k_sem_give>
    1b80:	20000718 	.word	0x20000718
    1b84:	200008ed 	.word	0x200008ed
    1b88:	20000710 	.word	0x20000710
    1b8c:	20000588 	.word	0x20000588
    1b90:	200000ec 	.word	0x200000ec

00001b94 <z_log_msg_commit>:
{
    1b94:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1b96:	4b06      	ldr	r3, [pc, #24]	; (1bb0 <z_log_msg_commit+0x1c>)
    1b98:	681b      	ldr	r3, [r3, #0]
{
    1b9a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1b9c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    1b9e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1ba0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    1ba2:	4804      	ldr	r0, [pc, #16]	; (1bb4 <z_log_msg_commit+0x20>)
    1ba4:	f004 fc3d 	bl	6422 <mpsc_pbuf_commit>
}
    1ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1bac:	f7ff bfb6 	b.w	1b1c <z_log_msg_post_finalize>
    1bb0:	20000004 	.word	0x20000004
    1bb4:	2000009c 	.word	0x2000009c

00001bb8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1bb8:	4a04      	ldr	r2, [pc, #16]	; (1bcc <log_source_name_get+0x14>)
    1bba:	4b05      	ldr	r3, [pc, #20]	; (1bd0 <log_source_name_get+0x18>)
    1bbc:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1bbe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    1bc2:	bf34      	ite	cc
    1bc4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1bc8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1bca:	4770      	bx	lr
    1bcc:	0000708c 	.word	0x0000708c
    1bd0:	00007104 	.word	0x00007104

00001bd4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1bd4:	4b08      	ldr	r3, [pc, #32]	; (1bf8 <log_backend_enable+0x24>)
    1bd6:	1ac3      	subs	r3, r0, r3
{
    1bd8:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1bda:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1bdc:	6844      	ldr	r4, [r0, #4]
    1bde:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    1be0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    1be2:	6843      	ldr	r3, [r0, #4]
    1be4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1be6:	6843      	ldr	r3, [r0, #4]
    1be8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1bea:	6843      	ldr	r3, [r0, #4]
    1bec:	2201      	movs	r2, #1
    1bee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1bf0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    1bf2:	f7ff be31 	b.w	1858 <z_log_notify_backend_enabled>
    1bf6:	bf00      	nop
    1bf8:	00007104 	.word	0x00007104

00001bfc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c00:	b08f      	sub	sp, #60	; 0x3c
    1c02:	af04      	add	r7, sp, #16
    1c04:	f3c1 284a 	ubfx	r8, r1, #9, #11
    1c08:	60b8      	str	r0, [r7, #8]
    1c0a:	460d      	mov	r5, r1
    1c0c:	4691      	mov	r9, r2
    1c0e:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    1c10:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    1c12:	f1b8 0f00 	cmp.w	r8, #0
    1c16:	d063      	beq.n	1ce0 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    1c18:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    1c1a:	f107 0314 	add.w	r3, r7, #20
    1c1e:	f04f 0b04 	mov.w	fp, #4
    1c22:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    1c26:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    1c2a:	e9c7 6607 	strd	r6, r6, [r7, #28]
    1c2e:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    1c30:	9301      	str	r3, [sp, #4]
    1c32:	f8cd b008 	str.w	fp, [sp, #8]
    1c36:	f8cd a000 	str.w	sl, [sp]
    1c3a:	f107 031c 	add.w	r3, r7, #28
    1c3e:	68f9      	ldr	r1, [r7, #12]
    1c40:	4632      	mov	r2, r6
    1c42:	4648      	mov	r0, r9
    1c44:	f7fe fe88 	bl	958 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    1c48:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1c4c:	4603      	mov	r3, r0
    1c4e:	d31c      	bcc.n	1c8a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    1c50:	466c      	mov	r4, sp
    1c52:	b08a      	sub	sp, #40	; 0x28
    1c54:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1c58:	ab04      	add	r3, sp, #16
    1c5a:	4826      	ldr	r0, [pc, #152]	; (1cf4 <z_impl_z_log_msg_static_create+0xf8>)
    1c5c:	e9c3 0105 	strd	r0, r1, [r3, #20]
    1c60:	f240 71ff 	movw	r1, #2047	; 0x7ff
    1c64:	61d9      	str	r1, [r3, #28]
    1c66:	461a      	mov	r2, r3
    1c68:	f44f 7100 	mov.w	r1, #512	; 0x200
    1c6c:	8419      	strh	r1, [r3, #32]
    1c6e:	4b22      	ldr	r3, [pc, #136]	; (1cf8 <z_impl_z_log_msg_static_create+0xfc>)
    1c70:	f842 3f10 	str.w	r3, [r2, #16]!
    1c74:	4821      	ldr	r0, [pc, #132]	; (1cfc <z_impl_z_log_msg_static_create+0x100>)
    1c76:	4633      	mov	r3, r6
    1c78:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1c7c:	f7ff ffbe 	bl	1bfc <z_impl_z_log_msg_static_create>
    1c80:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    1c82:	372c      	adds	r7, #44	; 0x2c
    1c84:	46bd      	mov	sp, r7
    1c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    1c8a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1c8e:	f104 0017 	add.w	r0, r4, #23
    1c92:	4418      	add	r0, r3
    1c94:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1c98:	0880      	lsrs	r0, r0, #2
    1c9a:	603b      	str	r3, [r7, #0]
    1c9c:	f7ff fe54 	bl	1948 <z_log_msg_alloc>
    1ca0:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    1ca4:	4604      	mov	r4, r0
    1ca6:	b190      	cbz	r0, 1cce <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    1ca8:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    1caa:	4a15      	ldr	r2, [pc, #84]	; (1d00 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    1cac:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    1cb0:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    1cb4:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    1cb8:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    1cba:	e9cd a300 	strd	sl, r3, [sp]
    1cbe:	f8cd b008 	str.w	fp, [sp, #8]
    1cc2:	68f9      	ldr	r1, [r7, #12]
    1cc4:	f107 031c 	add.w	r3, r7, #28
    1cc8:	4648      	mov	r0, r9
    1cca:	f7fe fe45 	bl	958 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    1cce:	f368 2553 	bfi	r5, r8, #9, #11
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	68b9      	ldr	r1, [r7, #8]
    1cd6:	462a      	mov	r2, r5
    1cd8:	4620      	mov	r0, r4
    1cda:	f004 fca8 	bl	662e <z_log_msg_finalize>
    1cde:	e7d0      	b.n	1c82 <z_impl_z_log_msg_static_create+0x86>
    1ce0:	f104 0017 	add.w	r0, r4, #23
    1ce4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1ce8:	0880      	lsrs	r0, r0, #2
    1cea:	f7ff fe2d 	bl	1948 <z_log_msg_alloc>
    1cee:	4604      	mov	r4, r0
    1cf0:	e7ed      	b.n	1cce <z_impl_z_log_msg_static_create+0xd2>
    1cf2:	bf00      	nop
    1cf4:	000074d6 	.word	0x000074d6
    1cf8:	01000004 	.word	0x01000004
    1cfc:	000070c4 	.word	0x000070c4
    1d00:	00006603 	.word	0x00006603

00001d04 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d08:	b087      	sub	sp, #28
    1d0a:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    1d0e:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    1d12:	4604      	mov	r4, r0
    1d14:	460f      	mov	r7, r1
    1d16:	4693      	mov	fp, r2
    1d18:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    1d1a:	b3a6      	cbz	r6, 1d86 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1d1c:	2110      	movs	r1, #16
    1d1e:	f8cd 9000 	str.w	r9, [sp]
    1d22:	4633      	mov	r3, r6
    1d24:	4652      	mov	r2, sl
    1d26:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1d28:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1d2c:	f7fe fc3e 	bl	5ac <cbvprintf_package>
    1d30:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d32:	f105 0017 	add.w	r0, r5, #23
    1d36:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    1d38:	4b14      	ldr	r3, [pc, #80]	; (1d8c <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d3a:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    1d3c:	f004 0407 	and.w	r4, r4, #7
    1d40:	f00b 0b07 	and.w	fp, fp, #7
    1d44:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1d46:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    1d4a:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    1d4e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    1d52:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    1d54:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    1d56:	f7ff fdf7 	bl	1948 <z_log_msg_alloc>
	struct log_msg_desc desc =
    1d5a:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1d5e:	4605      	mov	r5, r0
    1d60:	b140      	cbz	r0, 1d74 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1d62:	b13e      	cbz	r6, 1d74 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1d64:	9903      	ldr	r1, [sp, #12]
    1d66:	f8cd 9000 	str.w	r9, [sp]
    1d6a:	4633      	mov	r3, r6
    1d6c:	4652      	mov	r2, sl
    1d6e:	3010      	adds	r0, #16
    1d70:	f7fe fc1c 	bl	5ac <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    1d74:	4643      	mov	r3, r8
    1d76:	4622      	mov	r2, r4
    1d78:	4639      	mov	r1, r7
    1d7a:	4628      	mov	r0, r5
	}
}
    1d7c:	b007      	add	sp, #28
    1d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    1d82:	f004 bc54 	b.w	662e <z_log_msg_finalize>
		plen = 0;
    1d86:	4631      	mov	r1, r6
    1d88:	e7d3      	b.n	1d32 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    1d8a:	bf00      	nop
    1d8c:	000ffe00 	.word	0x000ffe00

00001d90 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1d90:	b40e      	push	{r1, r2, r3}
    1d92:	b503      	push	{r0, r1, lr}
    1d94:	ab03      	add	r3, sp, #12
    1d96:	4601      	mov	r1, r0
    1d98:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1d9c:	4804      	ldr	r0, [pc, #16]	; (1db0 <print_formatted+0x20>)
	va_start(args, fmt);
    1d9e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1da0:	f004 fc6b 	bl	667a <cbvprintf>
	va_end(args);

	return length;
}
    1da4:	b002      	add	sp, #8
    1da6:	f85d eb04 	ldr.w	lr, [sp], #4
    1daa:	b003      	add	sp, #12
    1dac:	4770      	bx	lr
    1dae:	bf00      	nop
    1db0:	000066a3 	.word	0x000066a3

00001db4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1db4:	06ca      	lsls	r2, r1, #27
    1db6:	d405      	bmi.n	1dc4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1db8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    1dba:	bf4c      	ite	mi
    1dbc:	4902      	ldrmi	r1, [pc, #8]	; (1dc8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    1dbe:	4903      	ldrpl	r1, [pc, #12]	; (1dcc <newline_print+0x18>)
    1dc0:	f7ff bfe6 	b.w	1d90 <print_formatted>
	}
}
    1dc4:	4770      	bx	lr
    1dc6:	bf00      	nop
    1dc8:	00007516 	.word	0x00007516
    1dcc:	00007515 	.word	0x00007515

00001dd0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    1dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dd4:	b089      	sub	sp, #36	; 0x24
    1dd6:	469b      	mov	fp, r3
    1dd8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1ddc:	9304      	str	r3, [sp, #16]
    1dde:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    1de2:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    1de4:	9b04      	ldr	r3, [sp, #16]
{
    1de6:	9206      	str	r2, [sp, #24]
    1de8:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    1dec:	4604      	mov	r4, r0
    1dee:	460d      	mov	r5, r1
	if (!raw_string) {
    1df0:	2b00      	cmp	r3, #0
    1df2:	f000 8087 	beq.w	1f04 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1df6:	f006 0308 	and.w	r3, r6, #8
    1dfa:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    1dfc:	f004 fbff 	bl	65fe <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1e00:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    1e04:	4602      	mov	r2, r0
    1e06:	2800      	cmp	r0, #0
    1e08:	d04b      	beq.n	1ea2 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    1e0a:	4986      	ldr	r1, [pc, #536]	; (2024 <log_output_process+0x254>)
    1e0c:	4620      	mov	r0, r4
    1e0e:	f7ff ffbf 	bl	1d90 <print_formatted>
    1e12:	4680      	mov	r8, r0
	if (stamp) {
    1e14:	f1ba 0f00 	cmp.w	sl, #0
    1e18:	d008      	beq.n	1e2c <log_output_process+0x5c>
	if (!format) {
    1e1a:	f016 0f44 	tst.w	r6, #68	; 0x44
    1e1e:	d142      	bne.n	1ea6 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1e20:	4981      	ldr	r1, [pc, #516]	; (2028 <log_output_process+0x258>)
    1e22:	462a      	mov	r2, r5
    1e24:	4620      	mov	r0, r4
    1e26:	f7ff ffb3 	bl	1d90 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1e2a:	4480      	add	r8, r0
	if (color) {
    1e2c:	f006 0301 	and.w	r3, r6, #1
    1e30:	b15b      	cbz	r3, 1e4a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    1e32:	4b7e      	ldr	r3, [pc, #504]	; (202c <log_output_process+0x25c>)
    1e34:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    1e36:	497e      	ldr	r1, [pc, #504]	; (2030 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    1e38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    1e3c:	4b7d      	ldr	r3, [pc, #500]	; (2034 <log_output_process+0x264>)
    1e3e:	4620      	mov	r0, r4
    1e40:	2a00      	cmp	r2, #0
    1e42:	bf08      	it	eq
    1e44:	461a      	moveq	r2, r3
    1e46:	f7ff ffa3 	bl	1d90 <print_formatted>
	if (level_on) {
    1e4a:	f006 0308 	and.w	r3, r6, #8
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d055      	beq.n	1efe <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    1e52:	4b79      	ldr	r3, [pc, #484]	; (2038 <log_output_process+0x268>)
    1e54:	9a04      	ldr	r2, [sp, #16]
    1e56:	4979      	ldr	r1, [pc, #484]	; (203c <log_output_process+0x26c>)
    1e58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1e5c:	4620      	mov	r0, r4
    1e5e:	f7ff ff97 	bl	1d90 <print_formatted>
    1e62:	4605      	mov	r5, r0
	if (domain) {
    1e64:	9b06      	ldr	r3, [sp, #24]
    1e66:	b12b      	cbz	r3, 1e74 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    1e68:	4975      	ldr	r1, [pc, #468]	; (2040 <log_output_process+0x270>)
    1e6a:	461a      	mov	r2, r3
    1e6c:	4620      	mov	r0, r4
    1e6e:	f7ff ff8f 	bl	1d90 <print_formatted>
    1e72:	4405      	add	r5, r0
	if (source) {
    1e74:	f1bb 0f00 	cmp.w	fp, #0
    1e78:	d005      	beq.n	1e86 <log_output_process+0xb6>
		total += print_formatted(output,
    1e7a:	4972      	ldr	r1, [pc, #456]	; (2044 <log_output_process+0x274>)
    1e7c:	465a      	mov	r2, fp
    1e7e:	4620      	mov	r0, r4
    1e80:	f7ff ff86 	bl	1d90 <print_formatted>
    1e84:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    1e86:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    1e88:	f1b9 0f00 	cmp.w	r9, #0
    1e8c:	d149      	bne.n	1f22 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    1e8e:	2f00      	cmp	r7, #0
    1e90:	d14f      	bne.n	1f32 <log_output_process+0x162>
	if (color) {
    1e92:	07f3      	lsls	r3, r6, #31
    1e94:	f100 80c0 	bmi.w	2018 <log_output_process+0x248>
	newline_print(output, flags);
    1e98:	4631      	mov	r1, r6
    1e9a:	4620      	mov	r0, r4
    1e9c:	f7ff ff8a 	bl	1db4 <newline_print>
}
    1ea0:	e0b4      	b.n	200c <log_output_process+0x23c>
	uint32_t length = 0U;
    1ea2:	4680      	mov	r8, r0
    1ea4:	e7b6      	b.n	1e14 <log_output_process+0x44>
	} else if (freq != 0U) {
    1ea6:	4b68      	ldr	r3, [pc, #416]	; (2048 <log_output_process+0x278>)
    1ea8:	6818      	ldr	r0, [r3, #0]
    1eaa:	2800      	cmp	r0, #0
    1eac:	d0bd      	beq.n	1e2a <log_output_process+0x5a>
		timestamp /= timestamp_div;
    1eae:	4b67      	ldr	r3, [pc, #412]	; (204c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    1eb0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1eb4:	681b      	ldr	r3, [r3, #0]
    1eb6:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    1eba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1ebe:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    1ec2:	fb00 5513 	mls	r5, r0, r3, r5
    1ec6:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    1eca:	fb0e f505 	mul.w	r5, lr, r5
    1ece:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    1ed2:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ed4:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    1ed8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1edc:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    1ee0:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ee4:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    1ee8:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1eea:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    1eee:	4958      	ldr	r1, [pc, #352]	; (2050 <log_output_process+0x280>)
    1ef0:	e9cd c501 	strd	ip, r5, [sp, #4]
    1ef4:	4652      	mov	r2, sl
    1ef6:	4620      	mov	r0, r4
    1ef8:	f7ff ff4a 	bl	1d90 <print_formatted>
    1efc:	e795      	b.n	1e2a <log_output_process+0x5a>
	int total = 0;
    1efe:	f006 0508 	and.w	r5, r6, #8
    1f02:	e7af      	b.n	1e64 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1f04:	f1bb 0f01 	cmp.w	fp, #1
    1f08:	d106      	bne.n	1f18 <log_output_process+0x148>
	if (package) {
    1f0a:	f1b9 0f00 	cmp.w	r9, #0
    1f0e:	d164      	bne.n	1fda <log_output_process+0x20a>
	if (data_len) {
    1f10:	2f00      	cmp	r7, #0
    1f12:	d07b      	beq.n	200c <log_output_process+0x23c>
		prefix_offset = 0;
    1f14:	2500      	movs	r5, #0
    1f16:	e00c      	b.n	1f32 <log_output_process+0x162>
	if (package) {
    1f18:	f1b9 0f00 	cmp.w	r9, #0
    1f1c:	d0f8      	beq.n	1f10 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1f1e:	484d      	ldr	r0, [pc, #308]	; (2054 <log_output_process+0x284>)
    1f20:	e05c      	b.n	1fdc <log_output_process+0x20c>
		cb = out_func;
    1f22:	484d      	ldr	r0, [pc, #308]	; (2058 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1f24:	494d      	ldr	r1, [pc, #308]	; (205c <log_output_process+0x28c>)
    1f26:	464b      	mov	r3, r9
    1f28:	4622      	mov	r2, r4
    1f2a:	f003 ff1c 	bl	5d66 <cbpprintf_external>
	if (data_len) {
    1f2e:	2f00      	cmp	r7, #0
    1f30:	d068      	beq.n	2004 <log_output_process+0x234>
		print_formatted(output, " ");
    1f32:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2060 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    1f36:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2064 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f3a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    1f3c:	4631      	mov	r1, r6
    1f3e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f40:	46b8      	mov	r8, r7
    1f42:	bf28      	it	cs
    1f44:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    1f48:	f7ff ff34 	bl	1db4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    1f4c:	f04f 0b00 	mov.w	fp, #0
    1f50:	455d      	cmp	r5, fp
    1f52:	dc45      	bgt.n	1fe0 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    1f54:	9b05      	ldr	r3, [sp, #20]
    1f56:	4651      	mov	r1, sl
    1f58:	781a      	ldrb	r2, [r3, #0]
    1f5a:	4620      	mov	r0, r4
    1f5c:	f7ff ff18 	bl	1d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f60:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    1f64:	f01b 0f07 	tst.w	fp, #7
    1f68:	d103      	bne.n	1f72 <log_output_process+0x1a2>
			print_formatted(output, " ");
    1f6a:	4649      	mov	r1, r9
    1f6c:	4620      	mov	r0, r4
    1f6e:	f7ff ff0f 	bl	1d90 <print_formatted>
		if (i < length) {
    1f72:	45d8      	cmp	r8, fp
    1f74:	d93b      	bls.n	1fee <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    1f76:	9b05      	ldr	r3, [sp, #20]
    1f78:	4651      	mov	r1, sl
    1f7a:	f813 200b 	ldrb.w	r2, [r3, fp]
    1f7e:	4620      	mov	r0, r4
    1f80:	f7ff ff06 	bl	1d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f84:	f10b 0b01 	add.w	fp, fp, #1
    1f88:	f1bb 0f10 	cmp.w	fp, #16
    1f8c:	d1ea      	bne.n	1f64 <log_output_process+0x194>
	print_formatted(output, "|");
    1f8e:	4936      	ldr	r1, [pc, #216]	; (2068 <log_output_process+0x298>)
    1f90:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f92:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    1f96:	f7ff fefb 	bl	1d90 <print_formatted>
		if (i < length) {
    1f9a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    1f9c:	9b05      	ldr	r3, [sp, #20]
    1f9e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    1fa0:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    1fa4:	295f      	cmp	r1, #95	; 0x5f
    1fa6:	bf28      	it	cs
    1fa8:	222e      	movcs	r2, #46	; 0x2e
    1faa:	4930      	ldr	r1, [pc, #192]	; (206c <log_output_process+0x29c>)
    1fac:	4620      	mov	r0, r4
    1fae:	f7ff feef 	bl	1d90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1fb2:	f10b 0b01 	add.w	fp, fp, #1
    1fb6:	f1bb 0f10 	cmp.w	fp, #16
    1fba:	d01d      	beq.n	1ff8 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    1fbc:	f01b 0f07 	tst.w	fp, #7
    1fc0:	d103      	bne.n	1fca <log_output_process+0x1fa>
			print_formatted(output, " ");
    1fc2:	4649      	mov	r1, r9
    1fc4:	4620      	mov	r0, r4
    1fc6:	f7ff fee3 	bl	1d90 <print_formatted>
		if (i < length) {
    1fca:	45d8      	cmp	r8, fp
    1fcc:	465a      	mov	r2, fp
    1fce:	d8e5      	bhi.n	1f9c <log_output_process+0x1cc>
			print_formatted(output, " ");
    1fd0:	4649      	mov	r1, r9
    1fd2:	4620      	mov	r0, r4
    1fd4:	f7ff fedc 	bl	1d90 <print_formatted>
    1fd8:	e7eb      	b.n	1fb2 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1fda:	481f      	ldr	r0, [pc, #124]	; (2058 <log_output_process+0x288>)
		prefix_offset = 0;
    1fdc:	9d04      	ldr	r5, [sp, #16]
    1fde:	e7a1      	b.n	1f24 <log_output_process+0x154>
		print_formatted(output, " ");
    1fe0:	4649      	mov	r1, r9
    1fe2:	4620      	mov	r0, r4
    1fe4:	f7ff fed4 	bl	1d90 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1fe8:	f10b 0b01 	add.w	fp, fp, #1
    1fec:	e7b0      	b.n	1f50 <log_output_process+0x180>
			print_formatted(output, "   ");
    1fee:	4920      	ldr	r1, [pc, #128]	; (2070 <log_output_process+0x2a0>)
    1ff0:	4620      	mov	r0, r4
    1ff2:	f7ff fecd 	bl	1d90 <print_formatted>
    1ff6:	e7c5      	b.n	1f84 <log_output_process+0x1b4>
		data += length;
    1ff8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    1ffa:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    1ffe:	4443      	add	r3, r8
    2000:	9305      	str	r3, [sp, #20]
	} while (len);
    2002:	d19a      	bne.n	1f3a <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2004:	9b04      	ldr	r3, [sp, #16]
    2006:	2b00      	cmp	r3, #0
    2008:	f47f af43 	bne.w	1e92 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    200c:	4620      	mov	r0, r4
}
    200e:	b009      	add	sp, #36	; 0x24
    2010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    2014:	f004 bb38 	b.w	6688 <log_output_flush>
		print_formatted(output, "%s", log_color);
    2018:	4a06      	ldr	r2, [pc, #24]	; (2034 <log_output_process+0x264>)
    201a:	4905      	ldr	r1, [pc, #20]	; (2030 <log_output_process+0x260>)
    201c:	4620      	mov	r0, r4
    201e:	f7ff feb7 	bl	1d90 <print_formatted>
}
    2022:	e739      	b.n	1e98 <log_output_process+0xc8>
    2024:	0000751d 	.word	0x0000751d
    2028:	00007521 	.word	0x00007521
    202c:	0000717c 	.word	0x0000717c
    2030:	000073e6 	.word	0x000073e6
    2034:	00007518 	.word	0x00007518
    2038:	00007190 	.word	0x00007190
    203c:	00007546 	.word	0x00007546
    2040:	0000754c 	.word	0x0000754c
    2044:	00007550 	.word	0x00007550
    2048:	20000724 	.word	0x20000724
    204c:	20000720 	.word	0x20000720
    2050:	0000752a 	.word	0x0000752a
    2054:	000066d9 	.word	0x000066d9
    2058:	000066a3 	.word	0x000066a3
    205c:	0000667b 	.word	0x0000667b
    2060:	0000755d 	.word	0x0000755d
    2064:	00007555 	.word	0x00007555
    2068:	0000755f 	.word	0x0000755f
    206c:	00007561 	.word	0x00007561
    2070:	0000755b 	.word	0x0000755b

00002074 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2078:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    207a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    207c:	688e      	ldr	r6, [r1, #8]
    207e:	b086      	sub	sp, #24
    2080:	4605      	mov	r5, r0
    2082:	460c      	mov	r4, r1
    2084:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2086:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    208a:	b15b      	cbz	r3, 20a4 <log_output_msg_process+0x30>
    208c:	4a13      	ldr	r2, [pc, #76]	; (20dc <log_output_msg_process+0x68>)
    208e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2090:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2094:	2900      	cmp	r1, #0
    2096:	db1f      	blt.n	20d8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2098:	7820      	ldrb	r0, [r4, #0]
    209a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    209e:	f7ff fd8b 	bl	1bb8 <log_source_name_get>
    20a2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    20a4:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    20a6:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    20a8:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    20ac:	9700      	str	r7, [sp, #0]
    20ae:	f3c2 224a 	ubfx	r2, r2, #9, #11
    20b2:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    20b4:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    20b8:	f3c0 100b 	ubfx	r0, r0, #4, #12
    20bc:	bf08      	it	eq
    20be:	2100      	moveq	r1, #0
    20c0:	e9cd 0803 	strd	r0, r8, [sp, #12]
    20c4:	e9cd 1401 	strd	r1, r4, [sp, #4]
    20c8:	2200      	movs	r2, #0
    20ca:	4631      	mov	r1, r6
    20cc:	4628      	mov	r0, r5
    20ce:	f7ff fe7f 	bl	1dd0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    20d2:	b006      	add	sp, #24
    20d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    20d8:	2300      	movs	r3, #0
    20da:	e7e3      	b.n	20a4 <log_output_msg_process+0x30>
    20dc:	0000708c 	.word	0x0000708c

000020e0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    20e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20e2:	f242 730f 	movw	r3, #9999	; 0x270f
    20e6:	428b      	cmp	r3, r1
    20e8:	bf28      	it	cs
    20ea:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    20ec:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20ee:	4a0f      	ldr	r2, [pc, #60]	; (212c <log_output_dropped_process+0x4c>)
{
    20f0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20f2:	2105      	movs	r1, #5
    20f4:	4668      	mov	r0, sp
    20f6:	f003 feae 	bl	5e56 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    20fa:	6863      	ldr	r3, [r4, #4]
    20fc:	490c      	ldr	r1, [pc, #48]	; (2130 <log_output_dropped_process+0x50>)
    20fe:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2100:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2102:	220b      	movs	r2, #11
    2104:	4628      	mov	r0, r5
    2106:	f004 faab 	bl	6660 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    210a:	6863      	ldr	r3, [r4, #4]
    210c:	4632      	mov	r2, r6
    210e:	4669      	mov	r1, sp
    2110:	4628      	mov	r0, r5
    2112:	685b      	ldr	r3, [r3, #4]
    2114:	f004 faa4 	bl	6660 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2118:	6863      	ldr	r3, [r4, #4]
    211a:	4906      	ldr	r1, [pc, #24]	; (2134 <log_output_dropped_process+0x54>)
    211c:	685b      	ldr	r3, [r3, #4]
    211e:	221b      	movs	r2, #27
    2120:	4628      	mov	r0, r5
    2122:	f004 fa9d 	bl	6660 <buffer_write>
		     output->control_block->ctx);
}
    2126:	b002      	add	sp, #8
    2128:	bd70      	pop	{r4, r5, r6, pc}
    212a:	bf00      	nop
    212c:	00007b26 	.word	0x00007b26
    2130:	00007580 	.word	0x00007580
    2134:	00007564 	.word	0x00007564

00002138 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2138:	4a07      	ldr	r2, [pc, #28]	; (2158 <log_output_timestamp_freq_set+0x20>)
    213a:	2100      	movs	r1, #0
    213c:	2301      	movs	r3, #1
    213e:	4290      	cmp	r0, r2
    2140:	d806      	bhi.n	2150 <log_output_timestamp_freq_set+0x18>
    2142:	4a06      	ldr	r2, [pc, #24]	; (215c <log_output_timestamp_freq_set+0x24>)
    2144:	b901      	cbnz	r1, 2148 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2146:	2301      	movs	r3, #1
    2148:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    214a:	4b05      	ldr	r3, [pc, #20]	; (2160 <log_output_timestamp_freq_set+0x28>)
    214c:	6018      	str	r0, [r3, #0]
}
    214e:	4770      	bx	lr
		frequency /= 2U;
    2150:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2152:	005b      	lsls	r3, r3, #1
    2154:	2101      	movs	r1, #1
    2156:	e7f2      	b.n	213e <log_output_timestamp_freq_set+0x6>
    2158:	000f4240 	.word	0x000f4240
    215c:	20000720 	.word	0x20000720
    2160:	20000724 	.word	0x20000724

00002164 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2164:	4b01      	ldr	r3, [pc, #4]	; (216c <log_backend_rtt_init+0x8>)
    2166:	2201      	movs	r2, #1
    2168:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    216a:	4770      	bx	lr
    216c:	200008ee 	.word	0x200008ee

00002170 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2170:	4b01      	ldr	r3, [pc, #4]	; (2178 <format_set+0x8>)
	return 0;
}
    2172:	2000      	movs	r0, #0
	log_format_current = log_type;
    2174:	6019      	str	r1, [r3, #0]
}
    2176:	4770      	bx	lr
    2178:	2000073c 	.word	0x2000073c

0000217c <panic>:
	panic_mode = true;
    217c:	4b02      	ldr	r3, [pc, #8]	; (2188 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    217e:	4803      	ldr	r0, [pc, #12]	; (218c <panic+0x10>)
    2180:	2201      	movs	r2, #1
    2182:	701a      	strb	r2, [r3, #0]
    2184:	f004 ba80 	b.w	6688 <log_output_flush>
    2188:	200008ef 	.word	0x200008ef
    218c:	000071c0 	.word	0x000071c0

00002190 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2190:	4801      	ldr	r0, [pc, #4]	; (2198 <dropped+0x8>)
    2192:	f7ff bfa5 	b.w	20e0 <log_output_dropped_process>
    2196:	bf00      	nop
    2198:	000071c0 	.word	0x000071c0

0000219c <process>:
{
    219c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    219e:	4b06      	ldr	r3, [pc, #24]	; (21b8 <process+0x1c>)
    21a0:	6818      	ldr	r0, [r3, #0]
{
    21a2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    21a4:	f7ff fb42 	bl	182c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    21a8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    21aa:	4603      	mov	r3, r0
}
    21ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    21b0:	4802      	ldr	r0, [pc, #8]	; (21bc <process+0x20>)
    21b2:	220f      	movs	r2, #15
    21b4:	4718      	bx	r3
    21b6:	bf00      	nop
    21b8:	2000073c 	.word	0x2000073c
    21bc:	000071c0 	.word	0x000071c0

000021c0 <on_failed_write>:
	if (retry_cnt == 0) {
    21c0:	b910      	cbnz	r0, 21c8 <on_failed_write+0x8>
		host_present = false;
    21c2:	4b07      	ldr	r3, [pc, #28]	; (21e0 <on_failed_write+0x20>)
    21c4:	7018      	strb	r0, [r3, #0]
}
    21c6:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    21c8:	4b06      	ldr	r3, [pc, #24]	; (21e4 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    21ca:	781b      	ldrb	r3, [r3, #0]
    21cc:	b11b      	cbz	r3, 21d6 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    21ce:	f241 3088 	movw	r0, #5000	; 0x1388
    21d2:	f004 be3f 	b.w	6e54 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    21d6:	20a4      	movs	r0, #164	; 0xa4
    21d8:	2100      	movs	r1, #0
    21da:	f003 bb23 	b.w	5824 <z_impl_k_sleep>
    21de:	bf00      	nop
    21e0:	200008ee 	.word	0x200008ee
    21e4:	200008ef 	.word	0x200008ef

000021e8 <data_out_block_mode>:
{
    21e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    21ec:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2264 <data_out_block_mode+0x7c>
    21f0:	4f1d      	ldr	r7, [pc, #116]	; (2268 <data_out_block_mode+0x80>)
{
    21f2:	4680      	mov	r8, r0
    21f4:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    21f6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    21f8:	f899 5000 	ldrb.w	r5, [r9]
    21fc:	b995      	cbnz	r5, 2224 <data_out_block_mode+0x3c>
			RTT_LOCK();
    21fe:	f002 fcfb 	bl	4bf8 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2202:	4628      	mov	r0, r5
    2204:	4632      	mov	r2, r6
    2206:	4641      	mov	r1, r8
    2208:	f002 fca4 	bl	4b54 <SEGGER_RTT_WriteSkipNoLock>
    220c:	4605      	mov	r5, r0
			RTT_UNLOCK();
    220e:	f002 fcfd 	bl	4c0c <zephyr_rtt_mutex_unlock>
		if (ret) {
    2212:	b1e5      	cbz	r5, 224e <data_out_block_mode+0x66>
	host_present = true;
    2214:	2301      	movs	r3, #1
    2216:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    2218:	f899 3000 	ldrb.w	r3, [r9]
    221c:	b973      	cbnz	r3, 223c <data_out_block_mode+0x54>
}
    221e:	4630      	mov	r0, r6
    2220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2224:	4632      	mov	r2, r6
    2226:	4641      	mov	r1, r8
    2228:	2000      	movs	r0, #0
    222a:	f002 fc93 	bl	4b54 <SEGGER_RTT_WriteSkipNoLock>
    222e:	4605      	mov	r5, r0
    2230:	e7ef      	b.n	2212 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    2232:	4620      	mov	r0, r4
    2234:	f7ff ffc4 	bl	21c0 <on_failed_write>
    2238:	1e65      	subs	r5, r4, #1
    223a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    223c:	2000      	movs	r0, #0
    223e:	f002 fcd1 	bl	4be4 <SEGGER_RTT_HasDataUp>
    2242:	2800      	cmp	r0, #0
    2244:	d0eb      	beq.n	221e <data_out_block_mode+0x36>
    2246:	783b      	ldrb	r3, [r7, #0]
    2248:	2b00      	cmp	r3, #0
    224a:	d1f2      	bne.n	2232 <data_out_block_mode+0x4a>
    224c:	e7e7      	b.n	221e <data_out_block_mode+0x36>
		} else if (host_present) {
    224e:	783b      	ldrb	r3, [r7, #0]
    2250:	2b00      	cmp	r3, #0
    2252:	d0e4      	beq.n	221e <data_out_block_mode+0x36>
			retry_cnt--;
    2254:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    2256:	4620      	mov	r0, r4
    2258:	f7ff ffb2 	bl	21c0 <on_failed_write>
	} while ((ret == 0) && host_present);
    225c:	783b      	ldrb	r3, [r7, #0]
    225e:	2b00      	cmp	r3, #0
    2260:	d1ca      	bne.n	21f8 <data_out_block_mode+0x10>
    2262:	e7dc      	b.n	221e <data_out_block_mode+0x36>
    2264:	200008ef 	.word	0x200008ef
    2268:	200008ee 	.word	0x200008ee

0000226c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    226c:	4b01      	ldr	r3, [pc, #4]	; (2274 <format_set+0x8>)
	return 0;
}
    226e:	2000      	movs	r0, #0
	log_format_current = log_type;
    2270:	6019      	str	r1, [r3, #0]
}
    2272:	4770      	bx	lr
    2274:	20000754 	.word	0x20000754

00002278 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    2278:	4b02      	ldr	r3, [pc, #8]	; (2284 <panic+0xc>)
	log_output_flush(output);
    227a:	4803      	ldr	r0, [pc, #12]	; (2288 <panic+0x10>)
    227c:	2201      	movs	r2, #1
    227e:	701a      	strb	r2, [r3, #0]
    2280:	f004 ba02 	b.w	6688 <log_output_flush>
    2284:	20000901 	.word	0x20000901
    2288:	000071ec 	.word	0x000071ec

0000228c <dropped>:
	log_output_dropped_process(output, cnt);
    228c:	4801      	ldr	r0, [pc, #4]	; (2294 <dropped+0x8>)
    228e:	f7ff bf27 	b.w	20e0 <log_output_dropped_process>
    2292:	bf00      	nop
    2294:	000071ec 	.word	0x000071ec

00002298 <process>:
{
    2298:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    229a:	4b06      	ldr	r3, [pc, #24]	; (22b4 <process+0x1c>)
    229c:	6818      	ldr	r0, [r3, #0]
{
    229e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    22a0:	f7ff fac4 	bl	182c <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    22a4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    22a6:	4603      	mov	r3, r0
}
    22a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    22ac:	4802      	ldr	r0, [pc, #8]	; (22b8 <process+0x20>)
    22ae:	220f      	movs	r2, #15
    22b0:	4718      	bx	r3
    22b2:	bf00      	nop
    22b4:	20000754 	.word	0x20000754
    22b8:	000071ec 	.word	0x000071ec

000022bc <char_out>:
{
    22bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    22be:	4f07      	ldr	r7, [pc, #28]	; (22dc <char_out+0x20>)
    22c0:	460d      	mov	r5, r1
    22c2:	4604      	mov	r4, r0
    22c4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    22c6:	42b4      	cmp	r4, r6
    22c8:	d101      	bne.n	22ce <char_out+0x12>
}
    22ca:	4628      	mov	r0, r5
    22cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    22ce:	f814 1b01 	ldrb.w	r1, [r4], #1
    22d2:	68bb      	ldr	r3, [r7, #8]
    22d4:	4801      	ldr	r0, [pc, #4]	; (22dc <char_out+0x20>)
    22d6:	685b      	ldr	r3, [r3, #4]
    22d8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    22da:	e7f4      	b.n	22c6 <char_out+0xa>
    22dc:	00006f28 	.word	0x00006f28

000022e0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    22e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    22e4:	4605      	mov	r5, r0
	__asm__ volatile(
    22e6:	f04f 0320 	mov.w	r3, #32
    22ea:	f3ef 8611 	mrs	r6, BASEPRI
    22ee:	f383 8812 	msr	BASEPRI_MAX, r3
    22f2:	f3bf 8f6f 	isb	sy
	return list->head;
    22f6:	4b0e      	ldr	r3, [pc, #56]	; (2330 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    22f8:	4f0e      	ldr	r7, [pc, #56]	; (2334 <pm_state_notify+0x54>)
    22fa:	681c      	ldr	r4, [r3, #0]
    22fc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2338 <pm_state_notify+0x58>
    2300:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2304:	b92c      	cbnz	r4, 2312 <pm_state_notify+0x32>
	__asm__ volatile(
    2306:	f386 8811 	msr	BASEPRI, r6
    230a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    230e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    2312:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    2316:	2d00      	cmp	r5, #0
    2318:	bf18      	it	ne
    231a:	4613      	movne	r3, r2
		if (callback) {
    231c:	b12b      	cbz	r3, 232a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    231e:	f898 2010 	ldrb.w	r2, [r8, #16]
    2322:	fb09 f202 	mul.w	r2, r9, r2
    2326:	5cb8      	ldrb	r0, [r7, r2]
    2328:	4798      	blx	r3
	return node->next;
    232a:	6824      	ldr	r4, [r4, #0]
    232c:	e7ea      	b.n	2304 <pm_state_notify+0x24>
    232e:	bf00      	nop
    2330:	20000770 	.word	0x20000770
    2334:	20000764 	.word	0x20000764
    2338:	200008b8 	.word	0x200008b8

0000233c <pm_system_resume>:

void pm_system_resume(void)
{
    233c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    233e:	4b19      	ldr	r3, [pc, #100]	; (23a4 <pm_system_resume+0x68>)
    2340:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2342:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2346:	f004 031f 	and.w	r3, r4, #31
    234a:	2201      	movs	r2, #1
    234c:	409a      	lsls	r2, r3
    234e:	4b16      	ldr	r3, [pc, #88]	; (23a8 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2350:	0961      	lsrs	r1, r4, #5
    2352:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2356:	43d0      	mvns	r0, r2
    2358:	e853 1f00 	ldrex	r1, [r3]
    235c:	ea01 0500 	and.w	r5, r1, r0
    2360:	e843 5600 	strex	r6, r5, [r3]
    2364:	2e00      	cmp	r6, #0
    2366:	d1f7      	bne.n	2358 <pm_system_resume+0x1c>
    2368:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    236c:	420a      	tst	r2, r1
    236e:	d013      	beq.n	2398 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2370:	4b0e      	ldr	r3, [pc, #56]	; (23ac <pm_system_resume+0x70>)
    2372:	4d0f      	ldr	r5, [pc, #60]	; (23b0 <pm_system_resume+0x74>)
    2374:	b18b      	cbz	r3, 239a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2376:	230c      	movs	r3, #12
    2378:	4363      	muls	r3, r4
    237a:	18ea      	adds	r2, r5, r3
    237c:	5ce8      	ldrb	r0, [r5, r3]
    237e:	7851      	ldrb	r1, [r2, #1]
    2380:	f004 fa08 	bl	6794 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2384:	2000      	movs	r0, #0
    2386:	f7ff ffab 	bl	22e0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    238a:	230c      	movs	r3, #12
    238c:	435c      	muls	r4, r3
    238e:	192a      	adds	r2, r5, r4
    2390:	2300      	movs	r3, #0
    2392:	512b      	str	r3, [r5, r4]
    2394:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2398:	bd70      	pop	{r4, r5, r6, pc}
    239a:	f383 8811 	msr	BASEPRI, r3
    239e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    23a2:	e7ef      	b.n	2384 <pm_system_resume+0x48>
    23a4:	200008b8 	.word	0x200008b8
    23a8:	20000778 	.word	0x20000778
    23ac:	00006795 	.word	0x00006795
    23b0:	20000764 	.word	0x20000764

000023b4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    23b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    23b8:	4b35      	ldr	r3, [pc, #212]	; (2490 <pm_system_suspend+0xdc>)
{
    23ba:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    23bc:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    23be:	f04f 0320 	mov.w	r3, #32
    23c2:	f3ef 8811 	mrs	r8, BASEPRI
    23c6:	f383 8812 	msr	BASEPRI_MAX, r3
    23ca:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    23ce:	240c      	movs	r4, #12
    23d0:	4b30      	ldr	r3, [pc, #192]	; (2494 <pm_system_suspend+0xe0>)
    23d2:	4e31      	ldr	r6, [pc, #196]	; (2498 <pm_system_suspend+0xe4>)
    23d4:	436c      	muls	r4, r5
    23d6:	191a      	adds	r2, r3, r4
    23d8:	5d19      	ldrb	r1, [r3, r4]
    23da:	2900      	cmp	r1, #0
    23dc:	d04c      	beq.n	2478 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    23de:	ca07      	ldmia	r2, {r0, r1, r2}
    23e0:	eb06 0c04 	add.w	ip, r6, r4
    23e4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    23e8:	2200      	movs	r2, #0
    23ea:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    23ec:	f388 8811 	msr	BASEPRI, r8
    23f0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    23f4:	230c      	movs	r3, #12
    23f6:	436b      	muls	r3, r5
    23f8:	18f2      	adds	r2, r6, r3
    23fa:	5cf0      	ldrb	r0, [r6, r3]
    23fc:	2800      	cmp	r0, #0
    23fe:	d039      	beq.n	2474 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    2400:	1c7b      	adds	r3, r7, #1
    2402:	d010      	beq.n	2426 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2404:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2408:	4c24      	ldr	r4, [pc, #144]	; (249c <pm_system_suspend+0xe8>)
    240a:	4a25      	ldr	r2, [pc, #148]	; (24a0 <pm_system_suspend+0xec>)
    240c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2410:	2100      	movs	r1, #0
    2412:	fbec 4100 	umlal	r4, r1, ip, r0
    2416:	2300      	movs	r3, #0
    2418:	4620      	mov	r0, r4
    241a:	f7fd fe5f 	bl	dc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    241e:	2101      	movs	r1, #1
    2420:	1a38      	subs	r0, r7, r0
    2422:	f001 fd4b 	bl	3ebc <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2426:	f003 f943 	bl	56b0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    242a:	2001      	movs	r0, #1
    242c:	f7ff ff58 	bl	22e0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2430:	f3bf 8f5b 	dmb	ish
    2434:	4b1b      	ldr	r3, [pc, #108]	; (24a4 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2436:	096a      	lsrs	r2, r5, #5
    2438:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    243c:	f005 011f 	and.w	r1, r5, #31
    2440:	2201      	movs	r2, #1
    2442:	408a      	lsls	r2, r1
    2444:	e853 0f00 	ldrex	r0, [r3]
    2448:	4310      	orrs	r0, r2
    244a:	e843 0100 	strex	r1, r0, [r3]
    244e:	2900      	cmp	r1, #0
    2450:	d1f8      	bne.n	2444 <pm_system_suspend+0x90>
    2452:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2456:	4b14      	ldr	r3, [pc, #80]	; (24a8 <pm_system_suspend+0xf4>)
    2458:	b13b      	cbz	r3, 246a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    245a:	230c      	movs	r3, #12
    245c:	fb03 f005 	mul.w	r0, r3, r5
    2460:	1833      	adds	r3, r6, r0
    2462:	5c30      	ldrb	r0, [r6, r0]
    2464:	7859      	ldrb	r1, [r3, #1]
    2466:	f004 f989 	bl	677c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    246a:	f7ff ff67 	bl	233c <pm_system_resume>
	k_sched_unlock();
    246e:	f003 f933 	bl	56d8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2472:	2001      	movs	r0, #1
}
    2474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2478:	4601      	mov	r1, r0
    247a:	4628      	mov	r0, r5
    247c:	f000 f816 	bl	24ac <pm_policy_next_state>
		if (info != NULL) {
    2480:	2800      	cmp	r0, #0
    2482:	d0b3      	beq.n	23ec <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2484:	c807      	ldmia	r0, {r0, r1, r2}
    2486:	4434      	add	r4, r6
    2488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    248c:	e7ae      	b.n	23ec <pm_system_suspend+0x38>
    248e:	bf00      	nop
    2490:	200008b8 	.word	0x200008b8
    2494:	20000758 	.word	0x20000758
    2498:	20000764 	.word	0x20000764
    249c:	000f423f 	.word	0x000f423f
    24a0:	000f4240 	.word	0x000f4240
    24a4:	20000778 	.word	0x20000778
    24a8:	0000677d 	.word	0x0000677d

000024ac <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    24ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24b0:	b085      	sub	sp, #20
    24b2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    24b4:	a903      	add	r1, sp, #12
    24b6:	f000 f843 	bl	2540 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    24ba:	4b1e      	ldr	r3, [pc, #120]	; (2534 <pm_policy_next_state+0x88>)
    24bc:	9d03      	ldr	r5, [sp, #12]
    24be:	f8d3 a000 	ldr.w	sl, [r3]
    24c2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2538 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    24c6:	1e43      	subs	r3, r0, #1
    24c8:	b21b      	sxth	r3, r3
    24ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    24ce:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    24d0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    24d4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    24d8:	f04f 0b00 	mov.w	fp, #0
    24dc:	b924      	cbnz	r4, 24e8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    24de:	46a1      	mov	r9, r4
}
    24e0:	4648      	mov	r0, r9
    24e2:	b005      	add	sp, #20
    24e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24e8:	6868      	ldr	r0, [r5, #4]
    24ea:	4a14      	ldr	r2, [pc, #80]	; (253c <pm_policy_next_state+0x90>)
    24ec:	46c4      	mov	ip, r8
    24ee:	4659      	mov	r1, fp
    24f0:	fbe0 c107 	umlal	ip, r1, r0, r7
    24f4:	2300      	movs	r3, #0
    24f6:	4660      	mov	r0, ip
    24f8:	f7fd fdf0 	bl	dc <__aeabi_uldivmod>
    24fc:	9001      	str	r0, [sp, #4]
    24fe:	68a8      	ldr	r0, [r5, #8]
    2500:	4a0e      	ldr	r2, [pc, #56]	; (253c <pm_policy_next_state+0x90>)
    2502:	46c4      	mov	ip, r8
    2504:	4659      	mov	r1, fp
    2506:	fbe0 c107 	umlal	ip, r1, r0, r7
    250a:	2300      	movs	r3, #0
    250c:	4660      	mov	r0, ip
    250e:	f7fd fde5 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2512:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    2516:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2518:	d001      	beq.n	251e <pm_policy_next_state+0x72>
    251a:	4582      	cmp	sl, r0
    251c:	d905      	bls.n	252a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    251e:	1c73      	adds	r3, r6, #1
    2520:	d0de      	beq.n	24e0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    2522:	9b01      	ldr	r3, [sp, #4]
    2524:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2526:	42b0      	cmp	r0, r6
    2528:	d9da      	bls.n	24e0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    252a:	3c01      	subs	r4, #1
    252c:	b2a4      	uxth	r4, r4
    252e:	3d0c      	subs	r5, #12
    2530:	e7d4      	b.n	24dc <pm_policy_next_state+0x30>
    2532:	bf00      	nop
    2534:	20000008 	.word	0x20000008
    2538:	000f423f 	.word	0x000f423f
    253c:	000f4240 	.word	0x000f4240

00002540 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2540:	b908      	cbnz	r0, 2546 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2542:	4b02      	ldr	r3, [pc, #8]	; (254c <pm_state_cpu_get_all+0xc>)
    2544:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2546:	2000      	movs	r0, #0
    2548:	4770      	bx	lr
    254a:	bf00      	nop
    254c:	000071fc 	.word	0x000071fc

00002550 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2550:	4901      	ldr	r1, [pc, #4]	; (2558 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2552:	2210      	movs	r2, #16
	str	r2, [r1]
    2554:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2556:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2558:	e000ed10 	.word	0xe000ed10

0000255c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    255c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    255e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2560:	f380 8811 	msr	BASEPRI, r0
	isb
    2564:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    2568:	f3bf 8f4f 	dsb	sy
    256c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    256e:	b662      	cpsie	i
	isb
    2570:	f3bf 8f6f 	isb	sy

	bx	lr
    2574:	4770      	bx	lr
    2576:	bf00      	nop

00002578 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2578:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    257a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    257c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    2580:	f3bf 8f4f 	dsb	sy
    2584:	bf20      	wfe

	msr	BASEPRI, r0
    2586:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    258a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    258c:	4770      	bx	lr
    258e:	bf00      	nop

00002590 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2594:	4681      	mov	r9, r0
    2596:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2598:	460c      	mov	r4, r1
    259a:	2900      	cmp	r1, #0
    259c:	d04c      	beq.n	2638 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    259e:	466e      	mov	r6, sp
    25a0:	b08a      	sub	sp, #40	; 0x28
    25a2:	e9d1 1200 	ldrd	r1, r2, [r1]
    25a6:	68a3      	ldr	r3, [r4, #8]
    25a8:	466d      	mov	r5, sp
    25aa:	4827      	ldr	r0, [pc, #156]	; (2648 <z_arm_fatal_error+0xb8>)
    25ac:	46a8      	mov	r8, r5
    25ae:	f04f 0a05 	mov.w	sl, #5
    25b2:	e9c5 0105 	strd	r0, r1, [r5, #20]
    25b6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    25ba:	f848 af10 	str.w	sl, [r8, #16]!
    25be:	4823      	ldr	r0, [pc, #140]	; (264c <z_arm_fatal_error+0xbc>)
    25c0:	4642      	mov	r2, r8
    25c2:	2300      	movs	r3, #0
    25c4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    25c8:	f7ff fb18 	bl	1bfc <z_impl_z_log_msg_static_create>
    25cc:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    25ce:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    25d2:	6963      	ldr	r3, [r4, #20]
    25d4:	46ad      	mov	sp, r5
    25d6:	481e      	ldr	r0, [pc, #120]	; (2650 <z_arm_fatal_error+0xc0>)
    25d8:	f8c5 a010 	str.w	sl, [r5, #16]
    25dc:	e9c5 0105 	strd	r0, r1, [r5, #20]
    25e0:	e9c5 2307 	strd	r2, r3, [r5, #28]
    25e4:	4819      	ldr	r0, [pc, #100]	; (264c <z_arm_fatal_error+0xbc>)
    25e6:	2300      	movs	r3, #0
    25e8:	4642      	mov	r2, r8
    25ea:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    25ee:	f7ff fb05 	bl	1bfc <z_impl_z_log_msg_static_create>
    25f2:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    25f4:	b088      	sub	sp, #32
    25f6:	69e3      	ldr	r3, [r4, #28]
    25f8:	466d      	mov	r5, sp
    25fa:	4a16      	ldr	r2, [pc, #88]	; (2654 <z_arm_fatal_error+0xc4>)
    25fc:	46a8      	mov	r8, r5
    25fe:	f04f 0a03 	mov.w	sl, #3
    2602:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2606:	f848 af10 	str.w	sl, [r8, #16]!
    260a:	4810      	ldr	r0, [pc, #64]	; (264c <z_arm_fatal_error+0xbc>)
    260c:	2300      	movs	r3, #0
    260e:	4642      	mov	r2, r8
    2610:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2614:	f7ff faf2 	bl	1bfc <z_impl_z_log_msg_static_create>
    2618:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    261a:	69a3      	ldr	r3, [r4, #24]
    261c:	46ad      	mov	sp, r5
    261e:	4a0e      	ldr	r2, [pc, #56]	; (2658 <z_arm_fatal_error+0xc8>)
    2620:	f8c5 a010 	str.w	sl, [r5, #16]
    2624:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2628:	4808      	ldr	r0, [pc, #32]	; (264c <z_arm_fatal_error+0xbc>)
    262a:	2300      	movs	r3, #0
    262c:	4642      	mov	r2, r8
    262e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2632:	f7ff fae3 	bl	1bfc <z_impl_z_log_msg_static_create>
    2636:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2638:	4621      	mov	r1, r4
    263a:	4648      	mov	r0, r9
    263c:	f002 faec 	bl	4c18 <z_fatal_error>
}
    2640:	46bd      	mov	sp, r7
    2642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2646:	bf00      	nop
    2648:	000075d9 	.word	0x000075d9
    264c:	000070e4 	.word	0x000070e4
    2650:	00007608 	.word	0x00007608
    2654:	00007637 	.word	0x00007637
    2658:	00007646 	.word	0x00007646

0000265c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    265c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    265e:	2800      	cmp	r0, #0
    2660:	db07      	blt.n	2672 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2662:	4a04      	ldr	r2, [pc, #16]	; (2674 <arch_irq_enable+0x18>)
    2664:	0941      	lsrs	r1, r0, #5
    2666:	2301      	movs	r3, #1
    2668:	f000 001f 	and.w	r0, r0, #31
    266c:	4083      	lsls	r3, r0
    266e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2672:	4770      	bx	lr
    2674:	e000e100 	.word	0xe000e100

00002678 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2678:	4b05      	ldr	r3, [pc, #20]	; (2690 <arch_irq_is_enabled+0x18>)
    267a:	0942      	lsrs	r2, r0, #5
    267c:	f000 001f 	and.w	r0, r0, #31
    2680:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2684:	2301      	movs	r3, #1
    2686:	fa03 f000 	lsl.w	r0, r3, r0
}
    268a:	4010      	ands	r0, r2
    268c:	4770      	bx	lr
    268e:	bf00      	nop
    2690:	e000e100 	.word	0xe000e100

00002694 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2694:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2696:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2698:	bfa8      	it	ge
    269a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    269e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26a2:	bfb8      	it	lt
    26a4:	4b06      	ldrlt	r3, [pc, #24]	; (26c0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26a6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    26aa:	bfac      	ite	ge
    26ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26b0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26b4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26b6:	bfb4      	ite	lt
    26b8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    26ba:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    26be:	4770      	bx	lr
    26c0:	e000ed14 	.word	0xe000ed14

000026c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    26c4:	bf30      	wfi
    b z_SysNmiOnReset
    26c6:	f7ff bffd 	b.w	26c4 <z_SysNmiOnReset>
    26ca:	bf00      	nop

000026cc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    26cc:	4a0b      	ldr	r2, [pc, #44]	; (26fc <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    26ce:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    26d0:	4b0b      	ldr	r3, [pc, #44]	; (2700 <z_arm_prep_c+0x34>)
    26d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    26d6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    26d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26dc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    26e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    26e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    26e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    26ec:	f002 fb50 	bl	4d90 <z_bss_zero>
	z_data_copy();
    26f0:	f003 f918 	bl	5924 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    26f4:	f000 fbd6 	bl	2ea4 <z_arm_interrupt_init>
	z_cstart();
    26f8:	f002 fb8e 	bl	4e18 <z_cstart>
    26fc:	00000000 	.word	0x00000000
    2700:	e000ed00 	.word	0xe000ed00

00002704 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2704:	4a09      	ldr	r2, [pc, #36]	; (272c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2706:	490a      	ldr	r1, [pc, #40]	; (2730 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2708:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    270a:	6809      	ldr	r1, [r1, #0]
    270c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    270e:	4909      	ldr	r1, [pc, #36]	; (2734 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2710:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2712:	684b      	ldr	r3, [r1, #4]
    2714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2718:	604b      	str	r3, [r1, #4]
    271a:	2300      	movs	r3, #0
    271c:	f383 8811 	msr	BASEPRI, r3
    2720:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2724:	6893      	ldr	r3, [r2, #8]
}
    2726:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2728:	4770      	bx	lr
    272a:	bf00      	nop
    272c:	200008b8 	.word	0x200008b8
    2730:	000072e4 	.word	0x000072e4
    2734:	e000ed00 	.word	0xe000ed00

00002738 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2738:	4912      	ldr	r1, [pc, #72]	; (2784 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    273a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    273c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2740:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2742:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2746:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    274a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    274c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2750:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2754:	4f0c      	ldr	r7, [pc, #48]	; (2788 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2756:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    275a:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    275c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    275e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2760:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2762:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2764:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2766:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    276a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    276c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    276e:	f000 fc35 	bl	2fdc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2772:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2776:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    277a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    277e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2782:	4770      	bx	lr
    ldr r1, =_kernel
    2784:	200008b8 	.word	0x200008b8
    ldr v4, =_SCS_ICSR
    2788:	e000ed04 	.word	0xe000ed04

0000278c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    278c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2790:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2792:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2796:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    279a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    279c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    27a0:	2902      	cmp	r1, #2
    beq _oops
    27a2:	d0ff      	beq.n	27a4 <_oops>

000027a4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    27a4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    27a6:	f003 ffa6 	bl	66f6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    27aa:	bd01      	pop	{r0, pc}

000027ac <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    27ac:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    27b0:	9b00      	ldr	r3, [sp, #0]
    27b2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    27b6:	490a      	ldr	r1, [pc, #40]	; (27e0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    27b8:	9b01      	ldr	r3, [sp, #4]
    27ba:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    27be:	9b02      	ldr	r3, [sp, #8]
    27c0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    27c4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    27c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    27cc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    27d0:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    27d4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    27d6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    27d8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    27da:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    27dc:	4770      	bx	lr
    27de:	bf00      	nop
    27e0:	00005e71 	.word	0x00005e71

000027e4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    27e4:	4a09      	ldr	r2, [pc, #36]	; (280c <z_check_thread_stack_fail+0x28>)
{
    27e6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    27e8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    27ea:	b170      	cbz	r0, 280a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    27ec:	f113 0f16 	cmn.w	r3, #22
    27f0:	6e40      	ldr	r0, [r0, #100]	; 0x64
    27f2:	d005      	beq.n	2800 <z_check_thread_stack_fail+0x1c>
    27f4:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    27f8:	429a      	cmp	r2, r3
    27fa:	d805      	bhi.n	2808 <z_check_thread_stack_fail+0x24>
    27fc:	4283      	cmp	r3, r0
    27fe:	d203      	bcs.n	2808 <z_check_thread_stack_fail+0x24>
		return 0;
    2800:	4281      	cmp	r1, r0
    2802:	bf28      	it	cs
    2804:	2000      	movcs	r0, #0
    2806:	4770      	bx	lr
    2808:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    280a:	4770      	bx	lr
    280c:	200008b8 	.word	0x200008b8

00002810 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2810:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2812:	4b09      	ldr	r3, [pc, #36]	; (2838 <arch_switch_to_main_thread+0x28>)
{
    2814:	460d      	mov	r5, r1
    2816:	4614      	mov	r4, r2
	_current = main_thread;
    2818:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    281a:	f000 fbdf 	bl	2fdc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    281e:	4620      	mov	r0, r4
    2820:	f385 8809 	msr	PSP, r5
    2824:	2100      	movs	r1, #0
    2826:	b663      	cpsie	if
    2828:	f381 8811 	msr	BASEPRI, r1
    282c:	f3bf 8f6f 	isb	sy
    2830:	2200      	movs	r2, #0
    2832:	2300      	movs	r3, #0
    2834:	f003 fb1c 	bl	5e70 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2838:	200008b8 	.word	0x200008b8

0000283c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    283c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    283e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2840:	4a0b      	ldr	r2, [pc, #44]	; (2870 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2842:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    2844:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2846:	bf1e      	ittt	ne
	movne	r1, #0
    2848:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    284a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    284c:	f004 f9f0 	blne	6c30 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2850:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2852:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2856:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    285a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    285e:	4905      	ldr	r1, [pc, #20]	; (2874 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2860:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2862:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2864:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2866:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    286a:	4903      	ldr	r1, [pc, #12]	; (2878 <_isr_wrapper+0x3c>)
	bx r1
    286c:	4708      	bx	r1
    286e:	0000      	.short	0x0000
	ldr r2, =_kernel
    2870:	200008b8 	.word	0x200008b8
	ldr r1, =_sw_isr_table
    2874:	00006f40 	.word	0x00006f40
	ldr r1, =z_arm_int_exit
    2878:	0000287d 	.word	0x0000287d

0000287c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    287c:	4b04      	ldr	r3, [pc, #16]	; (2890 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    287e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2880:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    2882:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2884:	d003      	beq.n	288e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2886:	4903      	ldr	r1, [pc, #12]	; (2894 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    288c:	600a      	str	r2, [r1, #0]

0000288e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    288e:	4770      	bx	lr
	ldr r3, =_kernel
    2890:	200008b8 	.word	0x200008b8
	ldr r1, =_SCS_ICSR
    2894:	e000ed04 	.word	0xe000ed04

00002898 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    289c:	b086      	sub	sp, #24
    289e:	4606      	mov	r6, r0
    28a0:	af00      	add	r7, sp, #0
    28a2:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    28a4:	4b47      	ldr	r3, [pc, #284]	; (29c4 <bus_fault.constprop.0+0x12c>)
    28a6:	617b      	str	r3, [r7, #20]
    28a8:	2402      	movs	r4, #2
    28aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28ae:	4846      	ldr	r0, [pc, #280]	; (29c8 <bus_fault.constprop.0+0x130>)
    28b0:	613c      	str	r4, [r7, #16]
    28b2:	f107 0210 	add.w	r2, r7, #16
    28b6:	f003 ff2d 	bl	6714 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    28ba:	4b44      	ldr	r3, [pc, #272]	; (29cc <bus_fault.constprop.0+0x134>)
    28bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28be:	04d9      	lsls	r1, r3, #19
    28c0:	d56d      	bpl.n	299e <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    28c2:	4b43      	ldr	r3, [pc, #268]	; (29d0 <bus_fault.constprop.0+0x138>)
    28c4:	4840      	ldr	r0, [pc, #256]	; (29c8 <bus_fault.constprop.0+0x130>)
    28c6:	e9c7 4304 	strd	r4, r3, [r7, #16]
    28ca:	f107 0210 	add.w	r2, r7, #16
    28ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28d2:	f003 ff1f 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    28d6:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    28d8:	4b3c      	ldr	r3, [pc, #240]	; (29cc <bus_fault.constprop.0+0x134>)
    28da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28dc:	051a      	lsls	r2, r3, #20
    28de:	d50b      	bpl.n	28f8 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    28e0:	4b3c      	ldr	r3, [pc, #240]	; (29d4 <bus_fault.constprop.0+0x13c>)
    28e2:	617b      	str	r3, [r7, #20]
    28e4:	2302      	movs	r3, #2
    28e6:	4838      	ldr	r0, [pc, #224]	; (29c8 <bus_fault.constprop.0+0x130>)
    28e8:	613b      	str	r3, [r7, #16]
    28ea:	f107 0210 	add.w	r2, r7, #16
    28ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28f2:	f003 ff0f 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    28f6:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    28f8:	4c34      	ldr	r4, [pc, #208]	; (29cc <bus_fault.constprop.0+0x134>)
    28fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28fc:	059b      	lsls	r3, r3, #22
    28fe:	d523      	bpl.n	2948 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    2900:	46e8      	mov	r8, sp
    2902:	4b35      	ldr	r3, [pc, #212]	; (29d8 <bus_fault.constprop.0+0x140>)
    2904:	617b      	str	r3, [r7, #20]
    2906:	2302      	movs	r3, #2
    2908:	482f      	ldr	r0, [pc, #188]	; (29c8 <bus_fault.constprop.0+0x130>)
    290a:	613b      	str	r3, [r7, #16]
    290c:	f107 0210 	add.w	r2, r7, #16
    2910:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2914:	f003 fefe 	bl	6714 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2918:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    291a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    291c:	0410      	lsls	r0, r2, #16
    291e:	d512      	bpl.n	2946 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2920:	b088      	sub	sp, #32
    2922:	466a      	mov	r2, sp
    2924:	492d      	ldr	r1, [pc, #180]	; (29dc <bus_fault.constprop.0+0x144>)
    2926:	4828      	ldr	r0, [pc, #160]	; (29c8 <bus_fault.constprop.0+0x130>)
    2928:	e9c2 1305 	strd	r1, r3, [r2, #20]
    292c:	2303      	movs	r3, #3
    292e:	f842 3f10 	str.w	r3, [r2, #16]!
    2932:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2936:	f003 feed 	bl	6714 <z_log_msg_static_create.constprop.0>
    293a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    293c:	b11e      	cbz	r6, 2946 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    293e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2944:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    2946:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2948:	4b20      	ldr	r3, [pc, #128]	; (29cc <bus_fault.constprop.0+0x134>)
    294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    294c:	0559      	lsls	r1, r3, #21
    294e:	d50b      	bpl.n	2968 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    2950:	4b23      	ldr	r3, [pc, #140]	; (29e0 <bus_fault.constprop.0+0x148>)
    2952:	617b      	str	r3, [r7, #20]
    2954:	2302      	movs	r3, #2
    2956:	481c      	ldr	r0, [pc, #112]	; (29c8 <bus_fault.constprop.0+0x130>)
    2958:	613b      	str	r3, [r7, #16]
    295a:	f107 0210 	add.w	r2, r7, #16
    295e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2962:	f003 fed7 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    2966:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2968:	4b18      	ldr	r3, [pc, #96]	; (29cc <bus_fault.constprop.0+0x134>)
    296a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    296c:	05d2      	lsls	r2, r2, #23
    296e:	d518      	bpl.n	29a2 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    2970:	4b1c      	ldr	r3, [pc, #112]	; (29e4 <bus_fault.constprop.0+0x14c>)
    2972:	617b      	str	r3, [r7, #20]
    2974:	2302      	movs	r3, #2
    2976:	4814      	ldr	r0, [pc, #80]	; (29c8 <bus_fault.constprop.0+0x130>)
    2978:	613b      	str	r3, [r7, #16]
    297a:	f107 0210 	add.w	r2, r7, #16
    297e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2982:	f003 fec7 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    2986:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2988:	4a10      	ldr	r2, [pc, #64]	; (29cc <bus_fault.constprop.0+0x134>)
    298a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    298c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2990:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    2992:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2994:	2300      	movs	r3, #0
    2996:	702b      	strb	r3, [r5, #0]
}
    2998:	46bd      	mov	sp, r7
    299a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    299e:	2016      	movs	r0, #22
    29a0:	e79a      	b.n	28d8 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    29a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29a4:	049b      	lsls	r3, r3, #18
    29a6:	d5ef      	bpl.n	2988 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    29a8:	4b0f      	ldr	r3, [pc, #60]	; (29e8 <bus_fault.constprop.0+0x150>)
    29aa:	617b      	str	r3, [r7, #20]
    29ac:	2302      	movs	r3, #2
    29ae:	4806      	ldr	r0, [pc, #24]	; (29c8 <bus_fault.constprop.0+0x130>)
    29b0:	613b      	str	r3, [r7, #16]
    29b2:	f107 0210 	add.w	r2, r7, #16
    29b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29ba:	f003 feab 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    29be:	201c      	movs	r0, #28
    29c0:	e7e2      	b.n	2988 <bus_fault.constprop.0+0xf0>
    29c2:	bf00      	nop
    29c4:	00007674 	.word	0x00007674
    29c8:	000070e4 	.word	0x000070e4
    29cc:	e000ed00 	.word	0xe000ed00
    29d0:	0000768a 	.word	0x0000768a
    29d4:	0000769b 	.word	0x0000769b
    29d8:	000076ae 	.word	0x000076ae
    29dc:	000076c7 	.word	0x000076c7
    29e0:	000076dc 	.word	0x000076dc
    29e4:	000076f7 	.word	0x000076f7
    29e8:	0000770f 	.word	0x0000770f

000029ec <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    29ec:	b510      	push	{r4, lr}
    29ee:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    29f0:	4b36      	ldr	r3, [pc, #216]	; (2acc <usage_fault.constprop.0+0xe0>)
    29f2:	4837      	ldr	r0, [pc, #220]	; (2ad0 <usage_fault.constprop.0+0xe4>)
    29f4:	9305      	str	r3, [sp, #20]
    29f6:	aa04      	add	r2, sp, #16
    29f8:	2402      	movs	r4, #2
    29fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29fe:	9404      	str	r4, [sp, #16]
    2a00:	f003 fe88 	bl	6714 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2a04:	4b33      	ldr	r3, [pc, #204]	; (2ad4 <usage_fault.constprop.0+0xe8>)
    2a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a08:	019a      	lsls	r2, r3, #6
    2a0a:	d55d      	bpl.n	2ac8 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    2a0c:	4b32      	ldr	r3, [pc, #200]	; (2ad8 <usage_fault.constprop.0+0xec>)
    2a0e:	4830      	ldr	r0, [pc, #192]	; (2ad0 <usage_fault.constprop.0+0xe4>)
    2a10:	aa04      	add	r2, sp, #16
    2a12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a16:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2a1a:	f003 fe7b 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    2a1e:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2a20:	4b2c      	ldr	r3, [pc, #176]	; (2ad4 <usage_fault.constprop.0+0xe8>)
    2a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a24:	01db      	lsls	r3, r3, #7
    2a26:	d50a      	bpl.n	2a3e <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    2a28:	4b2c      	ldr	r3, [pc, #176]	; (2adc <usage_fault.constprop.0+0xf0>)
    2a2a:	4829      	ldr	r0, [pc, #164]	; (2ad0 <usage_fault.constprop.0+0xe4>)
    2a2c:	9305      	str	r3, [sp, #20]
    2a2e:	aa04      	add	r2, sp, #16
    2a30:	2302      	movs	r3, #2
    2a32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a36:	9304      	str	r3, [sp, #16]
    2a38:	f003 fe6c 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    2a3c:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2a3e:	4b25      	ldr	r3, [pc, #148]	; (2ad4 <usage_fault.constprop.0+0xe8>)
    2a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a42:	031c      	lsls	r4, r3, #12
    2a44:	d50a      	bpl.n	2a5c <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    2a46:	4b26      	ldr	r3, [pc, #152]	; (2ae0 <usage_fault.constprop.0+0xf4>)
    2a48:	4821      	ldr	r0, [pc, #132]	; (2ad0 <usage_fault.constprop.0+0xe4>)
    2a4a:	9305      	str	r3, [sp, #20]
    2a4c:	aa04      	add	r2, sp, #16
    2a4e:	2302      	movs	r3, #2
    2a50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a54:	9304      	str	r3, [sp, #16]
    2a56:	f003 fe5d 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    2a5a:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2a5c:	4b1d      	ldr	r3, [pc, #116]	; (2ad4 <usage_fault.constprop.0+0xe8>)
    2a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a60:	0359      	lsls	r1, r3, #13
    2a62:	d50a      	bpl.n	2a7a <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2a64:	4b1f      	ldr	r3, [pc, #124]	; (2ae4 <usage_fault.constprop.0+0xf8>)
    2a66:	481a      	ldr	r0, [pc, #104]	; (2ad0 <usage_fault.constprop.0+0xe4>)
    2a68:	9305      	str	r3, [sp, #20]
    2a6a:	aa04      	add	r2, sp, #16
    2a6c:	2302      	movs	r3, #2
    2a6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a72:	9304      	str	r3, [sp, #16]
    2a74:	f003 fe4e 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    2a78:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2a7a:	4b16      	ldr	r3, [pc, #88]	; (2ad4 <usage_fault.constprop.0+0xe8>)
    2a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a7e:	039a      	lsls	r2, r3, #14
    2a80:	d50a      	bpl.n	2a98 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2a82:	4b19      	ldr	r3, [pc, #100]	; (2ae8 <usage_fault.constprop.0+0xfc>)
    2a84:	4812      	ldr	r0, [pc, #72]	; (2ad0 <usage_fault.constprop.0+0xe4>)
    2a86:	9305      	str	r3, [sp, #20]
    2a88:	aa04      	add	r2, sp, #16
    2a8a:	2302      	movs	r3, #2
    2a8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a90:	9304      	str	r3, [sp, #16]
    2a92:	f003 fe3f 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    2a96:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2a98:	4b0e      	ldr	r3, [pc, #56]	; (2ad4 <usage_fault.constprop.0+0xe8>)
    2a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a9c:	03db      	lsls	r3, r3, #15
    2a9e:	d50a      	bpl.n	2ab6 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2aa0:	4b12      	ldr	r3, [pc, #72]	; (2aec <usage_fault.constprop.0+0x100>)
    2aa2:	480b      	ldr	r0, [pc, #44]	; (2ad0 <usage_fault.constprop.0+0xe4>)
    2aa4:	9305      	str	r3, [sp, #20]
    2aa6:	aa04      	add	r2, sp, #16
    2aa8:	2302      	movs	r3, #2
    2aaa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2aae:	9304      	str	r3, [sp, #16]
    2ab0:	f003 fe30 	bl	6714 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    2ab4:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2ab6:	4a07      	ldr	r2, [pc, #28]	; (2ad4 <usage_fault.constprop.0+0xe8>)
    2ab8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2aba:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2abe:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2ac2:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2ac4:	b006      	add	sp, #24
    2ac6:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    2ac8:	201d      	movs	r0, #29
    2aca:	e7a9      	b.n	2a20 <usage_fault.constprop.0+0x34>
    2acc:	0000773e 	.word	0x0000773e
    2ad0:	000070e4 	.word	0x000070e4
    2ad4:	e000ed00 	.word	0xe000ed00
    2ad8:	00007756 	.word	0x00007756
    2adc:	00007769 	.word	0x00007769
    2ae0:	00007783 	.word	0x00007783
    2ae4:	000077a1 	.word	0x000077a1
    2ae8:	000077c6 	.word	0x000077c6
    2aec:	000077e0 	.word	0x000077e0

00002af0 <mem_manage_fault>:
{
    2af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2af4:	b086      	sub	sp, #24
    2af6:	4681      	mov	r9, r0
    2af8:	af00      	add	r7, sp, #0
    2afa:	468a      	mov	sl, r1
    2afc:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2afe:	4b51      	ldr	r3, [pc, #324]	; (2c44 <mem_manage_fault+0x154>)
    2b00:	617b      	str	r3, [r7, #20]
    2b02:	2402      	movs	r4, #2
    2b04:	4850      	ldr	r0, [pc, #320]	; (2c48 <mem_manage_fault+0x158>)
    2b06:	613c      	str	r4, [r7, #16]
    2b08:	f107 0210 	add.w	r2, r7, #16
    2b0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b10:	f003 fe00 	bl	6714 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2b14:	4b4d      	ldr	r3, [pc, #308]	; (2c4c <mem_manage_fault+0x15c>)
    2b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b18:	06de      	lsls	r6, r3, #27
    2b1a:	d545      	bpl.n	2ba8 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2b1c:	4b4c      	ldr	r3, [pc, #304]	; (2c50 <mem_manage_fault+0x160>)
    2b1e:	484a      	ldr	r0, [pc, #296]	; (2c48 <mem_manage_fault+0x158>)
    2b20:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2b24:	f107 0210 	add.w	r2, r7, #16
    2b28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    2b2c:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    2b2e:	f003 fdf1 	bl	6714 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2b32:	4b46      	ldr	r3, [pc, #280]	; (2c4c <mem_manage_fault+0x15c>)
    2b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b36:	071d      	lsls	r5, r3, #28
    2b38:	d50b      	bpl.n	2b52 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    2b3a:	4b46      	ldr	r3, [pc, #280]	; (2c54 <mem_manage_fault+0x164>)
    2b3c:	617b      	str	r3, [r7, #20]
    2b3e:	2302      	movs	r3, #2
    2b40:	4841      	ldr	r0, [pc, #260]	; (2c48 <mem_manage_fault+0x158>)
    2b42:	613b      	str	r3, [r7, #16]
    2b44:	f107 0210 	add.w	r2, r7, #16
    2b48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    2b4c:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    2b4e:	f003 fde1 	bl	6714 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2b52:	4d3e      	ldr	r5, [pc, #248]	; (2c4c <mem_manage_fault+0x15c>)
    2b54:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b56:	0798      	lsls	r0, r3, #30
    2b58:	d528      	bpl.n	2bac <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    2b5a:	466c      	mov	r4, sp
    2b5c:	4b3e      	ldr	r3, [pc, #248]	; (2c58 <mem_manage_fault+0x168>)
    2b5e:	617b      	str	r3, [r7, #20]
    2b60:	2302      	movs	r3, #2
    2b62:	613b      	str	r3, [r7, #16]
    2b64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b68:	4837      	ldr	r0, [pc, #220]	; (2c48 <mem_manage_fault+0x158>)
    2b6a:	f107 0210 	add.w	r2, r7, #16
    2b6e:	f003 fdd1 	bl	6714 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2b72:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2b74:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b76:	0619      	lsls	r1, r3, #24
    2b78:	d560      	bpl.n	2c3c <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2b7a:	b088      	sub	sp, #32
    2b7c:	466a      	mov	r2, sp
    2b7e:	4b37      	ldr	r3, [pc, #220]	; (2c5c <mem_manage_fault+0x16c>)
    2b80:	4831      	ldr	r0, [pc, #196]	; (2c48 <mem_manage_fault+0x158>)
    2b82:	e9c2 3605 	strd	r3, r6, [r2, #20]
    2b86:	2303      	movs	r3, #3
    2b88:	f842 3f10 	str.w	r3, [r2, #16]!
    2b8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2b90:	f003 fdc0 	bl	6714 <z_log_msg_static_create.constprop.0>
    2b94:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    2b96:	f1ba 0f00 	cmp.w	sl, #0
    2b9a:	d003      	beq.n	2ba4 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2b9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2ba2:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    2ba4:	2413      	movs	r4, #19
    2ba6:	e003      	b.n	2bb0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    2ba8:	2410      	movs	r4, #16
    2baa:	e7c2      	b.n	2b32 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    2bac:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2bb0:	4b26      	ldr	r3, [pc, #152]	; (2c4c <mem_manage_fault+0x15c>)
    2bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bb4:	07da      	lsls	r2, r3, #31
    2bb6:	d50b      	bpl.n	2bd0 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    2bb8:	4b29      	ldr	r3, [pc, #164]	; (2c60 <mem_manage_fault+0x170>)
    2bba:	617b      	str	r3, [r7, #20]
    2bbc:	2302      	movs	r3, #2
    2bbe:	4822      	ldr	r0, [pc, #136]	; (2c48 <mem_manage_fault+0x158>)
    2bc0:	613b      	str	r3, [r7, #16]
    2bc2:	f107 0210 	add.w	r2, r7, #16
    2bc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    2bca:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    2bcc:	f003 fda2 	bl	6714 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2bd0:	4b1e      	ldr	r3, [pc, #120]	; (2c4c <mem_manage_fault+0x15c>)
    2bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bd4:	069b      	lsls	r3, r3, #26
    2bd6:	d50b      	bpl.n	2bf0 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
    2bd8:	4b22      	ldr	r3, [pc, #136]	; (2c64 <mem_manage_fault+0x174>)
    2bda:	617b      	str	r3, [r7, #20]
    2bdc:	2302      	movs	r3, #2
    2bde:	481a      	ldr	r0, [pc, #104]	; (2c48 <mem_manage_fault+0x158>)
    2be0:	613b      	str	r3, [r7, #16]
    2be2:	f107 0210 	add.w	r2, r7, #16
    2be6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    2bea:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    2bec:	f003 fd92 	bl	6714 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2bf0:	4b16      	ldr	r3, [pc, #88]	; (2c4c <mem_manage_fault+0x15c>)
    2bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2bf4:	06d5      	lsls	r5, r2, #27
    2bf6:	d402      	bmi.n	2bfe <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2bfa:	0790      	lsls	r0, r2, #30
    2bfc:	d50a      	bpl.n	2c14 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2bfe:	685b      	ldr	r3, [r3, #4]
    2c00:	0519      	lsls	r1, r3, #20
    2c02:	d507      	bpl.n	2c14 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2c04:	4649      	mov	r1, r9
    2c06:	4630      	mov	r0, r6
    2c08:	f7ff fdec 	bl	27e4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2c0c:	b110      	cbz	r0, 2c14 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2c0e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2c12:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2c14:	4b0d      	ldr	r3, [pc, #52]	; (2c4c <mem_manage_fault+0x15c>)
    2c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c18:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2c1a:	bf42      	ittt	mi
    2c1c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2c1e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2c22:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2c26:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
    2c2c:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    2c2e:	2300      	movs	r3, #0
}
    2c30:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2c32:	f888 3000 	strb.w	r3, [r8]
}
    2c36:	46bd      	mov	sp, r7
    2c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    2c3c:	f06f 0615 	mvn.w	r6, #21
    2c40:	e7b0      	b.n	2ba4 <mem_manage_fault+0xb4>
    2c42:	bf00      	nop
    2c44:	0000780b 	.word	0x0000780b
    2c48:	000070e4 	.word	0x000070e4
    2c4c:	e000ed00 	.word	0xe000ed00
    2c50:	00007821 	.word	0x00007821
    2c54:	0000769b 	.word	0x0000769b
    2c58:	00007854 	.word	0x00007854
    2c5c:	0000786c 	.word	0x0000786c
    2c60:	00007882 	.word	0x00007882
    2c64:	0000770f 	.word	0x0000770f

00002c68 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c6c:	4b77      	ldr	r3, [pc, #476]	; (2e4c <z_arm_fault+0x1e4>)
{
    2c6e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c70:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    2c74:	af00      	add	r7, sp, #0
    2c76:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2c78:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2c7c:	2600      	movs	r6, #0
    2c7e:	f386 8811 	msr	BASEPRI, r6
    2c82:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c86:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2c8a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2c8e:	d10e      	bne.n	2cae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c90:	f002 030c 	and.w	r3, r2, #12
    2c94:	2b08      	cmp	r3, #8
    2c96:	d119      	bne.n	2ccc <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2c98:	4b6d      	ldr	r3, [pc, #436]	; (2e50 <z_arm_fault+0x1e8>)
    2c9a:	61fb      	str	r3, [r7, #28]
    2c9c:	2302      	movs	r3, #2
    2c9e:	486d      	ldr	r0, [pc, #436]	; (2e54 <z_arm_fault+0x1ec>)
    2ca0:	61bb      	str	r3, [r7, #24]
    2ca2:	f107 0218 	add.w	r2, r7, #24
    2ca6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2caa:	f003 fd33 	bl	6714 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    2cae:	2600      	movs	r6, #0
		return NULL;
    2cb0:	4635      	mov	r5, r6
	*recoverable = false;
    2cb2:	2300      	movs	r3, #0
    2cb4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    2cb6:	1ee3      	subs	r3, r4, #3
    2cb8:	2b09      	cmp	r3, #9
    2cba:	f200 80a6 	bhi.w	2e0a <z_arm_fault+0x1a2>
    2cbe:	e8df f003 	tbb	[pc, r3]
    2cc2:	990a      	.short	0x990a
    2cc4:	a4a4959c 	.word	0xa4a4959c
    2cc8:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2ccc:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    2cce:	bf4c      	ite	mi
    2cd0:	460d      	movmi	r5, r1
			*nested_exc = true;
    2cd2:	2601      	movpl	r6, #1
    2cd4:	e7ed      	b.n	2cb2 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2cd6:	46e9      	mov	r9, sp
    2cd8:	4b5f      	ldr	r3, [pc, #380]	; (2e58 <z_arm_fault+0x1f0>)
    2cda:	61fb      	str	r3, [r7, #28]
    2cdc:	f04f 0802 	mov.w	r8, #2
    2ce0:	f107 0218 	add.w	r2, r7, #24
    2ce4:	485b      	ldr	r0, [pc, #364]	; (2e54 <z_arm_fault+0x1ec>)
    2ce6:	f8c7 8018 	str.w	r8, [r7, #24]
    2cea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2cee:	f003 fd11 	bl	6714 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    2cf2:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cf4:	4c55      	ldr	r4, [pc, #340]	; (2e4c <z_arm_fault+0x1e4>)
	*recoverable = false;
    2cf6:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2cf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2cfa:	079a      	lsls	r2, r3, #30
    2cfc:	d50b      	bpl.n	2d16 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    2cfe:	4b57      	ldr	r3, [pc, #348]	; (2e5c <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    2d00:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    2d04:	4853      	ldr	r0, [pc, #332]	; (2e54 <z_arm_fault+0x1ec>)
    2d06:	f107 0218 	add.w	r2, r7, #24
    2d0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d0e:	f003 fd01 	bl	6714 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2d12:	2400      	movs	r4, #0
    2d14:	e041      	b.n	2d9a <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2d16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2d18:	2b00      	cmp	r3, #0
    2d1a:	da01      	bge.n	2d20 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    2d1c:	4b50      	ldr	r3, [pc, #320]	; (2e60 <z_arm_fault+0x1f8>)
    2d1e:	e7ef      	b.n	2d00 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2d20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2d22:	005b      	lsls	r3, r3, #1
    2d24:	d5f5      	bpl.n	2d12 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    2d26:	4b4f      	ldr	r3, [pc, #316]	; (2e64 <z_arm_fault+0x1fc>)
    2d28:	484a      	ldr	r0, [pc, #296]	; (2e54 <z_arm_fault+0x1ec>)
    2d2a:	e9c7 8306 	strd	r8, r3, [r7, #24]
    2d2e:	f107 0218 	add.w	r2, r7, #24
    2d32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d36:	f003 fced 	bl	6714 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2d3a:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2d3c:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2d42:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2d44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d48:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2d4c:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    2d4e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2d56:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2d58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d5c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2d60:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2d64:	429a      	cmp	r2, r3
    2d66:	d008      	beq.n	2d7a <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2d68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d6a:	b2db      	uxtb	r3, r3
    2d6c:	b38b      	cbz	r3, 2dd2 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    2d6e:	1dfa      	adds	r2, r7, #7
    2d70:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2d72:	4628      	mov	r0, r5
    2d74:	f7ff febc 	bl	2af0 <mem_manage_fault>
    2d78:	e03a      	b.n	2df0 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2d7a:	b088      	sub	sp, #32
    2d7c:	682b      	ldr	r3, [r5, #0]
    2d7e:	466a      	mov	r2, sp
    2d80:	4939      	ldr	r1, [pc, #228]	; (2e68 <z_arm_fault+0x200>)
    2d82:	4834      	ldr	r0, [pc, #208]	; (2e54 <z_arm_fault+0x1ec>)
    2d84:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2d88:	2303      	movs	r3, #3
    2d8a:	f842 3f10 	str.w	r3, [r2, #16]!
    2d8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2d92:	f003 fcbf 	bl	6714 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    2d96:	682c      	ldr	r4, [r5, #0]
    2d98:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2d9a:	79fb      	ldrb	r3, [r7, #7]
    2d9c:	b9ab      	cbnz	r3, 2dca <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2d9e:	2220      	movs	r2, #32
    2da0:	4629      	mov	r1, r5
    2da2:	f107 0008 	add.w	r0, r7, #8
    2da6:	f003 fcd2 	bl	674e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2dac:	2e00      	cmp	r6, #0
    2dae:	d047      	beq.n	2e40 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2db4:	b922      	cbnz	r2, 2dc0 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2db6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2dba:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2dbe:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    2dc0:	f107 0108 	add.w	r1, r7, #8
    2dc4:	4620      	mov	r0, r4
    2dc6:	f7ff fbe3 	bl	2590 <z_arm_fatal_error>
}
    2dca:	372c      	adds	r7, #44	; 0x2c
    2dcc:	46bd      	mov	sp, r7
    2dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2dd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2dd4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2dd8:	d004      	beq.n	2de4 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    2dda:	1df9      	adds	r1, r7, #7
    2ddc:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2dde:	f7ff fd5b 	bl	2898 <bus_fault.constprop.0>
    2de2:	e005      	b.n	2df0 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2dea:	d392      	bcc.n	2d12 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    2dec:	f7ff fdfe 	bl	29ec <usage_fault.constprop.0>
    2df0:	4604      	mov	r4, r0
    2df2:	e7d2      	b.n	2d9a <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    2df4:	1dfa      	adds	r2, r7, #7
    2df6:	2100      	movs	r1, #0
    2df8:	e7bb      	b.n	2d72 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    2dfa:	1df9      	adds	r1, r7, #7
    2dfc:	2000      	movs	r0, #0
    2dfe:	e7ee      	b.n	2dde <z_arm_fault+0x176>
	PR_FAULT_INFO(
    2e00:	4b1a      	ldr	r3, [pc, #104]	; (2e6c <z_arm_fault+0x204>)
    2e02:	61fb      	str	r3, [r7, #28]
    2e04:	2302      	movs	r3, #2
    2e06:	61bb      	str	r3, [r7, #24]
    2e08:	e77c      	b.n	2d04 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    2e0a:	4a19      	ldr	r2, [pc, #100]	; (2e70 <z_arm_fault+0x208>)
    2e0c:	4b19      	ldr	r3, [pc, #100]	; (2e74 <z_arm_fault+0x20c>)
    2e0e:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2e12:	46e8      	mov	r8, sp
    2e14:	b08a      	sub	sp, #40	; 0x28
    2e16:	bf18      	it	ne
    2e18:	4613      	movne	r3, r2
    2e1a:	466a      	mov	r2, sp
    2e1c:	4916      	ldr	r1, [pc, #88]	; (2e78 <z_arm_fault+0x210>)
    2e1e:	480d      	ldr	r0, [pc, #52]	; (2e54 <z_arm_fault+0x1ec>)
    2e20:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2e24:	f44f 7300 	mov.w	r3, #512	; 0x200
    2e28:	8413      	strh	r3, [r2, #32]
    2e2a:	3c10      	subs	r4, #16
    2e2c:	4b13      	ldr	r3, [pc, #76]	; (2e7c <z_arm_fault+0x214>)
    2e2e:	61d4      	str	r4, [r2, #28]
    2e30:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    2e34:	f842 3f10 	str.w	r3, [r2, #16]!
    2e38:	f003 fc6c 	bl	6714 <z_log_msg_static_create.constprop.0>
    2e3c:	46c5      	mov	sp, r8
}
    2e3e:	e768      	b.n	2d12 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2e40:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2e44:	f023 0301 	bic.w	r3, r3, #1
    2e48:	e7b9      	b.n	2dbe <z_arm_fault+0x156>
    2e4a:	bf00      	nop
    2e4c:	e000ed00 	.word	0xe000ed00
    2e50:	000078cf 	.word	0x000078cf
    2e54:	000070e4 	.word	0x000070e4
    2e58:	000078fa 	.word	0x000078fa
    2e5c:	00007911 	.word	0x00007911
    2e60:	00007932 	.word	0x00007932
    2e64:	00007940 	.word	0x00007940
    2e68:	0000795f 	.word	0x0000795f
    2e6c:	0000797b 	.word	0x0000797b
    2e70:	000078b6 	.word	0x000078b6
    2e74:	000078a1 	.word	0x000078a1
    2e78:	0000799f 	.word	0x0000799f
    2e7c:	01000004 	.word	0x01000004

00002e80 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2e80:	4a02      	ldr	r2, [pc, #8]	; (2e8c <z_arm_fault_init+0xc>)
    2e82:	6953      	ldr	r3, [r2, #20]
    2e84:	f043 0310 	orr.w	r3, r3, #16
    2e88:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2e8a:	4770      	bx	lr
    2e8c:	e000ed00 	.word	0xe000ed00

00002e90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2e90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2e94:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2e98:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2e9a:	4672      	mov	r2, lr
	bl z_arm_fault
    2e9c:	f7ff fee4 	bl	2c68 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2ea0:	bd01      	pop	{r0, pc}
    2ea2:	bf00      	nop

00002ea4 <z_arm_interrupt_init>:
    2ea4:	4804      	ldr	r0, [pc, #16]	; (2eb8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2ea6:	2300      	movs	r3, #0
    2ea8:	2120      	movs	r1, #32
    2eaa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2eac:	3301      	adds	r3, #1
    2eae:	2b27      	cmp	r3, #39	; 0x27
    2eb0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2eb4:	d1f9      	bne.n	2eaa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2eb6:	4770      	bx	lr
    2eb8:	e000e100 	.word	0xe000e100

00002ebc <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2ebc:	2000      	movs	r0, #0
    msr CONTROL, r0
    2ebe:	f380 8814 	msr	CONTROL, r0
    isb
    2ec2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2ec6:	f7fe fc01 	bl	16cc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2eca:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2ecc:	490d      	ldr	r1, [pc, #52]	; (2f04 <__start+0x48>)
    str r0, [r1]
    2ece:	6008      	str	r0, [r1, #0]
    dsb
    2ed0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2ed4:	480c      	ldr	r0, [pc, #48]	; (2f08 <__start+0x4c>)
    msr msp, r0
    2ed6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2eda:	f000 f82b 	bl	2f34 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ede:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ee0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2ee4:	4809      	ldr	r0, [pc, #36]	; (2f0c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2ee6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    2eea:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2eec:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2ef0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2ef4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2ef6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2ef8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2efc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2f00:	f7ff fbe4 	bl	26cc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2f04:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2f08:	20001e40 	.word	0x20001e40
    ldr r0, =z_interrupt_stacks
    2f0c:	20001080 	.word	0x20001080

00002f10 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2f10:	4907      	ldr	r1, [pc, #28]	; (2f30 <z_arm_clear_arm_mpu_config+0x20>)
    2f12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2f16:	2300      	movs	r3, #0
	int num_regions =
    2f18:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2f1c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2f1e:	4293      	cmp	r3, r2
    2f20:	db00      	blt.n	2f24 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2f22:	4770      	bx	lr
  MPU->RNR = rnr;
    2f24:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2f28:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2f2c:	3301      	adds	r3, #1
    2f2e:	e7f6      	b.n	2f1e <z_arm_clear_arm_mpu_config+0xe>
    2f30:	e000ed00 	.word	0xe000ed00

00002f34 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2f34:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2f36:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2f38:	2300      	movs	r3, #0
    2f3a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2f3e:	f7ff ffe7 	bl	2f10 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2f42:	4b14      	ldr	r3, [pc, #80]	; (2f94 <z_arm_init_arch_hw_at_boot+0x60>)
    2f44:	f04f 32ff 	mov.w	r2, #4294967295
    2f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2f54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2f5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2f60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2f64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2f68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2f6c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2f70:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2f74:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2f78:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2f7c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2f80:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2f84:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2f88:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2f8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f8e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2f92:	bd08      	pop	{r3, pc}
    2f94:	e000e100 	.word	0xe000e100

00002f98 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2f98:	4b08      	ldr	r3, [pc, #32]	; (2fbc <z_impl_k_thread_abort+0x24>)
    2f9a:	689b      	ldr	r3, [r3, #8]
    2f9c:	4283      	cmp	r3, r0
    2f9e:	d10b      	bne.n	2fb8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2fa0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2fa4:	b143      	cbz	r3, 2fb8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2fa6:	4b06      	ldr	r3, [pc, #24]	; (2fc0 <z_impl_k_thread_abort+0x28>)
    2fa8:	685a      	ldr	r2, [r3, #4]
    2faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2fae:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2fb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2fb6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2fb8:	f002 bc54 	b.w	5864 <z_thread_abort>
    2fbc:	200008b8 	.word	0x200008b8
    2fc0:	e000ed00 	.word	0xe000ed00

00002fc4 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2fc4:	4b02      	ldr	r3, [pc, #8]	; (2fd0 <z_arm_configure_static_mpu_regions+0xc>)
    2fc6:	4a03      	ldr	r2, [pc, #12]	; (2fd4 <z_arm_configure_static_mpu_regions+0x10>)
    2fc8:	4803      	ldr	r0, [pc, #12]	; (2fd8 <z_arm_configure_static_mpu_regions+0x14>)
    2fca:	2101      	movs	r1, #1
    2fcc:	f000 b892 	b.w	30f4 <arm_core_mpu_configure_static_mpu_regions>
    2fd0:	20010000 	.word	0x20010000
    2fd4:	20000000 	.word	0x20000000
    2fd8:	000071fc 	.word	0x000071fc

00002fdc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2fdc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2fde:	4b05      	ldr	r3, [pc, #20]	; (2ff4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2fe0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    2fe2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2fe4:	4a04      	ldr	r2, [pc, #16]	; (2ff8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2fe6:	2140      	movs	r1, #64	; 0x40
    2fe8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2fec:	4618      	mov	r0, r3
    2fee:	2101      	movs	r1, #1
    2ff0:	f000 b88a 	b.w	3108 <arm_core_mpu_configure_dynamic_mpu_regions>
    2ff4:	2000077c 	.word	0x2000077c
    2ff8:	150b0000 	.word	0x150b0000

00002ffc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3000:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 30b8 <mpu_configure_regions+0xbc>
    3004:	469c      	mov	ip, r3
    3006:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    3008:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    300a:	2300      	movs	r3, #0
    300c:	428b      	cmp	r3, r1
    300e:	da1a      	bge.n	3046 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    3010:	6844      	ldr	r4, [r0, #4]
    3012:	2c00      	cmp	r4, #0
    3014:	d04d      	beq.n	30b2 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3016:	f1bc 0f00 	cmp.w	ip, #0
    301a:	d01d      	beq.n	3058 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    301c:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    301e:	4234      	tst	r4, r6
    3020:	d015      	beq.n	304e <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3022:	466c      	mov	r4, sp
    3024:	b088      	sub	sp, #32
    3026:	466a      	mov	r2, sp
    3028:	4924      	ldr	r1, [pc, #144]	; (30bc <mpu_configure_regions+0xc0>)
    302a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    302e:	2303      	movs	r3, #3
    3030:	f842 3f10 	str.w	r3, [r2, #16]!
    3034:	4822      	ldr	r0, [pc, #136]	; (30c0 <mpu_configure_regions+0xc4>)
    3036:	2300      	movs	r3, #0
    3038:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    303c:	f7fe fdde 	bl	1bfc <z_impl_z_log_msg_static_create>
			return -EINVAL;
    3040:	f06f 0515 	mvn.w	r5, #21
    3044:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3046:	4628      	mov	r0, r5
    3048:	46bd      	mov	sp, r7
    304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    304e:	2c1f      	cmp	r4, #31
    3050:	d9e7      	bls.n	3022 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    3052:	6802      	ldr	r2, [r0, #0]
		&&
    3054:	4216      	tst	r6, r2
    3056:	d1e4      	bne.n	3022 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3058:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    305a:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    305c:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    305e:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    3062:	d914      	bls.n	308e <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    3064:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3068:	d813      	bhi.n	3092 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    306a:	3c01      	subs	r4, #1
    306c:	fab4 f484 	clz	r4, r4
    3070:	f1c4 041f 	rsb	r4, r4, #31
    3074:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3076:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    307a:	ea46 0604 	orr.w	r6, r6, r4
    307e:	d90a      	bls.n	3096 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3080:	466c      	mov	r4, sp
    3082:	b088      	sub	sp, #32
    3084:	466a      	mov	r2, sp
    3086:	4b0f      	ldr	r3, [pc, #60]	; (30c4 <mpu_configure_regions+0xc8>)
    3088:	e9c2 3505 	strd	r3, r5, [r2, #20]
    308c:	e7cf      	b.n	302e <mpu_configure_regions+0x32>
		return REGION_32B;
    308e:	2408      	movs	r4, #8
    3090:	e7f1      	b.n	3076 <mpu_configure_regions+0x7a>
		return REGION_4G;
    3092:	243e      	movs	r4, #62	; 0x3e
    3094:	e7ef      	b.n	3076 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3096:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    309a:	432a      	orrs	r2, r5
    309c:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    30a0:	f046 0601 	orr.w	r6, r6, #1
    30a4:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    30a8:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    30ac:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    30ae:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    30b2:	3301      	adds	r3, #1
    30b4:	300c      	adds	r0, #12
    30b6:	e7a9      	b.n	300c <mpu_configure_regions+0x10>
    30b8:	e000ed00 	.word	0xe000ed00
    30bc:	000079b6 	.word	0x000079b6
    30c0:	000070dc 	.word	0x000070dc
    30c4:	000079d9 	.word	0x000079d9

000030c8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    30c8:	4b04      	ldr	r3, [pc, #16]	; (30dc <arm_core_mpu_enable+0x14>)
    30ca:	2205      	movs	r2, #5
    30cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    30d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30d4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    30d8:	4770      	bx	lr
    30da:	bf00      	nop
    30dc:	e000ed00 	.word	0xe000ed00

000030e0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    30e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    30e4:	4b02      	ldr	r3, [pc, #8]	; (30f0 <arm_core_mpu_disable+0x10>)
    30e6:	2200      	movs	r2, #0
    30e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    30ec:	4770      	bx	lr
    30ee:	bf00      	nop
    30f0:	e000ed00 	.word	0xe000ed00

000030f4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    30f4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    30f6:	4c03      	ldr	r4, [pc, #12]	; (3104 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    30f8:	2301      	movs	r3, #1
    30fa:	7822      	ldrb	r2, [r4, #0]
    30fc:	f7ff ff7e 	bl	2ffc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3100:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3102:	bd10      	pop	{r4, pc}
    3104:	20000902 	.word	0x20000902

00003108 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    3108:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    310a:	4a09      	ldr	r2, [pc, #36]	; (3130 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    310c:	2300      	movs	r3, #0
    310e:	7812      	ldrb	r2, [r2, #0]
    3110:	f7ff ff74 	bl	2ffc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3114:	f110 0f16 	cmn.w	r0, #22
    3118:	d003      	beq.n	3122 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    311a:	4b06      	ldr	r3, [pc, #24]	; (3134 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    311c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    311e:	2807      	cmp	r0, #7
    3120:	dd00      	ble.n	3124 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3122:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3124:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3128:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    312c:	3001      	adds	r0, #1
    312e:	e7f6      	b.n	311e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3130:	20000902 	.word	0x20000902
    3134:	e000ed00 	.word	0xe000ed00

00003138 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3138:	4914      	ldr	r1, [pc, #80]	; (318c <z_arm_mpu_init+0x54>)
    313a:	6808      	ldr	r0, [r1, #0]
    313c:	2808      	cmp	r0, #8
{
    313e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3140:	d821      	bhi.n	3186 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3142:	f7ff ffcd 	bl	30e0 <arm_core_mpu_disable>
    3146:	4c12      	ldr	r4, [pc, #72]	; (3190 <z_arm_mpu_init+0x58>)
    3148:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    314a:	2200      	movs	r2, #0
    314c:	4290      	cmp	r0, r2
    314e:	f101 010c 	add.w	r1, r1, #12
    3152:	d105      	bne.n	3160 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3154:	4b0f      	ldr	r3, [pc, #60]	; (3194 <z_arm_mpu_init+0x5c>)
    3156:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3158:	f7ff ffb6 	bl	30c8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    315c:	2000      	movs	r0, #0
}
    315e:	bd10      	pop	{r4, pc}
    3160:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3164:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3168:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    316c:	4313      	orrs	r3, r2
    316e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3172:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3176:	f851 3c04 	ldr.w	r3, [r1, #-4]
    317a:	f043 0301 	orr.w	r3, r3, #1
    317e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3182:	3201      	adds	r2, #1
    3184:	e7e2      	b.n	314c <z_arm_mpu_init+0x14>
		return -1;
    3186:	f04f 30ff 	mov.w	r0, #4294967295
    318a:	e7e8      	b.n	315e <z_arm_mpu_init+0x26>
    318c:	00007208 	.word	0x00007208
    3190:	e000ed00 	.word	0xe000ed00
    3194:	20000902 	.word	0x20000902

00003198 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3198:	4b01      	ldr	r3, [pc, #4]	; (31a0 <__stdout_hook_install+0x8>)
    319a:	6018      	str	r0, [r3, #0]
}
    319c:	4770      	bx	lr
    319e:	bf00      	nop
    31a0:	2000000c 	.word	0x2000000c

000031a4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    31a4:	f04f 0320 	mov.w	r3, #32
    31a8:	f3ef 8211 	mrs	r2, BASEPRI
    31ac:	f383 8812 	msr	BASEPRI_MAX, r3
    31b0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    31b4:	4906      	ldr	r1, [pc, #24]	; (31d0 <nordicsemi_nrf52_init+0x2c>)
    31b6:	2301      	movs	r3, #1
    31b8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    31bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    31c0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    31c4:	f382 8811 	msr	BASEPRI, r2
    31c8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    31cc:	2000      	movs	r0, #0
    31ce:	4770      	bx	lr
    31d0:	4001e000 	.word	0x4001e000

000031d4 <sys_arch_reboot>:
    *p_gpregret = val;
    31d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31d8:	b2c0      	uxtb	r0, r0
    31da:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    31de:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    31e2:	4905      	ldr	r1, [pc, #20]	; (31f8 <sys_arch_reboot+0x24>)
    31e4:	4b05      	ldr	r3, [pc, #20]	; (31fc <sys_arch_reboot+0x28>)
    31e6:	68ca      	ldr	r2, [r1, #12]
    31e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    31ec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    31ee:	60cb      	str	r3, [r1, #12]
    31f0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    31f4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    31f6:	e7fd      	b.n	31f4 <sys_arch_reboot+0x20>
    31f8:	e000ed00 	.word	0xe000ed00
    31fc:	05fa0004 	.word	0x05fa0004

00003200 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3200:	b120      	cbz	r0, 320c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3202:	4b03      	ldr	r3, [pc, #12]	; (3210 <arch_busy_wait+0x10>)
    3204:	0180      	lsls	r0, r0, #6
    3206:	f043 0301 	orr.w	r3, r3, #1
    320a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    320c:	4770      	bx	lr
    320e:	bf00      	nop
    3210:	00007140 	.word	0x00007140

00003214 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3214:	4b08      	ldr	r3, [pc, #32]	; (3238 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3216:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3218:	1ac3      	subs	r3, r0, r3
{
    321a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    321c:	4907      	ldr	r1, [pc, #28]	; (323c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    321e:	109b      	asrs	r3, r3, #2
{
    3220:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3222:	4359      	muls	r1, r3
    3224:	4806      	ldr	r0, [pc, #24]	; (3240 <onoff_stop+0x2c>)
    3226:	2240      	movs	r2, #64	; 0x40
    3228:	f003 fad6 	bl	67d8 <stop>
	notify(mgr, res);
    322c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    322e:	4601      	mov	r1, r0
	notify(mgr, res);
    3230:	4620      	mov	r0, r4
}
    3232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3236:	4718      	bx	r3
    3238:	2000079c 	.word	0x2000079c
    323c:	b6db6db7 	.word	0xb6db6db7
    3240:	00006ef8 	.word	0x00006ef8

00003244 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3244:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3246:	4c0c      	ldr	r4, [pc, #48]	; (3278 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3248:	4a0c      	ldr	r2, [pc, #48]	; (327c <onoff_start+0x38>)
    324a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    324c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    324e:	9300      	str	r3, [sp, #0]
{
    3250:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3252:	460b      	mov	r3, r1
    3254:	490a      	ldr	r1, [pc, #40]	; (3280 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    3256:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3258:	4361      	muls	r1, r4
{
    325a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    325c:	4809      	ldr	r0, [pc, #36]	; (3284 <onoff_start+0x40>)
    325e:	f003 fae7 	bl	6830 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3262:	1e01      	subs	r1, r0, #0
    3264:	da05      	bge.n	3272 <onoff_start+0x2e>
		notify(mgr, err);
    3266:	4630      	mov	r0, r6
    3268:	462b      	mov	r3, r5
	}
}
    326a:	b002      	add	sp, #8
    326c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    3270:	4718      	bx	r3
}
    3272:	b002      	add	sp, #8
    3274:	bd70      	pop	{r4, r5, r6, pc}
    3276:	bf00      	nop
    3278:	2000079c 	.word	0x2000079c
    327c:	0000689b 	.word	0x0000689b
    3280:	b6db6db7 	.word	0xb6db6db7
    3284:	00006ef8 	.word	0x00006ef8

00003288 <generic_hfclk_stop>:
{
    3288:	b510      	push	{r4, lr}
	__asm__ volatile(
    328a:	f04f 0320 	mov.w	r3, #32
    328e:	f3ef 8411 	mrs	r4, BASEPRI
    3292:	f383 8812 	msr	BASEPRI_MAX, r3
    3296:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    329a:	4a07      	ldr	r2, [pc, #28]	; (32b8 <generic_hfclk_stop+0x30>)
    329c:	6813      	ldr	r3, [r2, #0]
    329e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    32a2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    32a4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    32a6:	d402      	bmi.n	32ae <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    32a8:	2001      	movs	r0, #1
    32aa:	f003 fc8f 	bl	6bcc <nrfx_clock_stop>
	__asm__ volatile(
    32ae:	f384 8811 	msr	BASEPRI, r4
    32b2:	f3bf 8f6f 	isb	sy
}
    32b6:	bd10      	pop	{r4, pc}
    32b8:	200007ec 	.word	0x200007ec

000032bc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32bc:	2200      	movs	r2, #0
{
    32be:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32c0:	2101      	movs	r1, #1
{
    32c2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32c4:	4610      	mov	r0, r2
    32c6:	f7ff f9e5 	bl	2694 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    32ca:	480f      	ldr	r0, [pc, #60]	; (3308 <clk_init+0x4c>)
    32cc:	f001 f844 	bl	4358 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    32d0:	4b0e      	ldr	r3, [pc, #56]	; (330c <clk_init+0x50>)
    32d2:	4298      	cmp	r0, r3
    32d4:	d115      	bne.n	3302 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    32d6:	f003 fc6c 	bl	6bb2 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    32da:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    32dc:	490c      	ldr	r1, [pc, #48]	; (3310 <clk_init+0x54>)
    32de:	4630      	mov	r0, r6
    32e0:	f002 fe20 	bl	5f24 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    32e4:	2800      	cmp	r0, #0
    32e6:	db0b      	blt.n	3300 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32e8:	2501      	movs	r5, #1
    32ea:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    32ec:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    32ee:	4908      	ldr	r1, [pc, #32]	; (3310 <clk_init+0x54>)
    32f0:	f104 001c 	add.w	r0, r4, #28
    32f4:	f002 fe16 	bl	5f24 <onoff_manager_init>
		if (err < 0) {
    32f8:	2800      	cmp	r0, #0
    32fa:	db01      	blt.n	3300 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32fc:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    32fe:	2000      	movs	r0, #0
}
    3300:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3302:	f06f 0004 	mvn.w	r0, #4
    3306:	e7fb      	b.n	3300 <clk_init+0x44>
    3308:	00003349 	.word	0x00003349
    330c:	0bad0000 	.word	0x0bad0000
    3310:	00007228 	.word	0x00007228

00003314 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3314:	b570      	push	{r4, r5, r6, lr}
    3316:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3318:	230c      	movs	r3, #12
    331a:	4809      	ldr	r0, [pc, #36]	; (3340 <clkstarted_handle.constprop.0+0x2c>)
    331c:	434b      	muls	r3, r1
    331e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3320:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3324:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3326:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3328:	4418      	add	r0, r3
	sub_data->cb = NULL;
    332a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    332c:	f003 fa41 	bl	67b2 <set_on_state>
	if (callback) {
    3330:	b12d      	cbz	r5, 333e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3332:	4632      	mov	r2, r6
    3334:	462b      	mov	r3, r5
    3336:	4803      	ldr	r0, [pc, #12]	; (3344 <clkstarted_handle.constprop.0+0x30>)
}
    3338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    333c:	4718      	bx	r3
}
    333e:	bd70      	pop	{r4, r5, r6, pc}
    3340:	2000079c 	.word	0x2000079c
    3344:	00006ef8 	.word	0x00006ef8

00003348 <clock_event_handler>:
	switch (event) {
    3348:	b110      	cbz	r0, 3350 <clock_event_handler+0x8>
    334a:	2801      	cmp	r0, #1
    334c:	d004      	beq.n	3358 <clock_event_handler+0x10>
    334e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3350:	4b03      	ldr	r3, [pc, #12]	; (3360 <clock_event_handler+0x18>)
    3352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3354:	075b      	lsls	r3, r3, #29
    3356:	d101      	bne.n	335c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3358:	f7ff bfdc 	b.w	3314 <clkstarted_handle.constprop.0>
}
    335c:	4770      	bx	lr
    335e:	bf00      	nop
    3360:	2000079c 	.word	0x2000079c

00003364 <generic_hfclk_start>:
{
    3364:	b508      	push	{r3, lr}
	__asm__ volatile(
    3366:	f04f 0320 	mov.w	r3, #32
    336a:	f3ef 8111 	mrs	r1, BASEPRI
    336e:	f383 8812 	msr	BASEPRI_MAX, r3
    3372:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3376:	4a12      	ldr	r2, [pc, #72]	; (33c0 <generic_hfclk_start+0x5c>)
    3378:	6813      	ldr	r3, [r2, #0]
    337a:	f043 0002 	orr.w	r0, r3, #2
    337e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3380:	07da      	lsls	r2, r3, #31
    3382:	d408      	bmi.n	3396 <generic_hfclk_start+0x32>
	__asm__ volatile(
    3384:	f381 8811 	msr	BASEPRI, r1
    3388:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    338c:	2001      	movs	r0, #1
}
    338e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3392:	f000 bff1 	b.w	4378 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    339a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    339e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    33a2:	07d3      	lsls	r3, r2, #31
    33a4:	d5ee      	bpl.n	3384 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    33a6:	4807      	ldr	r0, [pc, #28]	; (33c4 <generic_hfclk_start+0x60>)
    33a8:	f003 fa03 	bl	67b2 <set_on_state>
    33ac:	f381 8811 	msr	BASEPRI, r1
    33b0:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    33b4:	2000      	movs	r0, #0
}
    33b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    33ba:	f7ff bfab 	b.w	3314 <clkstarted_handle.constprop.0>
    33be:	bf00      	nop
    33c0:	200007ec 	.word	0x200007ec
    33c4:	200007dc 	.word	0x200007dc

000033c8 <api_blocking_start>:
{
    33c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33ca:	2200      	movs	r2, #0
    33cc:	2301      	movs	r3, #1
    33ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33d2:	4a09      	ldr	r2, [pc, #36]	; (33f8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33d4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33d8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33da:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33de:	f003 fa55 	bl	688c <api_start>
	if (err < 0) {
    33e2:	2800      	cmp	r0, #0
    33e4:	db05      	blt.n	33f2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    33e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    33ea:	2300      	movs	r3, #0
    33ec:	4668      	mov	r0, sp
    33ee:	f001 ff2f 	bl	5250 <z_impl_k_sem_take>
}
    33f2:	b005      	add	sp, #20
    33f4:	f85d fb04 	ldr.w	pc, [sp], #4
    33f8:	000068b3 	.word	0x000068b3

000033fc <lfclk_start>:
{
    33fc:	b510      	push	{r4, lr}
	if (!once) {
    33fe:	4c07      	ldr	r4, [pc, #28]	; (341c <lfclk_start+0x20>)
    3400:	7823      	ldrb	r3, [r4, #0]
    3402:	b92b      	cbnz	r3, 3410 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    3404:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    3408:	f003 fd24 	bl	6e54 <z_impl_k_busy_wait>
		once = true;
    340c:	2301      	movs	r3, #1
    340e:	7023      	strb	r3, [r4, #0]
}
    3410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    3414:	2000      	movs	r0, #0
    3416:	f000 bfaf 	b.w	4378 <nrfx_clock_start>
    341a:	bf00      	nop
    341c:	20000903 	.word	0x20000903

00003420 <z_nrf_clock_control_lf_on>:
{
    3420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3424:	4938      	ldr	r1, [pc, #224]	; (3508 <z_nrf_clock_control_lf_on+0xe8>)
    3426:	f3bf 8f5b 	dmb	ish
    342a:	4607      	mov	r7, r0
    342c:	2201      	movs	r2, #1
    342e:	e851 3f00 	ldrex	r3, [r1]
    3432:	e841 2000 	strex	r0, r2, [r1]
    3436:	2800      	cmp	r0, #0
    3438:	d1f9      	bne.n	342e <z_nrf_clock_control_lf_on+0xe>
    343a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    343e:	b933      	cbnz	r3, 344e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3440:	4932      	ldr	r1, [pc, #200]	; (350c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    3442:	4833      	ldr	r0, [pc, #204]	; (3510 <z_nrf_clock_control_lf_on+0xf0>)
    3444:	604b      	str	r3, [r1, #4]
    3446:	60cb      	str	r3, [r1, #12]
    3448:	608a      	str	r2, [r1, #8]
    344a:	f002 fd7e 	bl	5f4a <onoff_request>
	switch (start_mode) {
    344e:	1e7b      	subs	r3, r7, #1
    3450:	2b01      	cmp	r3, #1
    3452:	d82b      	bhi.n	34ac <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3454:	2f01      	cmp	r7, #1
    3456:	d107      	bne.n	3468 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    345c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3460:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3464:	2b01      	cmp	r3, #1
    3466:	d021      	beq.n	34ac <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3468:	f003 fbd7 	bl	6c1a <k_is_in_isr>
    346c:	4605      	mov	r5, r0
    346e:	b9f8      	cbnz	r0, 34b0 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    3470:	4b28      	ldr	r3, [pc, #160]	; (3514 <z_nrf_clock_control_lf_on+0xf4>)
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	b1e3      	cbz	r3, 34b0 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    3476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    347a:	2202      	movs	r2, #2
    347c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3480:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3482:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3518 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3486:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    348a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    348e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    3492:	03d2      	lsls	r2, r2, #15
    3494:	d516      	bpl.n	34c4 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3496:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    349a:	2b01      	cmp	r3, #1
    349c:	d001      	beq.n	34a2 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    349e:	2f01      	cmp	r7, #1
    34a0:	d110      	bne.n	34c4 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    34a2:	b35d      	cbz	r5, 34fc <z_nrf_clock_control_lf_on+0xdc>
    34a4:	f386 8811 	msr	BASEPRI, r6
    34a8:	f3bf 8f6f 	isb	sy
}
    34ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    34b0:	f04f 0320 	mov.w	r3, #32
    34b4:	f3ef 8611 	mrs	r6, BASEPRI
    34b8:	f383 8812 	msr	BASEPRI_MAX, r3
    34bc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    34c0:	2501      	movs	r5, #1
    34c2:	e7de      	b.n	3482 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    34c4:	b1ad      	cbz	r5, 34f2 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    34c6:	4630      	mov	r0, r6
    34c8:	f7ff f856 	bl	2578 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    34cc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    34d0:	2b00      	cmp	r3, #0
    34d2:	d1da      	bne.n	348a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    34d4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    34d8:	2a00      	cmp	r2, #0
    34da:	d0d6      	beq.n	348a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34dc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    34e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    34e4:	2301      	movs	r3, #1
    34e6:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    34ea:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34ee:	60a3      	str	r3, [r4, #8]
}
    34f0:	e7cb      	b.n	348a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    34f2:	2100      	movs	r1, #0
    34f4:	2021      	movs	r0, #33	; 0x21
    34f6:	f002 f995 	bl	5824 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    34fa:	e7e7      	b.n	34cc <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    34fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3500:	2202      	movs	r2, #2
    3502:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3506:	e7d1      	b.n	34ac <z_nrf_clock_control_lf_on+0x8c>
    3508:	20000798 	.word	0x20000798
    350c:	20000788 	.word	0x20000788
    3510:	200007b8 	.word	0x200007b8
    3514:	20000d16 	.word	0x20000d16
    3518:	e000e100 	.word	0xe000e100

0000351c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    351c:	b508      	push	{r3, lr}
    351e:	4807      	ldr	r0, [pc, #28]	; (353c <uart_console_init+0x20>)
    3520:	f003 fb6c 	bl	6bfc <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3524:	b138      	cbz	r0, 3536 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    3526:	4806      	ldr	r0, [pc, #24]	; (3540 <uart_console_init+0x24>)
    3528:	f7ff fe36 	bl	3198 <__stdout_hook_install>
	__printk_hook_install(console_out);
    352c:	4804      	ldr	r0, [pc, #16]	; (3540 <uart_console_init+0x24>)
    352e:	f7fd fbf1 	bl	d14 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3532:	2000      	movs	r0, #0
}
    3534:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3536:	f06f 0012 	mvn.w	r0, #18
    353a:	e7fb      	b.n	3534 <uart_console_init+0x18>
    353c:	00006f28 	.word	0x00006f28
    3540:	00003545 	.word	0x00003545

00003544 <console_out>:
	if ('\n' == c) {
    3544:	280a      	cmp	r0, #10
{
    3546:	b538      	push	{r3, r4, r5, lr}
    3548:	4d07      	ldr	r5, [pc, #28]	; (3568 <console_out+0x24>)
    354a:	4604      	mov	r4, r0
	if ('\n' == c) {
    354c:	d104      	bne.n	3558 <console_out+0x14>
    354e:	68ab      	ldr	r3, [r5, #8]
    3550:	210d      	movs	r1, #13
    3552:	685b      	ldr	r3, [r3, #4]
    3554:	4628      	mov	r0, r5
    3556:	4798      	blx	r3
    3558:	68ab      	ldr	r3, [r5, #8]
    355a:	4803      	ldr	r0, [pc, #12]	; (3568 <console_out+0x24>)
    355c:	685b      	ldr	r3, [r3, #4]
    355e:	b2e1      	uxtb	r1, r4
    3560:	4798      	blx	r3
}
    3562:	4620      	mov	r0, r4
    3564:	bd38      	pop	{r3, r4, r5, pc}
    3566:	bf00      	nop
    3568:	00006f28 	.word	0x00006f28

0000356c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    356c:	b530      	push	{r4, r5, lr}
	return port->config;
    356e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3570:	7b05      	ldrb	r5, [r0, #12]
    3572:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3576:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    357a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    357c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3580:	d105      	bne.n	358e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3582:	4620      	mov	r0, r4
    3584:	f001 f9bc 	bl	4900 <nrfx_gpiote_trigger_disable>

		return 0;
    3588:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    358a:	b005      	add	sp, #20
    358c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    358e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3590:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3594:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3598:	d114      	bne.n	35c4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    359a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    359e:	bf0c      	ite	eq
    35a0:	2304      	moveq	r3, #4
    35a2:	2305      	movne	r3, #5
    35a4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    35a8:	2300      	movs	r3, #0
    35aa:	4619      	mov	r1, r3
    35ac:	aa02      	add	r2, sp, #8
    35ae:	4620      	mov	r0, r4
    35b0:	f000 ffdc 	bl	456c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    35b4:	4b1d      	ldr	r3, [pc, #116]	; (362c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    35b6:	4298      	cmp	r0, r3
    35b8:	d135      	bne.n	3626 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    35ba:	2101      	movs	r1, #1
    35bc:	4620      	mov	r0, r4
    35be:	f001 f95b 	bl	4878 <nrfx_gpiote_trigger_enable>
	return 0;
    35c2:	e7e1      	b.n	3588 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    35c4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    35c8:	d022      	beq.n	3610 <gpio_nrfx_pin_interrupt_configure+0xa4>
    35ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    35ce:	bf14      	ite	ne
    35d0:	2301      	movne	r3, #1
    35d2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    35d4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    35d8:	6883      	ldr	r3, [r0, #8]
    35da:	40cb      	lsrs	r3, r1
    35dc:	07d9      	lsls	r1, r3, #31
    35de:	d4e3      	bmi.n	35a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
    35e0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    35e4:	d1e0      	bne.n	35a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    35e6:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    35ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    35ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    35f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    35f6:	07db      	lsls	r3, r3, #31
    35f8:	d4d6      	bmi.n	35a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    35fa:	f10d 0507 	add.w	r5, sp, #7
    35fe:	4629      	mov	r1, r5
    3600:	4620      	mov	r0, r4
    3602:	f001 f8e5 	bl	47d0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3606:	4b0a      	ldr	r3, [pc, #40]	; (3630 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3608:	4298      	cmp	r0, r3
    360a:	d003      	beq.n	3614 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    360c:	9503      	str	r5, [sp, #12]
    360e:	e7cb      	b.n	35a8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3610:	2303      	movs	r3, #3
    3612:	e7df      	b.n	35d4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    3614:	4628      	mov	r0, r5
    3616:	f001 f929 	bl	486c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    361a:	4b04      	ldr	r3, [pc, #16]	; (362c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    361c:	4298      	cmp	r0, r3
    361e:	d0f5      	beq.n	360c <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    3620:	f06f 000b 	mvn.w	r0, #11
    3624:	e7b1      	b.n	358a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3626:	f06f 0015 	mvn.w	r0, #21
    362a:	e7ae      	b.n	358a <gpio_nrfx_pin_interrupt_configure+0x1e>
    362c:	0bad0000 	.word	0x0bad0000
    3630:	0bad0004 	.word	0x0bad0004

00003634 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3634:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3636:	f001 f909 	bl	484c <nrfx_gpiote_is_init>
    363a:	4604      	mov	r4, r0
    363c:	b968      	cbnz	r0, 365a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    363e:	f001 f8dd 	bl	47fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3642:	4b08      	ldr	r3, [pc, #32]	; (3664 <gpio_nrfx_init+0x30>)
    3644:	4298      	cmp	r0, r3
    3646:	d10a      	bne.n	365e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3648:	4807      	ldr	r0, [pc, #28]	; (3668 <gpio_nrfx_init+0x34>)
    364a:	4621      	mov	r1, r4
    364c:	f001 f8ba 	bl	47c4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3650:	4622      	mov	r2, r4
    3652:	2105      	movs	r1, #5
    3654:	2006      	movs	r0, #6
    3656:	f7ff f81d 	bl	2694 <z_arm_irq_priority_set>
		return 0;
    365a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    365c:	bd10      	pop	{r4, pc}
		return -EIO;
    365e:	f06f 0004 	mvn.w	r0, #4
    3662:	e7fb      	b.n	365c <gpio_nrfx_init+0x28>
    3664:	0bad0000 	.word	0x0bad0000
    3668:	0000366d 	.word	0x0000366d

0000366c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    366c:	0943      	lsrs	r3, r0, #5
{
    366e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3670:	d107      	bne.n	3682 <nrfx_gpio_handler+0x16>
	return list->head;
    3672:	4b0b      	ldr	r3, [pc, #44]	; (36a0 <nrfx_gpio_handler+0x34>)
    3674:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3676:	b121      	cbz	r1, 3682 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    3678:	2501      	movs	r5, #1
	return node->next;
    367a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    367c:	4e09      	ldr	r6, [pc, #36]	; (36a4 <nrfx_gpio_handler+0x38>)
    367e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3680:	b901      	cbnz	r1, 3684 <nrfx_gpio_handler+0x18>
}
    3682:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3684:	688a      	ldr	r2, [r1, #8]
    3686:	402a      	ands	r2, r5
    3688:	d002      	beq.n	3690 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    368a:	684b      	ldr	r3, [r1, #4]
    368c:	4630      	mov	r0, r6
    368e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3690:	b11c      	cbz	r4, 369a <nrfx_gpio_handler+0x2e>
    3692:	6823      	ldr	r3, [r4, #0]
    3694:	4621      	mov	r1, r4
    3696:	461c      	mov	r4, r3
    3698:	e7f2      	b.n	3680 <nrfx_gpio_handler+0x14>
    369a:	4623      	mov	r3, r4
    369c:	e7fa      	b.n	3694 <nrfx_gpio_handler+0x28>
    369e:	bf00      	nop
    36a0:	200007f0 	.word	0x200007f0
    36a4:	00006f10 	.word	0x00006f10

000036a8 <gpio_nrfx_pin_configure>:
{
    36a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    36ac:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    36ae:	7b3b      	ldrb	r3, [r7, #12]
    36b0:	f001 051f 	and.w	r5, r1, #31
    36b4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    36b8:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    36ba:	4628      	mov	r0, r5
    36bc:	f10d 0103 	add.w	r1, sp, #3
{
    36c0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    36c2:	f001 f885 	bl	47d0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    36c6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    36ca:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    36cc:	d10b      	bne.n	36e6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    36ce:	4628      	mov	r0, r5
    36d0:	f001 f93e 	bl	4950 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    36d4:	4b3d      	ldr	r3, [pc, #244]	; (37cc <gpio_nrfx_pin_configure+0x124>)
    36d6:	4598      	cmp	r8, r3
    36d8:	d103      	bne.n	36e2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    36da:	f89d 0003 	ldrb.w	r0, [sp, #3]
    36de:	f001 f8bf 	bl	4860 <nrfx_gpiote_channel_free>
		return 0;
    36e2:	2000      	movs	r0, #0
    36e4:	e00c      	b.n	3700 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    36e6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    36e8:	4619      	mov	r1, r3
    36ea:	aa02      	add	r2, sp, #8
    36ec:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    36ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    36f2:	f000 ff3b 	bl	456c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    36f6:	4b35      	ldr	r3, [pc, #212]	; (37cc <gpio_nrfx_pin_configure+0x124>)
    36f8:	4298      	cmp	r0, r3
    36fa:	d004      	beq.n	3706 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    36fc:	f06f 0015 	mvn.w	r0, #21
}
    3700:	b004      	add	sp, #16
    3702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3706:	4580      	cmp	r8, r0
    3708:	d103      	bne.n	3712 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    370a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    370e:	f001 f8a7 	bl	4860 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3712:	03a3      	lsls	r3, r4, #14
    3714:	d54b      	bpl.n	37ae <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3716:	f240 3306 	movw	r3, #774	; 0x306
    371a:	4023      	ands	r3, r4
    371c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3720:	d019      	beq.n	3756 <gpio_nrfx_pin_configure+0xae>
    3722:	d80c      	bhi.n	373e <gpio_nrfx_pin_configure+0x96>
    3724:	2b06      	cmp	r3, #6
    3726:	d017      	beq.n	3758 <gpio_nrfx_pin_configure+0xb0>
    3728:	d804      	bhi.n	3734 <gpio_nrfx_pin_configure+0x8c>
    372a:	b1ab      	cbz	r3, 3758 <gpio_nrfx_pin_configure+0xb0>
    372c:	2b02      	cmp	r3, #2
    372e:	d1e5      	bne.n	36fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3730:	2304      	movs	r3, #4
    3732:	e011      	b.n	3758 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3738:	d1e0      	bne.n	36fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    373a:	2301      	movs	r3, #1
    373c:	e00c      	b.n	3758 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    373e:	f240 2202 	movw	r2, #514	; 0x202
    3742:	4293      	cmp	r3, r2
    3744:	d027      	beq.n	3796 <gpio_nrfx_pin_configure+0xee>
    3746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    374a:	d026      	beq.n	379a <gpio_nrfx_pin_configure+0xf2>
    374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3750:	d1d4      	bne.n	36fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    3752:	2302      	movs	r3, #2
    3754:	e000      	b.n	3758 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    3756:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3758:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    375c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3760:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3764:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3766:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    376a:	bf54      	ite	pl
    376c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3770:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3772:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3774:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3778:	d511      	bpl.n	379e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    377a:	687a      	ldr	r2, [r7, #4]
    377c:	2301      	movs	r3, #1
    377e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3780:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3784:	2200      	movs	r2, #0
    3786:	a901      	add	r1, sp, #4
    3788:	4628      	mov	r0, r5
    378a:	f000 ff9d 	bl	46c8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    378e:	4b0f      	ldr	r3, [pc, #60]	; (37cc <gpio_nrfx_pin_configure+0x124>)
    3790:	4298      	cmp	r0, r3
    3792:	d0a6      	beq.n	36e2 <gpio_nrfx_pin_configure+0x3a>
    3794:	e7b2      	b.n	36fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3796:	2305      	movs	r3, #5
    3798:	e7de      	b.n	3758 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    379a:	2303      	movs	r3, #3
    379c:	e7dc      	b.n	3758 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    379e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    37a0:	bf41      	itttt	mi
    37a2:	2301      	movmi	r3, #1
    37a4:	687a      	ldrmi	r2, [r7, #4]
    37a6:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    37a8:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    37ac:	e7ea      	b.n	3784 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    37ae:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    37b0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    37b4:	bf54      	ite	pl
    37b6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    37ba:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    37bc:	461a      	mov	r2, r3
    37be:	a901      	add	r1, sp, #4
    37c0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    37c2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    37c6:	f000 fed1 	bl	456c <nrfx_gpiote_input_configure>
    37ca:	e7e0      	b.n	378e <gpio_nrfx_pin_configure+0xe6>
    37cc:	0bad0000 	.word	0x0bad0000

000037d0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    37d0:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    37d2:	794b      	ldrb	r3, [r1, #5]
    37d4:	2b01      	cmp	r3, #1
    37d6:	d120      	bne.n	381a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    37d8:	798b      	ldrb	r3, [r1, #6]
    37da:	2b03      	cmp	r3, #3
    37dc:	d11d      	bne.n	381a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    37de:	79cd      	ldrb	r5, [r1, #7]
    37e0:	b10d      	cbz	r5, 37e6 <uarte_nrfx_configure+0x16>
    37e2:	2d01      	cmp	r5, #1
    37e4:	d119      	bne.n	381a <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    37e6:	790a      	ldrb	r2, [r1, #4]
    37e8:	b112      	cbz	r2, 37f0 <uarte_nrfx_configure+0x20>
    37ea:	2a02      	cmp	r2, #2
    37ec:	d115      	bne.n	381a <uarte_nrfx_configure+0x4a>
    37ee:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    37f0:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    37f2:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    37f4:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    37f8:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
    37fa:	d064      	beq.n	38c6 <uarte_nrfx_configure+0xf6>
    37fc:	d82b      	bhi.n	3856 <uarte_nrfx_configure+0x86>
    37fe:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3802:	d063      	beq.n	38cc <uarte_nrfx_configure+0xfc>
    3804:	d814      	bhi.n	3830 <uarte_nrfx_configure+0x60>
    3806:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    380a:	d061      	beq.n	38d0 <uarte_nrfx_configure+0x100>
    380c:	d808      	bhi.n	3820 <uarte_nrfx_configure+0x50>
    380e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3812:	d060      	beq.n	38d6 <uarte_nrfx_configure+0x106>
    3814:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3818:	d060      	beq.n	38dc <uarte_nrfx_configure+0x10c>
    381a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    381e:	e051      	b.n	38c4 <uarte_nrfx_configure+0xf4>
    3820:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3824:	d05d      	beq.n	38e2 <uarte_nrfx_configure+0x112>
    3826:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    382a:	d1f6      	bne.n	381a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    382c:	4b37      	ldr	r3, [pc, #220]	; (390c <uarte_nrfx_configure+0x13c>)
    382e:	e03c      	b.n	38aa <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3830:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3834:	d058      	beq.n	38e8 <uarte_nrfx_configure+0x118>
    3836:	d807      	bhi.n	3848 <uarte_nrfx_configure+0x78>
    3838:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    383c:	d056      	beq.n	38ec <uarte_nrfx_configure+0x11c>
    383e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3842:	d1ea      	bne.n	381a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3844:	4b32      	ldr	r3, [pc, #200]	; (3910 <uarte_nrfx_configure+0x140>)
    3846:	e030      	b.n	38aa <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3848:	f647 2412 	movw	r4, #31250	; 0x7a12
    384c:	42a3      	cmp	r3, r4
    384e:	d1e4      	bne.n	381a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3850:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3854:	e029      	b.n	38aa <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3856:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    385a:	d049      	beq.n	38f0 <uarte_nrfx_configure+0x120>
    385c:	d813      	bhi.n	3886 <uarte_nrfx_configure+0xb6>
    385e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3862:	d048      	beq.n	38f6 <uarte_nrfx_configure+0x126>
    3864:	d809      	bhi.n	387a <uarte_nrfx_configure+0xaa>
    3866:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    386a:	42a3      	cmp	r3, r4
    386c:	d045      	beq.n	38fa <uarte_nrfx_configure+0x12a>
    386e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3872:	d1d2      	bne.n	381a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3874:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3878:	e017      	b.n	38aa <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    387a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    387e:	d1cc      	bne.n	381a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3880:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3884:	e011      	b.n	38aa <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3886:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    388a:	d039      	beq.n	3900 <uarte_nrfx_configure+0x130>
    388c:	d808      	bhi.n	38a0 <uarte_nrfx_configure+0xd0>
    388e:	4c21      	ldr	r4, [pc, #132]	; (3914 <uarte_nrfx_configure+0x144>)
    3890:	42a3      	cmp	r3, r4
    3892:	d038      	beq.n	3906 <uarte_nrfx_configure+0x136>
    3894:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3898:	d1bf      	bne.n	381a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    389a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    389e:	e004      	b.n	38aa <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    38a0:	4c1d      	ldr	r4, [pc, #116]	; (3918 <uarte_nrfx_configure+0x148>)
    38a2:	42a3      	cmp	r3, r4
    38a4:	d1b9      	bne.n	381a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    38a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    38aa:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    38ac:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
    38b0:	6843      	ldr	r3, [r0, #4]
    38b2:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    38b4:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    38b6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    38ba:	c903      	ldmia	r1, {r0, r1}
    38bc:	1d23      	adds	r3, r4, #4
    38be:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    38c2:	2000      	movs	r0, #0
}
    38c4:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    38c6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    38ca:	e7ee      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    38cc:	4b13      	ldr	r3, [pc, #76]	; (391c <uarte_nrfx_configure+0x14c>)
    38ce:	e7ec      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    38d0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    38d4:	e7e9      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    38d6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    38da:	e7e6      	b.n	38aa <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    38dc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    38e0:	e7e3      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    38e2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    38e6:	e7e0      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    38e8:	4b0d      	ldr	r3, [pc, #52]	; (3920 <uarte_nrfx_configure+0x150>)
    38ea:	e7de      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    38ec:	4b0d      	ldr	r3, [pc, #52]	; (3924 <uarte_nrfx_configure+0x154>)
    38ee:	e7dc      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    38f0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    38f4:	e7d9      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    38f6:	4b0c      	ldr	r3, [pc, #48]	; (3928 <uarte_nrfx_configure+0x158>)
    38f8:	e7d7      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    38fa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    38fe:	e7d4      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3900:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3904:	e7d1      	b.n	38aa <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3906:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    390a:	e7ce      	b.n	38aa <uarte_nrfx_configure+0xda>
    390c:	0013b000 	.word	0x0013b000
    3910:	004ea000 	.word	0x004ea000
    3914:	0003d090 	.word	0x0003d090
    3918:	000f4240 	.word	0x000f4240
    391c:	00275000 	.word	0x00275000
    3920:	0075c000 	.word	0x0075c000
    3924:	003af000 	.word	0x003af000
    3928:	013a9000 	.word	0x013a9000

0000392c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    392c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3930:	2200      	movs	r2, #0
    3932:	b087      	sub	sp, #28
    3934:	4680      	mov	r8, r0
    3936:	2101      	movs	r1, #1
    3938:	2002      	movs	r0, #2
    393a:	f7fe feab 	bl	2694 <z_arm_irq_priority_set>
    393e:	2002      	movs	r0, #2
    3940:	f7fe fe8c 	bl	265c <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    3944:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    3948:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    394c:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    394e:	2100      	movs	r1, #0
    3950:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    3954:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3958:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    395c:	466a      	mov	r2, sp
    395e:	4648      	mov	r0, r9
    3960:	f002 ffff 	bl	6962 <pinctrl_lookup_state>
	if (ret < 0) {
    3964:	1e05      	subs	r5, r0, #0
    3966:	db25      	blt.n	39b4 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3968:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    396a:	f8d9 2000 	ldr.w	r2, [r9]
    396e:	7919      	ldrb	r1, [r3, #4]
    3970:	6818      	ldr	r0, [r3, #0]
    3972:	f003 f809 	bl	6988 <pinctrl_configure_pins>
	if (err < 0) {
    3976:	1e05      	subs	r5, r0, #0
    3978:	db1c      	blt.n	39b4 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    397a:	1d31      	adds	r1, r6, #4
    397c:	4640      	mov	r0, r8
    397e:	f7ff ff27 	bl	37d0 <uarte_nrfx_configure>
	if (err) {
    3982:	4605      	mov	r5, r0
    3984:	b9b0      	cbnz	r0, 39b4 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3986:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3988:	0799      	lsls	r1, r3, #30
    398a:	d52b      	bpl.n	39e4 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    398c:	f106 0018 	add.w	r0, r6, #24
    3990:	f001 f8aa 	bl	4ae8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3994:	4b27      	ldr	r3, [pc, #156]	; (3a34 <uarte_0_init+0x108>)
    3996:	4298      	cmp	r0, r3
    3998:	d010      	beq.n	39bc <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    399a:	4b27      	ldr	r3, [pc, #156]	; (3a38 <uarte_0_init+0x10c>)
    399c:	9305      	str	r3, [sp, #20]
    399e:	2302      	movs	r3, #2
    39a0:	9304      	str	r3, [sp, #16]
    39a2:	4826      	ldr	r0, [pc, #152]	; (3a3c <uarte_0_init+0x110>)
    39a4:	462b      	mov	r3, r5
    39a6:	aa04      	add	r2, sp, #16
    39a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    39ac:	f06f 0504 	mvn.w	r5, #4
    39b0:	f7fe f924 	bl	1bfc <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    39b4:	4628      	mov	r0, r5
    39b6:	b007      	add	sp, #28
    39b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    39bc:	7e33      	ldrb	r3, [r6, #24]
    39be:	00db      	lsls	r3, r3, #3
    39c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    39c4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    39c8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    39cc:	f504 7190 	add.w	r1, r4, #288	; 0x120
    39d0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    39d4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    39d8:	7e32      	ldrb	r2, [r6, #24]
    39da:	2301      	movs	r3, #1
    39dc:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    39de:	4a18      	ldr	r2, [pc, #96]	; (3a40 <uarte_0_init+0x114>)
    39e0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    39e4:	2308      	movs	r3, #8
    39e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    39ea:	7a3b      	ldrb	r3, [r7, #8]
    39ec:	b953      	cbnz	r3, 3a04 <uarte_0_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39ee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    39f2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    39f6:	6973      	ldr	r3, [r6, #20]
    39f8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    39fc:	2301      	movs	r3, #1
    39fe:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a02:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3a04:	687b      	ldr	r3, [r7, #4]
    3a06:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3a08:	bf5c      	itt	pl
    3a0a:	f44f 7380 	movpl.w	r3, #256	; 0x100
    3a0e:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3a12:	687b      	ldr	r3, [r7, #4]
    3a14:	06db      	lsls	r3, r3, #27
    3a16:	bf44      	itt	mi
    3a18:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3a1c:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3a20:	6933      	ldr	r3, [r6, #16]
    3a22:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3a26:	2300      	movs	r3, #0
    3a28:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a2c:	2301      	movs	r3, #1
    3a2e:	60a3      	str	r3, [r4, #8]
    3a30:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3a32:	e7bf      	b.n	39b4 <uarte_0_init+0x88>
    3a34:	0bad0000 	.word	0x0bad0000
    3a38:	00007a49 	.word	0x00007a49
    3a3c:	000070fc 	.word	0x000070fc
    3a40:	4001f000 	.word	0x4001f000

00003a44 <uarte_nrfx_poll_out>:
{
    3a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a46:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    3a48:	6907      	ldr	r7, [r0, #16]
{
    3a4a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3a4c:	f003 f8e5 	bl	6c1a <k_is_in_isr>
    3a50:	b9b0      	cbnz	r0, 3a80 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    3a52:	4b2e      	ldr	r3, [pc, #184]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	b19b      	cbz	r3, 3a80 <uarte_nrfx_poll_out+0x3c>
{
    3a58:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3a5a:	6860      	ldr	r0, [r4, #4]
    3a5c:	f003 f83e 	bl	6adc <is_tx_ready.isra.0>
    3a60:	bb00      	cbnz	r0, 3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a62:	2001      	movs	r0, #1
    3a64:	f003 f8a3 	bl	6bae <nrfx_busy_wait>
    3a68:	3e01      	subs	r6, #1
    3a6a:	d1f6      	bne.n	3a5a <uarte_nrfx_poll_out+0x16>
    3a6c:	2100      	movs	r1, #0
    3a6e:	2021      	movs	r0, #33	; 0x21
    3a70:	f001 fed8 	bl	5824 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3a74:	e7f0      	b.n	3a58 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    3a76:	f386 8811 	msr	BASEPRI, r6
    3a7a:	f3bf 8f6f 	isb	sy
}
    3a7e:	e7f5      	b.n	3a6c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    3a80:	f04f 0320 	mov.w	r3, #32
    3a84:	f3ef 8611 	mrs	r6, BASEPRI
    3a88:	f383 8812 	msr	BASEPRI_MAX, r3
    3a8c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3a90:	6860      	ldr	r0, [r4, #4]
    3a92:	4631      	mov	r1, r6
    3a94:	f003 f822 	bl	6adc <is_tx_ready.isra.0>
    3a98:	b990      	cbnz	r0, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
	__asm__ volatile(
    3a9a:	f386 8811 	msr	BASEPRI, r6
    3a9e:	f3bf 8f6f 	isb	sy
}
    3aa2:	e7ed      	b.n	3a80 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    3aa4:	f04f 0320 	mov.w	r3, #32
    3aa8:	f3ef 8611 	mrs	r6, BASEPRI
    3aac:	f383 8812 	msr	BASEPRI_MAX, r3
    3ab0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3ab4:	6860      	ldr	r0, [r4, #4]
    3ab6:	4631      	mov	r1, r6
    3ab8:	f003 f810 	bl	6adc <is_tx_ready.isra.0>
    3abc:	2800      	cmp	r0, #0
    3abe:	d0da      	beq.n	3a76 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    3ac0:	693b      	ldr	r3, [r7, #16]
    3ac2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    3ac4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3ac6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    3ac8:	6813      	ldr	r3, [r2, #0]
    3aca:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3ace:	2001      	movs	r0, #1
    3ad0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ad4:	2000      	movs	r0, #0
    3ad6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    3ada:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    3ade:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3ae2:	6852      	ldr	r2, [r2, #4]
    3ae4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    3ae8:	06d2      	lsls	r2, r2, #27
    3aea:	d508      	bpl.n	3afe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66>
	return config->uarte_regs;
    3aec:	6862      	ldr	r2, [r4, #4]
    3aee:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3af0:	2008      	movs	r0, #8
    3af2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3af6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3afa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3afe:	2201      	movs	r2, #1
    3b00:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3b02:	f381 8811 	msr	BASEPRI, r1
    3b06:	f3bf 8f6f 	isb	sy
}
    3b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b0c:	20000d16 	.word	0x20000d16

00003b10 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3b10:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3b12:	2301      	movs	r3, #1
    3b14:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b16:	4a0e      	ldr	r2, [pc, #56]	; (3b50 <compare_int_lock+0x40>)
    3b18:	f3bf 8f5b 	dmb	ish
    3b1c:	43dc      	mvns	r4, r3
    3b1e:	e852 1f00 	ldrex	r1, [r2]
    3b22:	ea01 0504 	and.w	r5, r1, r4
    3b26:	e842 5600 	strex	r6, r5, [r2]
    3b2a:	2e00      	cmp	r6, #0
    3b2c:	d1f7      	bne.n	3b1e <compare_int_lock+0xe>
    3b2e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b36:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3b38:	4806      	ldr	r0, [pc, #24]	; (3b54 <compare_int_lock+0x44>)
    3b3a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3b3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b42:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3b46:	420b      	tst	r3, r1
}
    3b48:	bf14      	ite	ne
    3b4a:	2001      	movne	r0, #1
    3b4c:	2000      	moveq	r0, #0
    3b4e:	bd70      	pop	{r4, r5, r6, pc}
    3b50:	20000800 	.word	0x20000800
    3b54:	40011000 	.word	0x40011000

00003b58 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    3b58:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    3b5a:	490e      	ldr	r1, [pc, #56]	; (3b94 <sys_clock_timeout_handler+0x3c>)
    3b5c:	e9d1 3400 	ldrd	r3, r4, [r1]
    3b60:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    3b62:	18c3      	adds	r3, r0, r3
    3b64:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    3b68:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    3b6c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3b70:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    3b74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3b78:	d209      	bcs.n	3b8e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3b7a:	4b07      	ldr	r3, [pc, #28]	; (3b98 <sys_clock_timeout_handler+0x40>)
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	0a1a      	lsrs	r2, r3, #8
    3b80:	061b      	lsls	r3, r3, #24
    3b82:	199c      	adds	r4, r3, r6
    3b84:	4b05      	ldr	r3, [pc, #20]	; (3b9c <sys_clock_timeout_handler+0x44>)
    3b86:	f142 0500 	adc.w	r5, r2, #0
    3b8a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    3b8e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    3b90:	f001 bf9e 	b.w	5ad0 <sys_clock_announce>
    3b94:	200005d0 	.word	0x200005d0
    3b98:	20000804 	.word	0x20000804
    3b9c:	200005d8 	.word	0x200005d8

00003ba0 <compare_int_unlock>:
	if (key) {
    3ba0:	b311      	cbz	r1, 3be8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3ba2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3ba6:	2301      	movs	r3, #1
    3ba8:	4a10      	ldr	r2, [pc, #64]	; (3bec <compare_int_unlock+0x4c>)
    3baa:	4083      	lsls	r3, r0
    3bac:	e852 cf00 	ldrex	ip, [r2]
    3bb0:	ea4c 0c03 	orr.w	ip, ip, r3
    3bb4:	e842 c100 	strex	r1, ip, [r2]
    3bb8:	2900      	cmp	r1, #0
    3bba:	d1f7      	bne.n	3bac <compare_int_unlock+0xc>
    3bbc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3bc0:	4a0b      	ldr	r2, [pc, #44]	; (3bf0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3bc6:	4083      	lsls	r3, r0
    3bc8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3bcc:	4b09      	ldr	r3, [pc, #36]	; (3bf4 <compare_int_unlock+0x54>)
    3bce:	f3bf 8f5b 	dmb	ish
    3bd2:	681b      	ldr	r3, [r3, #0]
    3bd4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3bd8:	40c3      	lsrs	r3, r0
    3bda:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bdc:	bf42      	ittt	mi
    3bde:	4b06      	ldrmi	r3, [pc, #24]	; (3bf8 <compare_int_unlock+0x58>)
    3be0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3be4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3be8:	4770      	bx	lr
    3bea:	bf00      	nop
    3bec:	20000800 	.word	0x20000800
    3bf0:	40011000 	.word	0x40011000
    3bf4:	200007fc 	.word	0x200007fc
    3bf8:	e000e100 	.word	0xe000e100

00003bfc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3bfc:	4b0d      	ldr	r3, [pc, #52]	; (3c34 <z_nrf_rtc_timer_read+0x38>)
    3bfe:	6818      	ldr	r0, [r3, #0]
    3c00:	0a01      	lsrs	r1, r0, #8
    3c02:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3c04:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3c08:	4b0b      	ldr	r3, [pc, #44]	; (3c38 <z_nrf_rtc_timer_read+0x3c>)
    3c0a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3c0e:	1818      	adds	r0, r3, r0
    3c10:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3c18:	d20a      	bcs.n	3c30 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3c1a:	4b08      	ldr	r3, [pc, #32]	; (3c3c <z_nrf_rtc_timer_read+0x40>)
    3c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3c20:	4290      	cmp	r0, r2
    3c22:	eb71 0303 	sbcs.w	r3, r1, r3
    3c26:	d203      	bcs.n	3c30 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3c28:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3c2c:	f141 0100 	adc.w	r1, r1, #0
}
    3c30:	4770      	bx	lr
    3c32:	bf00      	nop
    3c34:	20000804 	.word	0x20000804
    3c38:	40011000 	.word	0x40011000
    3c3c:	200005d8 	.word	0x200005d8

00003c40 <compare_set>:
{
    3c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c44:	4616      	mov	r6, r2
    3c46:	461f      	mov	r7, r3
    3c48:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    3c4a:	f7ff ff61 	bl	3b10 <compare_int_lock>
    3c4e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3c50:	f7ff ffd4 	bl	3bfc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3c54:	42b0      	cmp	r0, r6
    3c56:	eb71 0307 	sbcs.w	r3, r1, r7
    3c5a:	d251      	bcs.n	3d00 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    3c5c:	4b3a      	ldr	r3, [pc, #232]	; (3d48 <compare_set+0x108>)
    3c5e:	1a30      	subs	r0, r6, r0
    3c60:	eb67 0101 	sbc.w	r1, r7, r1
    3c64:	4298      	cmp	r0, r3
    3c66:	f171 0100 	sbcs.w	r1, r1, #0
    3c6a:	d26a      	bcs.n	3d42 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    3c6c:	4b37      	ldr	r3, [pc, #220]	; (3d4c <compare_set+0x10c>)
    3c6e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    3c72:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    3c76:	429f      	cmp	r7, r3
    3c78:	bf08      	it	eq
    3c7a:	4296      	cmpeq	r6, r2
    3c7c:	d04e      	beq.n	3d1c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3c7e:	4934      	ldr	r1, [pc, #208]	; (3d50 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c80:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3c84:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c88:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3c8c:	00ad      	lsls	r5, r5, #2
    3c8e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    3c92:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c94:	b2ad      	uxth	r5, r5
    3c96:	f002 ff6b 	bl	6b70 <event_clear>
	return absolute_time & COUNTER_MAX;
    3c9a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    3c9e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    3ca2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3ca6:	4a2b      	ldr	r2, [pc, #172]	; (3d54 <compare_set+0x114>)
    3ca8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3caa:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    3cae:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    3cb0:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    3cb4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3cb6:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    3cba:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    3cbe:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    3cc2:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3cc6:	f06f 0002 	mvn.w	r0, #2
    3cca:	eba0 0008 	sub.w	r0, r0, r8
    3cce:	4460      	add	r0, ip
    3cd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    3cd4:	4290      	cmp	r0, r2
    3cd6:	d921      	bls.n	3d1c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3cd8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    3cda:	b160      	cbz	r0, 3cf6 <compare_set+0xb6>
     return p_reg->COUNTER;
    3cdc:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3ce0:	eba8 000b 	sub.w	r0, r8, fp
    3ce4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    3ce8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3cec:	d916      	bls.n	3d1c <compare_set+0xdc>
					event_clear(chan);
    3cee:	4620      	mov	r0, r4
    3cf0:	f002 ff3e 	bl	6b70 <event_clear>
    3cf4:	4a17      	ldr	r2, [pc, #92]	; (3d54 <compare_set+0x114>)
			cc_val = now + cc_inc;
    3cf6:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    3cfa:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    3cfe:	e7d9      	b.n	3cb4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3d00:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3d02:	4a15      	ldr	r2, [pc, #84]	; (3d58 <compare_set+0x118>)
    3d04:	f3bf 8f5b 	dmb	ish
    3d08:	40a3      	lsls	r3, r4
    3d0a:	e852 0f00 	ldrex	r0, [r2]
    3d0e:	4318      	orrs	r0, r3
    3d10:	e842 0100 	strex	r1, r0, [r2]
    3d14:	2900      	cmp	r1, #0
    3d16:	d1f8      	bne.n	3d0a <compare_set+0xca>
    3d18:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3d1c:	490b      	ldr	r1, [pc, #44]	; (3d4c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    3d1e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    3d20:	0123      	lsls	r3, r4, #4
    3d22:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    3d26:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    3d2a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3d2e:	6053      	str	r3, [r2, #4]
	return ret;
    3d30:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    3d32:	4620      	mov	r0, r4
    3d34:	9900      	ldr	r1, [sp, #0]
    3d36:	f7ff ff33 	bl	3ba0 <compare_int_unlock>
}
    3d3a:	4628      	mov	r0, r5
    3d3c:	b003      	add	sp, #12
    3d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    3d42:	f06f 0515 	mvn.w	r5, #21
    3d46:	e7f4      	b.n	3d32 <compare_set+0xf2>
    3d48:	00800001 	.word	0x00800001
    3d4c:	200005c0 	.word	0x200005c0
    3d50:	40011000 	.word	0x40011000
    3d54:	007ffffd 	.word	0x007ffffd
    3d58:	200007fc 	.word	0x200007fc

00003d5c <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    3d5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    3d5e:	4c1b      	ldr	r4, [pc, #108]	; (3dcc <sys_clock_driver_init+0x70>)
    3d60:	4b1b      	ldr	r3, [pc, #108]	; (3dd0 <sys_clock_driver_init+0x74>)
    3d62:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    3d66:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3d6a:	4b1a      	ldr	r3, [pc, #104]	; (3dd4 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    3d6c:	2500      	movs	r5, #0
    3d6e:	f04f 30ff 	mov.w	r0, #4294967295
    3d72:	f04f 31ff 	mov.w	r1, #4294967295
    3d76:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    3d7a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3d82:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d86:	4b14      	ldr	r3, [pc, #80]	; (3dd8 <sys_clock_driver_init+0x7c>)
    3d88:	2602      	movs	r6, #2
    3d8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3d8e:	2101      	movs	r1, #1
    3d90:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3d94:	2011      	movs	r0, #17
    3d96:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3d9a:	462a      	mov	r2, r5
    3d9c:	f7fe fc7a 	bl	2694 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3da0:	2011      	movs	r0, #17
    3da2:	f7fe fc5b 	bl	265c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3da6:	4a0d      	ldr	r2, [pc, #52]	; (3ddc <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3da8:	2301      	movs	r3, #1
    3daa:	60a3      	str	r3, [r4, #8]
    3dac:	6023      	str	r3, [r4, #0]
    3dae:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3db0:	4b0b      	ldr	r3, [pc, #44]	; (3de0 <sys_clock_driver_init+0x84>)
    3db2:	4a0c      	ldr	r2, [pc, #48]	; (3de4 <sys_clock_driver_init+0x88>)
    3db4:	9300      	str	r3, [sp, #0]
    3db6:	9501      	str	r5, [sp, #4]
    3db8:	2300      	movs	r3, #0
    3dba:	4628      	mov	r0, r5
    3dbc:	f7ff ff40 	bl	3c40 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3dc0:	4630      	mov	r0, r6
    3dc2:	f7ff fb2d 	bl	3420 <z_nrf_clock_control_lf_on>

	return 0;
}
    3dc6:	4628      	mov	r0, r5
    3dc8:	b002      	add	sp, #8
    3dca:	bd70      	pop	{r4, r5, r6, pc}
    3dcc:	40011000 	.word	0x40011000
    3dd0:	000f0003 	.word	0x000f0003
    3dd4:	200005c0 	.word	0x200005c0
    3dd8:	e000e100 	.word	0xe000e100
    3ddc:	20000800 	.word	0x20000800
    3de0:	00003b59 	.word	0x00003b59
    3de4:	007fffff 	.word	0x007fffff

00003de8 <rtc_nrf_isr>:
{
    3de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3dec:	4c2f      	ldr	r4, [pc, #188]	; (3eac <rtc_nrf_isr+0xc4>)
    3dee:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3df2:	0799      	lsls	r1, r3, #30
    3df4:	d50b      	bpl.n	3e0e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3df6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3dfa:	b143      	cbz	r3, 3e0e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3dfc:	4a2c      	ldr	r2, [pc, #176]	; (3eb0 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3dfe:	2300      	movs	r3, #0
    3e00:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3e04:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3e08:	6813      	ldr	r3, [r2, #0]
    3e0a:	3301      	adds	r3, #1
    3e0c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    3e0e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3e12:	03da      	lsls	r2, r3, #15
    3e14:	d52a      	bpl.n	3e6c <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3e16:	f3bf 8f5b 	dmb	ish
    3e1a:	4b26      	ldr	r3, [pc, #152]	; (3eb4 <rtc_nrf_isr+0xcc>)
    3e1c:	e853 2f00 	ldrex	r2, [r3]
    3e20:	f022 0101 	bic.w	r1, r2, #1
    3e24:	e843 1000 	strex	r0, r1, [r3]
    3e28:	2800      	cmp	r0, #0
    3e2a:	d1f7      	bne.n	3e1c <rtc_nrf_isr+0x34>
    3e2c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    3e30:	07d3      	lsls	r3, r2, #31
    3e32:	d402      	bmi.n	3e3a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e34:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3e38:	b1c3      	cbz	r3, 3e6c <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e3a:	2500      	movs	r5, #0
    3e3c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3e40:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    3e44:	f7ff feda 	bl	3bfc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3e48:	f04f 0320 	mov.w	r3, #32
    3e4c:	f3ef 8211 	mrs	r2, BASEPRI
    3e50:	f383 8812 	msr	BASEPRI_MAX, r3
    3e54:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3e58:	4b17      	ldr	r3, [pc, #92]	; (3eb8 <rtc_nrf_isr+0xd0>)
    3e5a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3e5e:	42b0      	cmp	r0, r6
    3e60:	41b9      	sbcs	r1, r7
    3e62:	d206      	bcs.n	3e72 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    3e64:	f382 8811 	msr	BASEPRI, r2
    3e68:	f3bf 8f6f 	isb	sy
}
    3e6c:	b003      	add	sp, #12
    3e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3e72:	f04f 38ff 	mov.w	r8, #4294967295
    3e76:	f04f 39ff 	mov.w	r9, #4294967295
    3e7a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    3e7e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    3e82:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    3e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3e88:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e8c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3e90:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3e94:	f382 8811 	msr	BASEPRI, r2
    3e98:	f3bf 8f6f 	isb	sy
		if (handler) {
    3e9c:	2900      	cmp	r1, #0
    3e9e:	d0e5      	beq.n	3e6c <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    3ea0:	9000      	str	r0, [sp, #0]
    3ea2:	4632      	mov	r2, r6
    3ea4:	463b      	mov	r3, r7
    3ea6:	4628      	mov	r0, r5
    3ea8:	4788      	blx	r1
    3eaa:	e7df      	b.n	3e6c <rtc_nrf_isr+0x84>
    3eac:	40011000 	.word	0x40011000
    3eb0:	20000804 	.word	0x20000804
    3eb4:	200007fc 	.word	0x200007fc
    3eb8:	200005c0 	.word	0x200005c0

00003ebc <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    3ebc:	1c43      	adds	r3, r0, #1
{
    3ebe:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    3ec0:	d022      	beq.n	3f08 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3ec2:	2801      	cmp	r0, #1
    3ec4:	dd22      	ble.n	3f0c <sys_clock_set_timeout+0x50>
    3ec6:	4a12      	ldr	r2, [pc, #72]	; (3f10 <sys_clock_set_timeout+0x54>)
    3ec8:	4b12      	ldr	r3, [pc, #72]	; (3f14 <sys_clock_set_timeout+0x58>)
    3eca:	4290      	cmp	r0, r2
    3ecc:	bfd4      	ite	le
    3ece:	4604      	movle	r4, r0
    3ed0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3ed2:	f7ff fe93 	bl	3bfc <z_nrf_rtc_timer_read>
    3ed6:	4b10      	ldr	r3, [pc, #64]	; (3f18 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    3ed8:	490e      	ldr	r1, [pc, #56]	; (3f14 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3eda:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ede:	1a80      	subs	r0, r0, r2
		cyc = 0;
    3ee0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3ee4:	bf28      	it	cs
    3ee6:	2400      	movcs	r4, #0
	cyc += unannounced;
    3ee8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    3eea:	428c      	cmp	r4, r1
    3eec:	bf28      	it	cs
    3eee:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    3ef0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3ef2:	490a      	ldr	r1, [pc, #40]	; (3f1c <sys_clock_set_timeout+0x60>)
    3ef4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3ef6:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3efa:	9001      	str	r0, [sp, #4]
    3efc:	f143 0300 	adc.w	r3, r3, #0
    3f00:	f7ff fe9e 	bl	3c40 <compare_set>
}
    3f04:	b002      	add	sp, #8
    3f06:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    3f08:	4c02      	ldr	r4, [pc, #8]	; (3f14 <sys_clock_set_timeout+0x58>)
    3f0a:	e7e2      	b.n	3ed2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    3f0c:	2401      	movs	r4, #1
    3f0e:	e7e0      	b.n	3ed2 <sys_clock_set_timeout+0x16>
    3f10:	007ffffe 	.word	0x007ffffe
    3f14:	007fffff 	.word	0x007fffff
    3f18:	200005d0 	.word	0x200005d0
    3f1c:	00003b59 	.word	0x00003b59

00003f20 <sys_clock_elapsed>:
{
    3f20:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3f22:	f7ff fe6b 	bl	3bfc <z_nrf_rtc_timer_read>
    3f26:	4b02      	ldr	r3, [pc, #8]	; (3f30 <sys_clock_elapsed+0x10>)
    3f28:	681b      	ldr	r3, [r3, #0]
}
    3f2a:	1ac0      	subs	r0, r0, r3
    3f2c:	bd08      	pop	{r3, pc}
    3f2e:	bf00      	nop
    3f30:	200005d0 	.word	0x200005d0

00003f34 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    3f36:	f7fd fd81 	bl	1a3c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3f3a:	4b07      	ldr	r3, [pc, #28]	; (3f58 <k_sys_fatal_error_handler+0x24>)
    3f3c:	9305      	str	r3, [sp, #20]
    3f3e:	2302      	movs	r3, #2
    3f40:	9304      	str	r3, [sp, #16]
    3f42:	4806      	ldr	r0, [pc, #24]	; (3f5c <k_sys_fatal_error_handler+0x28>)
    3f44:	2300      	movs	r3, #0
    3f46:	aa04      	add	r2, sp, #16
    3f48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f4c:	f7fd fe56 	bl	1bfc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    3f50:	2000      	movs	r0, #0
    3f52:	f7ff f93f 	bl	31d4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3f56:	bf00      	nop
    3f58:	00007a86 	.word	0x00007a86
    3f5c:	000070bc 	.word	0x000070bc

00003f60 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3f60:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    3f64:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3f68:	2a06      	cmp	r2, #6
    3f6a:	d109      	bne.n	3f80 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3f6c:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    3f70:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3f74:	3b03      	subs	r3, #3
    3f76:	2b04      	cmp	r3, #4
    3f78:	d802      	bhi.n	3f80 <nrf52_errata_16+0x20>
    3f7a:	4a02      	ldr	r2, [pc, #8]	; (3f84 <nrf52_errata_16+0x24>)
    3f7c:	5cd0      	ldrb	r0, [r2, r3]
    3f7e:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
    3f80:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
    3f82:	4770      	bx	lr
    3f84:	00007ab2 	.word	0x00007ab2

00003f88 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3f88:	4a02      	ldr	r2, [pc, #8]	; (3f94 <nvmc_wait+0xc>)
    3f8a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d0fb      	beq.n	3f8a <nvmc_wait+0x2>
}
    3f92:	4770      	bx	lr
    3f94:	4001e000 	.word	0x4001e000

00003f98 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    3f98:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    3f9a:	f002 fdf9 	bl	6b90 <nrf52_errata_108>
    3f9e:	b140      	cbz	r0, 3fb2 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    3fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3fa4:	4a8e      	ldr	r2, [pc, #568]	; (41e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e0>)
    3fa6:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    3faa:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3fae:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    3fb2:	f7ff ffd5 	bl	3f60 <nrf52_errata_16>
    3fb6:	b110      	cbz	r0, 3fbe <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    3fb8:	4b8a      	ldr	r3, [pc, #552]	; (41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>)
    3fba:	4a8b      	ldr	r2, [pc, #556]	; (41e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e8>)
    3fbc:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    3fbe:	f002 fde7 	bl	6b90 <nrf52_errata_108>
    3fc2:	b148      	cbz	r0, 3fd8 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3fc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3fcc:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    3fd0:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3fd4:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    3fd8:	f7ff ffc2 	bl	3f60 <nrf52_errata_16>
    3fdc:	b130      	cbz	r0, 3fec <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3fde:	4a83      	ldr	r2, [pc, #524]	; (41ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ec>)
    3fe0:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    3fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3fe8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3fec:	f002 fdd0 	bl	6b90 <nrf52_errata_108>
    3ff0:	b140      	cbz	r0, 4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>
            NRF_CLOCK->EVENTS_DONE = 0;
    3ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ff6:	2200      	movs	r2, #0
    3ff8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3ffc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4000:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    4004:	f7ff ffac 	bl	3f60 <nrf52_errata_16>
    4008:	b120      	cbz	r0, 4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    400a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    400e:	2203      	movs	r2, #3
    4010:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    4014:	f7ff ffa4 	bl	3f60 <nrf52_errata_16>
    4018:	b160      	cbz	r0, 4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    401a:	4b75      	ldr	r3, [pc, #468]	; (41f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f0>)
    401c:	2205      	movs	r2, #5
    401e:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    4022:	2201      	movs	r2, #1
    4024:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    4028:	2200      	movs	r2, #0
    402a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    402e:	223f      	movs	r2, #63	; 0x3f
    4030:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4034:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4038:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    403c:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    403e:	bf09      	itett	eq
    4040:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    4044:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4048:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    404c:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    4050:	bf08      	it	eq
    4052:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4056:	2a06      	cmp	r2, #6
    4058:	d14d      	bne.n	40f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf6>
            {
                switch(var2)
    405a:	3b03      	subs	r3, #3
    405c:	2b04      	cmp	r3, #4
    405e:	d803      	bhi.n	4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4060:	4a64      	ldr	r2, [pc, #400]	; (41f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f4>)
    4062:	5cd3      	ldrb	r3, [r2, r3]
    4064:	2b00      	cmp	r3, #0
    4066:	d046      	beq.n	40f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf6>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    406c:	4b62      	ldr	r3, [pc, #392]	; (41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>)
    406e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4072:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4076:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    407a:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    407e:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4082:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4086:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    408a:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    408e:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4092:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4096:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    409a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    409e:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    40a2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    40a6:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    40aa:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    40ae:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    40b2:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    40b6:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    40ba:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    40be:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    40c2:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    40c6:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    40ca:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    40ce:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    40d2:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    40d6:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    40da:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    40de:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    40e2:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    40e6:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    40ea:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    40ee:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    40f2:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    40f6:	f002 fd4b 	bl	6b90 <nrf52_errata_108>
    40fa:	b148      	cbz	r0, 4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    40fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4104:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4108:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    410c:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4110:	f002 fd3e 	bl	6b90 <nrf52_errata_108>
    4114:	b148      	cbz	r0, 412a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    411a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    411e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4120:	bf44      	itt	mi
    4122:	f06f 0201 	mvnmi.w	r2, #1
    4126:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    412a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    412e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4132:	2a06      	cmp	r2, #6
    4134:	d126      	bne.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
            {
                switch(var2)
    4136:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    413a:	3b03      	subs	r3, #3
    413c:	2b04      	cmp	r3, #4
    413e:	d802      	bhi.n	4146 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x146>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    4140:	4a2e      	ldr	r2, [pc, #184]	; (41fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fc>)
    4142:	5cd3      	ldrb	r3, [r2, r3]
    4144:	b163      	cbz	r3, 4160 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x160>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    4146:	4a2e      	ldr	r2, [pc, #184]	; (4200 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x200>)
    4148:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    414c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4150:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4158:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    415c:	2b06      	cmp	r3, #6
    415e:	d111      	bne.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4164:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4168:	3b03      	subs	r3, #3
    416a:	2b04      	cmp	r3, #4
    416c:	d802      	bhi.n	4174 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x174>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    416e:	4a25      	ldr	r2, [pc, #148]	; (4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>)
    4170:	5cd3      	ldrb	r3, [r2, r3]
    4172:	b13b      	cbz	r3, 4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4174:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4178:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    417c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4180:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4184:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4188:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    418c:	2a00      	cmp	r2, #0
    418e:	db03      	blt.n	4198 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x198>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4190:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4194:	2b00      	cmp	r3, #0
    4196:	da22      	bge.n	41de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1de>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4198:	491b      	ldr	r1, [pc, #108]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    419a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    419c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41a0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41a4:	2415      	movs	r4, #21
    nvmc_wait();
    41a6:	f7ff feef 	bl	3f88 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    41aa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    41ae:	f7ff feeb 	bl	3f88 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    41b2:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    41b6:	f7ff fee7 	bl	3f88 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    41ba:	2300      	movs	r3, #0
    41bc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    41c0:	f7ff fee2 	bl	3f88 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    41c4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    41c8:	4908      	ldr	r1, [pc, #32]	; (41ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ec>)
    41ca:	4b10      	ldr	r3, [pc, #64]	; (420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>)
    41cc:	68ca      	ldr	r2, [r1, #12]
    41ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    41d2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    41d4:	60cb      	str	r3, [r1, #12]
    41d6:	f3bf 8f4f 	dsb	sy
    __NOP();
    41da:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    41dc:	e7fd      	b.n	41da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1da>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    41de:	bd10      	pop	{r4, pc}
    41e0:	40013000 	.word	0x40013000
    41e4:	4007c000 	.word	0x4007c000
    41e8:	baadf00d 	.word	0xbaadf00d
    41ec:	e000ed00 	.word	0xe000ed00
    41f0:	40005000 	.word	0x40005000
    41f4:	00007aad 	.word	0x00007aad
    41f8:	4000c000 	.word	0x4000c000
    41fc:	00007aa8 	.word	0x00007aa8
    4200:	40001000 	.word	0x40001000
    4204:	00007aa3 	.word	0x00007aa3
    4208:	4001e000 	.word	0x4001e000
    420c:	05fa0004 	.word	0x05fa0004

00004210 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4210:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4212:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4214:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4216:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    421a:	fab2 f382 	clz	r3, r2
    421e:	f1c3 031f 	rsb	r3, r3, #31
    4222:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4224:	fa05 f403 	lsl.w	r4, r5, r3
    4228:	ea22 0404 	bic.w	r4, r2, r4
    422c:	e850 6f00 	ldrex	r6, [r0]
    4230:	4296      	cmp	r6, r2
    4232:	d104      	bne.n	423e <nrfx_flag32_alloc+0x2e>
    4234:	e840 4c00 	strex	ip, r4, [r0]
    4238:	f1bc 0f00 	cmp.w	ip, #0
    423c:	d1f6      	bne.n	422c <nrfx_flag32_alloc+0x1c>
    423e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4242:	d1e7      	bne.n	4214 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4244:	4801      	ldr	r0, [pc, #4]	; (424c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4246:	700b      	strb	r3, [r1, #0]
}
    4248:	bd70      	pop	{r4, r5, r6, pc}
    424a:	bf00      	nop
    424c:	0bad0000 	.word	0x0bad0000

00004250 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4250:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4252:	6803      	ldr	r3, [r0, #0]
    4254:	40cb      	lsrs	r3, r1
    4256:	07db      	lsls	r3, r3, #31
    4258:	d414      	bmi.n	4284 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    425a:	2301      	movs	r3, #1
    425c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    425e:	6802      	ldr	r2, [r0, #0]
    4260:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4264:	ea43 0102 	orr.w	r1, r3, r2
    4268:	e850 4f00 	ldrex	r4, [r0]
    426c:	4294      	cmp	r4, r2
    426e:	d104      	bne.n	427a <nrfx_flag32_free+0x2a>
    4270:	e840 1c00 	strex	ip, r1, [r0]
    4274:	f1bc 0f00 	cmp.w	ip, #0
    4278:	d1f6      	bne.n	4268 <nrfx_flag32_free+0x18>
    427a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    427e:	d1ee      	bne.n	425e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4280:	4801      	ldr	r0, [pc, #4]	; (4288 <nrfx_flag32_free+0x38>)
}
    4282:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4284:	4801      	ldr	r0, [pc, #4]	; (428c <nrfx_flag32_free+0x3c>)
    4286:	e7fc      	b.n	4282 <nrfx_flag32_free+0x32>
    4288:	0bad0000 	.word	0x0bad0000
    428c:	0bad0004 	.word	0x0bad0004

00004290 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4292:	4604      	mov	r4, r0
    4294:	b118      	cbz	r0, 429e <clock_stop+0xe>
    4296:	2801      	cmp	r0, #1
    4298:	d022      	beq.n	42e0 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    429a:	b003      	add	sp, #12
    429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    429e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42a2:	2202      	movs	r2, #2
    42a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42a8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    42ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42b0:	2201      	movs	r2, #1
    42b2:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    42b4:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    42b6:	2301      	movs	r3, #1
    42b8:	f88d 3007 	strb.w	r3, [sp, #7]
    42bc:	f242 7510 	movw	r5, #10000	; 0x2710
    42c0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    42c4:	b1cc      	cbz	r4, 42fa <clock_stop+0x6a>
    42c6:	2c01      	cmp	r4, #1
    42c8:	d1e7      	bne.n	429a <clock_stop+0xa>
            if (p_clk_src != NULL)
    42ca:	b3c7      	cbz	r7, 433e <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    42cc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    42d0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    42d4:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    42d6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    42da:	03da      	lsls	r2, r3, #15
    42dc:	d521      	bpl.n	4322 <clock_stop+0x92>
    42de:	e016      	b.n	430e <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    42e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42e4:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    42e6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    42ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42f2:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    42f4:	f10d 0707 	add.w	r7, sp, #7
    42f8:	e7dd      	b.n	42b6 <clock_stop+0x26>
            if (p_clk_src != NULL)
    42fa:	b1b7      	cbz	r7, 432a <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    42fc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4300:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4304:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4306:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    430a:	03d8      	lsls	r0, r3, #15
    430c:	d5c5      	bpl.n	429a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    430e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4312:	2801      	cmp	r0, #1
    4314:	d103      	bne.n	431e <clock_stop+0x8e>
    4316:	f002 fc4a 	bl	6bae <nrfx_busy_wait>
    431a:	3d01      	subs	r5, #1
    431c:	d1d2      	bne.n	42c4 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    431e:	2c01      	cmp	r4, #1
    4320:	d1bb      	bne.n	429a <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    4322:	4b0c      	ldr	r3, [pc, #48]	; (4354 <clock_stop+0xc4>)
    4324:	2200      	movs	r2, #0
    4326:	715a      	strb	r2, [r3, #5]
    4328:	e7b7      	b.n	429a <clock_stop+0xa>
    432a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    432e:	03d9      	lsls	r1, r3, #15
    4330:	d5b3      	bpl.n	429a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4332:	2001      	movs	r0, #1
    4334:	f002 fc3b 	bl	6bae <nrfx_busy_wait>
    4338:	3d01      	subs	r5, #1
    433a:	d1f6      	bne.n	432a <clock_stop+0x9a>
    433c:	e7ad      	b.n	429a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    433e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4342:	03db      	lsls	r3, r3, #15
    4344:	d5ed      	bpl.n	4322 <clock_stop+0x92>
    4346:	2001      	movs	r0, #1
    4348:	f002 fc31 	bl	6bae <nrfx_busy_wait>
    434c:	3d01      	subs	r5, #1
    434e:	d1f6      	bne.n	433e <clock_stop+0xae>
    4350:	e7e7      	b.n	4322 <clock_stop+0x92>
    4352:	bf00      	nop
    4354:	20000808 	.word	0x20000808

00004358 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4358:	4b04      	ldr	r3, [pc, #16]	; (436c <nrfx_clock_init+0x14>)
    435a:	791a      	ldrb	r2, [r3, #4]
    435c:	b922      	cbnz	r2, 4368 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    435e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4360:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4362:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4364:	4802      	ldr	r0, [pc, #8]	; (4370 <nrfx_clock_init+0x18>)
    4366:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4368:	4802      	ldr	r0, [pc, #8]	; (4374 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    436a:	4770      	bx	lr
    436c:	20000808 	.word	0x20000808
    4370:	0bad0000 	.word	0x0bad0000
    4374:	0bad000c 	.word	0x0bad000c

00004378 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    4378:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    437a:	b110      	cbz	r0, 4382 <nrfx_clock_start+0xa>
    437c:	2801      	cmp	r0, #1
    437e:	d043      	beq.n	4408 <nrfx_clock_start+0x90>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    4380:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4386:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    438a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    438e:	03c8      	lsls	r0, r1, #15
    4390:	d40b      	bmi.n	43aa <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4392:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4396:	07d9      	lsls	r1, r3, #31
    4398:	d50f      	bpl.n	43ba <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    439a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    439e:	079b      	lsls	r3, r3, #30
    43a0:	d408      	bmi.n	43b4 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    43a2:	2302      	movs	r3, #2
    43a4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    43a8:	e7ea      	b.n	4380 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    43aa:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    43ae:	2b01      	cmp	r3, #1
    43b0:	d004      	beq.n	43bc <nrfx_clock_start+0x44>
    43b2:	b113      	cbz	r3, 43ba <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    43b4:	2000      	movs	r0, #0
    43b6:	f7ff ff6b 	bl	4290 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    43ba:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    43bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    43c0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43c4:	2300      	movs	r3, #0
    43c6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    43ca:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    43ce:	2302      	movs	r3, #2
    43d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    43d4:	4a12      	ldr	r2, [pc, #72]	; (4420 <nrfx_clock_start+0xa8>)
    43d6:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    43da:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    43de:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    43e2:	4b10      	ldr	r3, [pc, #64]	; (4424 <nrfx_clock_start+0xac>)
    43e4:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    43e6:	f044 0101 	orr.w	r1, r4, #1
    43ea:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    43ec:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    43ee:	6859      	ldr	r1, [r3, #4]
    43f0:	1b49      	subs	r1, r1, r5
    43f2:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    43f6:	d3fa      	bcc.n	43ee <nrfx_clock_start+0x76>
    DWT->CTRL = dwt_ctrl;
    43f8:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    43fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    43fe:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    4402:	2201      	movs	r2, #1
    4404:	609a      	str	r2, [r3, #8]
}
    4406:	e7bb      	b.n	4380 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    440c:	2200      	movs	r2, #0
    440e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4412:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4416:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    441a:	6018      	str	r0, [r3, #0]
}
    441c:	e7b0      	b.n	4380 <nrfx_clock_start+0x8>
    441e:	bf00      	nop
    4420:	e000ed00 	.word	0xe000ed00
    4424:	e0001000 	.word	0xe0001000

00004428 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4428:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    442a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    442e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4432:	b16a      	cbz	r2, 4450 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4434:	2200      	movs	r2, #0
    4436:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    443a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    443e:	2201      	movs	r2, #1
    4440:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4444:	4b11      	ldr	r3, [pc, #68]	; (448c <nrfx_power_clock_irq_handler+0x64>)
    4446:	7958      	ldrb	r0, [r3, #5]
    4448:	b910      	cbnz	r0, 4450 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    444a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    444c:	681b      	ldr	r3, [r3, #0]
    444e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4454:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4458:	b172      	cbz	r2, 4478 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    445a:	2200      	movs	r2, #0
    445c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4460:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4464:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4468:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    446c:	0792      	lsls	r2, r2, #30
    446e:	d104      	bne.n	447a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4470:	2201      	movs	r2, #1
    4472:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4476:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4478:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    447a:	2202      	movs	r2, #2
    447c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4480:	4b02      	ldr	r3, [pc, #8]	; (448c <nrfx_power_clock_irq_handler+0x64>)
}
    4482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4486:	681b      	ldr	r3, [r3, #0]
    4488:	2001      	movs	r0, #1
    448a:	4718      	bx	r3
    448c:	20000808 	.word	0x20000808

00004490 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4490:	4b03      	ldr	r3, [pc, #12]	; (44a0 <pin_in_use_by_te+0x10>)
    4492:	3008      	adds	r0, #8
    4494:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4498:	f3c0 1040 	ubfx	r0, r0, #5, #1
    449c:	4770      	bx	lr
    449e:	bf00      	nop
    44a0:	2000002c 	.word	0x2000002c

000044a4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    44a4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44a6:	f100 0308 	add.w	r3, r0, #8
    44aa:	4c0c      	ldr	r4, [pc, #48]	; (44dc <call_handler+0x38>)
    44ac:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    44b0:	05da      	lsls	r2, r3, #23
{
    44b2:	4605      	mov	r5, r0
    44b4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44b6:	d507      	bpl.n	44c8 <call_handler+0x24>
    44b8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    44bc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    44c0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    44c4:	6852      	ldr	r2, [r2, #4]
    44c6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    44c8:	68a3      	ldr	r3, [r4, #8]
    44ca:	b12b      	cbz	r3, 44d8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44cc:	68e2      	ldr	r2, [r4, #12]
    44ce:	4631      	mov	r1, r6
    44d0:	4628      	mov	r0, r5
    }
}
    44d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    44d6:	4718      	bx	r3
}
    44d8:	bd70      	pop	{r4, r5, r6, pc}
    44da:	bf00      	nop
    44dc:	2000002c 	.word	0x2000002c

000044e0 <release_handler>:
{
    44e0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    44e2:	4a12      	ldr	r2, [pc, #72]	; (452c <release_handler+0x4c>)
    44e4:	3008      	adds	r0, #8
    44e6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    44ea:	05d9      	lsls	r1, r3, #23
    44ec:	d51b      	bpl.n	4526 <release_handler+0x46>
    44ee:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    44f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    44f6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    44fa:	f102 040e 	add.w	r4, r2, #14
    44fe:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4500:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4504:	f413 7f80 	tst.w	r3, #256	; 0x100
    4508:	d003      	beq.n	4512 <release_handler+0x32>
    450a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    450e:	4299      	cmp	r1, r3
    4510:	d009      	beq.n	4526 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4512:	3001      	adds	r0, #1
    4514:	2820      	cmp	r0, #32
    4516:	d1f3      	bne.n	4500 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4518:	2300      	movs	r3, #0
    451a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    451e:	4804      	ldr	r0, [pc, #16]	; (4530 <release_handler+0x50>)
}
    4520:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4522:	f7ff be95 	b.w	4250 <nrfx_flag32_free>
}
    4526:	bc10      	pop	{r4}
    4528:	4770      	bx	lr
    452a:	bf00      	nop
    452c:	2000002c 	.word	0x2000002c
    4530:	20000080 	.word	0x20000080

00004534 <pin_handler_trigger_uninit>:
{
    4534:	b538      	push	{r3, r4, r5, lr}
    4536:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4538:	f7ff ffaa 	bl	4490 <pin_in_use_by_te>
    453c:	4c09      	ldr	r4, [pc, #36]	; (4564 <pin_handler_trigger_uninit+0x30>)
    453e:	f102 0508 	add.w	r5, r2, #8
    4542:	b140      	cbz	r0, 4556 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4544:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4548:	4907      	ldr	r1, [pc, #28]	; (4568 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    454a:	0b5b      	lsrs	r3, r3, #13
    454c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4550:	2000      	movs	r0, #0
    4552:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4556:	4610      	mov	r0, r2
    4558:	f7ff ffc2 	bl	44e0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    455c:	2300      	movs	r3, #0
    455e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4562:	bd38      	pop	{r3, r4, r5, pc}
    4564:	2000002c 	.word	0x2000002c
    4568:	40006000 	.word	0x40006000

0000456c <nrfx_gpiote_input_configure>:
{
    456c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4570:	4604      	mov	r4, r0
    4572:	461d      	mov	r5, r3
    if (p_input_config)
    4574:	b309      	cbz	r1, 45ba <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4576:	4f4f      	ldr	r7, [pc, #316]	; (46b4 <nrfx_gpiote_input_configure+0x148>)
    4578:	f100 0808 	add.w	r8, r0, #8
    457c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4580:	07b3      	lsls	r3, r6, #30
    4582:	d506      	bpl.n	4592 <nrfx_gpiote_input_configure+0x26>
    4584:	f7ff ff84 	bl	4490 <pin_in_use_by_te>
    4588:	b118      	cbz	r0, 4592 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    458a:	484b      	ldr	r0, [pc, #300]	; (46b8 <nrfx_gpiote_input_configure+0x14c>)
}
    458c:	b002      	add	sp, #8
    458e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    4592:	f004 031f 	and.w	r3, r4, #31
    4596:	009b      	lsls	r3, r3, #2
    4598:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    459c:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    459e:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    45a2:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    45a6:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    45aa:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    45ae:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    45b2:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    45b6:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    45ba:	b19a      	cbz	r2, 45e4 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45bc:	4b3d      	ldr	r3, [pc, #244]	; (46b4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    45be:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    45c0:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45c2:	f104 0608 	add.w	r6, r4, #8
    45c6:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    45ca:	f011 0f02 	tst.w	r1, #2
    45ce:	d00d      	beq.n	45ec <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    45d0:	2800      	cmp	r0, #0
    45d2:	d1da      	bne.n	458a <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    45d4:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    45d8:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    45dc:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    45e0:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    45e4:	2d00      	cmp	r5, #0
    45e6:	d13b      	bne.n	4660 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    45e8:	4834      	ldr	r0, [pc, #208]	; (46bc <nrfx_gpiote_input_configure+0x150>)
    45ea:	e7cf      	b.n	458c <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    45ec:	f021 0120 	bic.w	r1, r1, #32
    45f0:	04c9      	lsls	r1, r1, #19
    45f2:	0cc9      	lsrs	r1, r1, #19
    45f4:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    45f8:	2800      	cmp	r0, #0
    45fa:	d0eb      	beq.n	45d4 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    45fc:	2f03      	cmp	r7, #3
    45fe:	d8c4      	bhi.n	458a <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4600:	6852      	ldr	r2, [r2, #4]
    4602:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4606:	b92f      	cbnz	r7, 4614 <nrfx_gpiote_input_configure+0xa8>
    4608:	4a2d      	ldr	r2, [pc, #180]	; (46c0 <nrfx_gpiote_input_configure+0x154>)
    460a:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    460e:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4612:	e7df      	b.n	45d4 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4614:	ea4f 028c 	mov.w	r2, ip, lsl #2
    4618:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    461c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4620:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4624:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4628:	f020 0003 	bic.w	r0, r0, #3
    462c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4630:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4634:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    4638:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    463c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4640:	0220      	lsls	r0, r4, #8
    4642:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4646:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    464a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    464e:	ea40 000e 	orr.w	r0, r0, lr
    4652:	f041 0120 	orr.w	r1, r1, #32
    4656:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    465a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    465e:	e7b9      	b.n	45d4 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4660:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4664:	4620      	mov	r0, r4
    4666:	f7ff ff3b 	bl	44e0 <release_handler>
    if (!handler)
    466a:	2e00      	cmp	r6, #0
    466c:	d0bc      	beq.n	45e8 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    466e:	4d11      	ldr	r5, [pc, #68]	; (46b4 <nrfx_gpiote_input_configure+0x148>)
    4670:	e9d5 2300 	ldrd	r2, r3, [r5]
    4674:	4296      	cmp	r6, r2
    4676:	d101      	bne.n	467c <nrfx_gpiote_input_configure+0x110>
    4678:	429f      	cmp	r7, r3
    467a:	d019      	beq.n	46b0 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    467c:	4811      	ldr	r0, [pc, #68]	; (46c4 <nrfx_gpiote_input_configure+0x158>)
    467e:	f10d 0107 	add.w	r1, sp, #7
    4682:	f7ff fdc5 	bl	4210 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4686:	4b0d      	ldr	r3, [pc, #52]	; (46bc <nrfx_gpiote_input_configure+0x150>)
    4688:	4298      	cmp	r0, r3
    468a:	f47f af7f 	bne.w	458c <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    468e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    4692:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4696:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    469a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    469c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    469e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    46a2:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    46a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    46aa:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    46ae:	e79b      	b.n	45e8 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    46b0:	2200      	movs	r2, #0
    46b2:	e7ee      	b.n	4692 <nrfx_gpiote_input_configure+0x126>
    46b4:	2000002c 	.word	0x2000002c
    46b8:	0bad0004 	.word	0x0bad0004
    46bc:	0bad0000 	.word	0x0bad0000
    46c0:	40006000 	.word	0x40006000
    46c4:	20000080 	.word	0x20000080

000046c8 <nrfx_gpiote_output_configure>:
{
    46c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46ca:	4604      	mov	r4, r0
    if (p_config)
    46cc:	b389      	cbz	r1, 4732 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    46ce:	4e3a      	ldr	r6, [pc, #232]	; (47b8 <nrfx_gpiote_output_configure+0xf0>)
    46d0:	f100 0708 	add.w	r7, r0, #8
    46d4:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    46d8:	07ab      	lsls	r3, r5, #30
    46da:	d404      	bmi.n	46e6 <nrfx_gpiote_output_configure+0x1e>
    46dc:	f7ff fed8 	bl	4490 <pin_in_use_by_te>
    46e0:	b108      	cbz	r0, 46e6 <nrfx_gpiote_output_configure+0x1e>
{
    46e2:	4836      	ldr	r0, [pc, #216]	; (47bc <nrfx_gpiote_output_configure+0xf4>)
}
    46e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    46e6:	f015 0f1c 	tst.w	r5, #28
    46ea:	784b      	ldrb	r3, [r1, #1]
    46ec:	d124      	bne.n	4738 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    46ee:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    46f2:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    46f6:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    46fa:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    46fc:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4700:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4704:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4706:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    470a:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    470e:	f02c 0c07 	bic.w	ip, ip, #7
    4712:	ea43 030c 	orr.w	r3, r3, ip
    4716:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    471a:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    471e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4722:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4726:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    472a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    472e:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4732:	b922      	cbnz	r2, 473e <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    4734:	4822      	ldr	r0, [pc, #136]	; (47c0 <nrfx_gpiote_output_configure+0xf8>)
    4736:	e7d5      	b.n	46e4 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4738:	2b01      	cmp	r3, #1
    473a:	d1d8      	bne.n	46ee <nrfx_gpiote_output_configure+0x26>
    473c:	e7d1      	b.n	46e2 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    473e:	4e1e      	ldr	r6, [pc, #120]	; (47b8 <nrfx_gpiote_output_configure+0xf0>)
    4740:	f104 0708 	add.w	r7, r4, #8
    4744:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4748:	0783      	lsls	r3, r0, #30
    474a:	d5ca      	bpl.n	46e2 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    474c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4750:	4661      	mov	r1, ip
    4752:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4754:	f020 0020 	bic.w	r0, r0, #32
    4758:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    475c:	04c0      	lsls	r0, r0, #19
    475e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4762:	0cc0      	lsrs	r0, r0, #19
    4764:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4768:	2300      	movs	r3, #0
    476a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    476e:	7855      	ldrb	r5, [r2, #1]
    4770:	2d00      	cmp	r5, #0
    4772:	d0df      	beq.n	4734 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4774:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4778:	7892      	ldrb	r2, [r2, #2]
    477a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    477e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4782:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4786:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    478a:	0223      	lsls	r3, r4, #8
    478c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4790:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4792:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4796:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    479a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    479c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    479e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    47a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    47a6:	4313      	orrs	r3, r2
    47a8:	f040 0020 	orr.w	r0, r0, #32
    47ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    47b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    47b4:	e7be      	b.n	4734 <nrfx_gpiote_output_configure+0x6c>
    47b6:	bf00      	nop
    47b8:	2000002c 	.word	0x2000002c
    47bc:	0bad0004 	.word	0x0bad0004
    47c0:	0bad0000 	.word	0x0bad0000

000047c4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    47c4:	4b01      	ldr	r3, [pc, #4]	; (47cc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    47c6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    47ca:	4770      	bx	lr
    47cc:	2000002c 	.word	0x2000002c

000047d0 <nrfx_gpiote_channel_get>:
{
    47d0:	b508      	push	{r3, lr}
    47d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    47d4:	f7ff fe5c 	bl	4490 <pin_in_use_by_te>
    47d8:	b138      	cbz	r0, 47ea <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47da:	4b05      	ldr	r3, [pc, #20]	; (47f0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    47dc:	4805      	ldr	r0, [pc, #20]	; (47f4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47de:	3208      	adds	r2, #8
    47e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    47e4:	0b5b      	lsrs	r3, r3, #13
    47e6:	700b      	strb	r3, [r1, #0]
}
    47e8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    47ea:	4803      	ldr	r0, [pc, #12]	; (47f8 <nrfx_gpiote_channel_get+0x28>)
    47ec:	e7fc      	b.n	47e8 <nrfx_gpiote_channel_get+0x18>
    47ee:	bf00      	nop
    47f0:	2000002c 	.word	0x2000002c
    47f4:	0bad0000 	.word	0x0bad0000
    47f8:	0bad0004 	.word	0x0bad0004

000047fc <nrfx_gpiote_init>:
{
    47fc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    47fe:	4c0f      	ldr	r4, [pc, #60]	; (483c <nrfx_gpiote_init+0x40>)
    4800:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4804:	b9bd      	cbnz	r5, 4836 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4806:	2240      	movs	r2, #64	; 0x40
    4808:	4629      	mov	r1, r5
    480a:	f104 0010 	add.w	r0, r4, #16
    480e:	f001 ffa9 	bl	6764 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4812:	2006      	movs	r0, #6
    4814:	f7fd ff22 	bl	265c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4818:	4b09      	ldr	r3, [pc, #36]	; (4840 <nrfx_gpiote_init+0x44>)
    return err_code;
    481a:	480a      	ldr	r0, [pc, #40]	; (4844 <nrfx_gpiote_init+0x48>)
    481c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4820:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4824:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4828:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    482c:	2301      	movs	r3, #1
    482e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4832:	6563      	str	r3, [r4, #84]	; 0x54
}
    4834:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4836:	4804      	ldr	r0, [pc, #16]	; (4848 <nrfx_gpiote_init+0x4c>)
    4838:	e7fc      	b.n	4834 <nrfx_gpiote_init+0x38>
    483a:	bf00      	nop
    483c:	2000002c 	.word	0x2000002c
    4840:	40006000 	.word	0x40006000
    4844:	0bad0000 	.word	0x0bad0000
    4848:	0bad0005 	.word	0x0bad0005

0000484c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    484c:	4b03      	ldr	r3, [pc, #12]	; (485c <nrfx_gpiote_is_init+0x10>)
    484e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4852:	3800      	subs	r0, #0
    4854:	bf18      	it	ne
    4856:	2001      	movne	r0, #1
    4858:	4770      	bx	lr
    485a:	bf00      	nop
    485c:	2000002c 	.word	0x2000002c

00004860 <nrfx_gpiote_channel_free>:
{
    4860:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4862:	4801      	ldr	r0, [pc, #4]	; (4868 <nrfx_gpiote_channel_free+0x8>)
    4864:	f7ff bcf4 	b.w	4250 <nrfx_flag32_free>
    4868:	2000007c 	.word	0x2000007c

0000486c <nrfx_gpiote_channel_alloc>:
{
    486c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    486e:	4801      	ldr	r0, [pc, #4]	; (4874 <nrfx_gpiote_channel_alloc+0x8>)
    4870:	f7ff bcce 	b.w	4210 <nrfx_flag32_alloc>
    4874:	2000007c 	.word	0x2000007c

00004878 <nrfx_gpiote_trigger_enable>:
{
    4878:	b510      	push	{r4, lr}
    487a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    487c:	f7ff fe08 	bl	4490 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4880:	f102 0408 	add.w	r4, r2, #8
    4884:	4b1c      	ldr	r3, [pc, #112]	; (48f8 <nrfx_gpiote_trigger_enable+0x80>)
    4886:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    488a:	b1e0      	cbz	r0, 48c6 <nrfx_gpiote_trigger_enable+0x4e>
    488c:	f013 0402 	ands.w	r4, r3, #2
    4890:	d119      	bne.n	48c6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4892:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4894:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4896:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    489a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    489e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    48a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    48a6:	6004      	str	r4, [r0, #0]
    48a8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    48aa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    48ae:	f040 0001 	orr.w	r0, r0, #1
    48b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    48b6:	b129      	cbz	r1, 48c4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    48b8:	2201      	movs	r2, #1
    48ba:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    48be:	4a0f      	ldr	r2, [pc, #60]	; (48fc <nrfx_gpiote_trigger_enable+0x84>)
    48c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    48c4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    48c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    48ca:	2b04      	cmp	r3, #4
    48cc:	d010      	beq.n	48f0 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    48ce:	2b05      	cmp	r3, #5
    48d0:	d010      	beq.n	48f4 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    48d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    48d6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    48da:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    48de:	40d9      	lsrs	r1, r3
    48e0:	f001 0101 	and.w	r1, r1, #1
    48e4:	3102      	adds	r1, #2
}
    48e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    48ea:	4610      	mov	r0, r2
    48ec:	f002 b970 	b.w	6bd0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    48f0:	2103      	movs	r1, #3
    48f2:	e7f8      	b.n	48e6 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    48f4:	2102      	movs	r1, #2
    48f6:	e7f6      	b.n	48e6 <nrfx_gpiote_trigger_enable+0x6e>
    48f8:	2000002c 	.word	0x2000002c
    48fc:	40006000 	.word	0x40006000

00004900 <nrfx_gpiote_trigger_disable>:
{
    4900:	b508      	push	{r3, lr}
    4902:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4904:	f7ff fdc4 	bl	4490 <pin_in_use_by_te>
    4908:	b1c0      	cbz	r0, 493c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    490a:	f102 0108 	add.w	r1, r2, #8
    490e:	4b0e      	ldr	r3, [pc, #56]	; (4948 <nrfx_gpiote_trigger_disable+0x48>)
    4910:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4914:	0799      	lsls	r1, r3, #30
    4916:	d411      	bmi.n	493c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4918:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    491a:	2201      	movs	r2, #1
    491c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    491e:	009b      	lsls	r3, r3, #2
    4920:	490a      	ldr	r1, [pc, #40]	; (494c <nrfx_gpiote_trigger_disable+0x4c>)
    4922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4926:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    492a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    492e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4932:	f022 0203 	bic.w	r2, r2, #3
    4936:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    493a:	bd08      	pop	{r3, pc}
    493c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4940:	2100      	movs	r1, #0
    4942:	4610      	mov	r0, r2
    4944:	f002 b944 	b.w	6bd0 <nrf_gpio_cfg_sense_set>
    4948:	2000002c 	.word	0x2000002c
    494c:	40006000 	.word	0x40006000

00004950 <nrfx_gpiote_pin_uninit>:
{
    4950:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4952:	4b0d      	ldr	r3, [pc, #52]	; (4988 <nrfx_gpiote_pin_uninit+0x38>)
    4954:	f100 0208 	add.w	r2, r0, #8
{
    4958:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    495a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    495e:	07db      	lsls	r3, r3, #31
    4960:	d50f      	bpl.n	4982 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    4962:	f7ff ffcd 	bl	4900 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4966:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    4968:	f004 041f 	and.w	r4, r4, #31
    496c:	f7ff fde2 	bl	4534 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4970:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4974:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4978:	2202      	movs	r2, #2
    497a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    497e:	4803      	ldr	r0, [pc, #12]	; (498c <nrfx_gpiote_pin_uninit+0x3c>)
}
    4980:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4982:	4803      	ldr	r0, [pc, #12]	; (4990 <nrfx_gpiote_pin_uninit+0x40>)
    4984:	e7fc      	b.n	4980 <nrfx_gpiote_pin_uninit+0x30>
    4986:	bf00      	nop
    4988:	2000002c 	.word	0x2000002c
    498c:	0bad0000 	.word	0x0bad0000
    4990:	0bad0004 	.word	0x0bad0004

00004994 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4998:	4b4f      	ldr	r3, [pc, #316]	; (4ad8 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    499a:	4850      	ldr	r0, [pc, #320]	; (4adc <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    499c:	4950      	ldr	r1, [pc, #320]	; (4ae0 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    499e:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    49a0:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    49a2:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49a4:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    49a6:	b136      	cbz	r6, 49b6 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    49a8:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    49ac:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    49ae:	bf1e      	ittt	ne
    49b0:	601c      	strne	r4, [r3, #0]
    49b2:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    49b4:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    49b6:	3304      	adds	r3, #4
    49b8:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    49ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    49be:	d1f1      	bne.n	49a4 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49c0:	4b46      	ldr	r3, [pc, #280]	; (4adc <nrfx_gpiote_irq_handler+0x148>)
    49c2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    49c6:	b1bb      	cbz	r3, 49f8 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    49c8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    49cc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    49d0:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    49d2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    49d6:	af01      	add	r7, sp, #4
    49d8:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    49dc:	9c01      	ldr	r4, [sp, #4]
    49de:	b98c      	cbnz	r4, 4a04 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    49e0:	4b3e      	ldr	r3, [pc, #248]	; (4adc <nrfx_gpiote_irq_handler+0x148>)
    49e2:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    49e6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    49ea:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    49ee:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    49f0:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    49f4:	2b00      	cmp	r3, #0
    49f6:	d1ee      	bne.n	49d6 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    49f8:	2401      	movs	r4, #1
    while (mask)
    49fa:	2d00      	cmp	r5, #0
    49fc:	d153      	bne.n	4aa6 <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    49fe:	b003      	add	sp, #12
    4a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    4a04:	fa94 f4a4 	rbit	r4, r4
    4a08:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4a0c:	4a35      	ldr	r2, [pc, #212]	; (4ae4 <nrfx_gpiote_irq_handler+0x150>)
    4a0e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4a12:	08e0      	lsrs	r0, r4, #3
    4a14:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    4a18:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    4a1a:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4a1e:	fa08 f202 	lsl.w	r2, r8, r2
    4a22:	ea23 0302 	bic.w	r3, r3, r2
    4a26:	543b      	strb	r3, [r7, r0]
    4a28:	00a3      	lsls	r3, r4, #2
    4a2a:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    4a2e:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a32:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    4a36:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4a38:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4a3a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4a3e:	d518      	bpl.n	4a72 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    4a40:	4659      	mov	r1, fp
    4a42:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a44:	fa5f fa82 	uxtb.w	sl, r2
    4a48:	f7ff fd2c 	bl	44a4 <call_handler>
    4a4c:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4a50:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4a54:	459a      	cmp	sl, r3
    4a56:	d107      	bne.n	4a68 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4a58:	2100      	movs	r1, #0
    4a5a:	4620      	mov	r0, r4
    4a5c:	f002 f8b8 	bl	6bd0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4a60:	4651      	mov	r1, sl
    4a62:	4620      	mov	r0, r4
    4a64:	f002 f8b4 	bl	6bd0 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4a68:	fa08 f404 	lsl.w	r4, r8, r4
    4a6c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    4a70:	e7b4      	b.n	49dc <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4a72:	2a02      	cmp	r2, #2
    4a74:	d10c      	bne.n	4a90 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a76:	2103      	movs	r1, #3
    4a78:	4620      	mov	r0, r4
    4a7a:	f002 f8a9 	bl	6bd0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4a7e:	f00a 0305 	and.w	r3, sl, #5
    4a82:	2b01      	cmp	r3, #1
    4a84:	d1f0      	bne.n	4a68 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    4a86:	4659      	mov	r1, fp
    4a88:	4620      	mov	r0, r4
    4a8a:	f7ff fd0b 	bl	44a4 <call_handler>
    4a8e:	e7eb      	b.n	4a68 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4a90:	2102      	movs	r1, #2
    4a92:	4620      	mov	r0, r4
    4a94:	f002 f89c 	bl	6bd0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4a98:	f1ba 0f03 	cmp.w	sl, #3
    4a9c:	d0f3      	beq.n	4a86 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4a9e:	2a03      	cmp	r2, #3
    4aa0:	d1e2      	bne.n	4a68 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4aa2:	458a      	cmp	sl, r1
    4aa4:	e7ee      	b.n	4a84 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    4aa6:	fa95 f3a5 	rbit	r3, r5
    4aaa:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4aae:	fa04 f203 	lsl.w	r2, r4, r3
    4ab2:	009b      	lsls	r3, r3, #2
    4ab4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4ab8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4abc:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4ac0:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4ac4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4ac8:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4acc:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4ad0:	f7ff fce8 	bl	44a4 <call_handler>
    4ad4:	e791      	b.n	49fa <nrfx_gpiote_irq_handler+0x66>
    4ad6:	bf00      	nop
    4ad8:	40006100 	.word	0x40006100
    4adc:	40006000 	.word	0x40006000
    4ae0:	40006120 	.word	0x40006120
    4ae4:	2000002c 	.word	0x2000002c

00004ae8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4ae8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4aea:	4801      	ldr	r0, [pc, #4]	; (4af0 <nrfx_ppi_channel_alloc+0x8>)
    4aec:	f7ff bb90 	b.w	4210 <nrfx_flag32_alloc>
    4af0:	20000088 	.word	0x20000088

00004af4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4af4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4af6:	4c11      	ldr	r4, [pc, #68]	; (4b3c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4af8:	4a11      	ldr	r2, [pc, #68]	; (4b40 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4afa:	4912      	ldr	r1, [pc, #72]	; (4b44 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4afc:	2303      	movs	r3, #3
    4afe:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4b00:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4b02:	4b11      	ldr	r3, [pc, #68]	; (4b48 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    4b04:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4b06:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4b0c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4b0e:	2300      	movs	r3, #0
    4b10:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4b12:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4b14:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4b16:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4b18:	4a0c      	ldr	r2, [pc, #48]	; (4b4c <_DoInit+0x58>)
    4b1a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4b1c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4b1e:	2210      	movs	r2, #16
    4b20:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4b22:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4b24:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4b26:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4b28:	f001 fdf7 	bl	671a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    4b2c:	4908      	ldr	r1, [pc, #32]	; (4b50 <_DoInit+0x5c>)
    4b2e:	4620      	mov	r0, r4
    4b30:	f001 fdf3 	bl	671a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    4b34:	2320      	movs	r3, #32
    4b36:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    4b38:	bd10      	pop	{r4, pc}
    4b3a:	bf00      	nop
    4b3c:	20000810 	.word	0x20000810
    4b40:	00007ad7 	.word	0x00007ad7
    4b44:	00007ae0 	.word	0x00007ae0
    4b48:	20000916 	.word	0x20000916
    4b4c:	20000906 	.word	0x20000906
    4b50:	00007ae4 	.word	0x00007ae4

00004b54 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    4b58:	4f21      	ldr	r7, [pc, #132]	; (4be0 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    4b5a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4b5e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4b60:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4b64:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    4b66:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4b68:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4b6a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4b6c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4b6e:	d831      	bhi.n	4bd4 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4b70:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4b74:	ebaa 0905 	sub.w	r9, sl, r5
    4b78:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    4b7c:	4294      	cmp	r4, r2
    4b7e:	d811      	bhi.n	4ba4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4b80:	2318      	movs	r3, #24
    4b82:	fb06 3303 	mla	r3, r6, r3, r3
    4b86:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    4b88:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4b8a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    4b8c:	4641      	mov	r1, r8
    4b8e:	4428      	add	r0, r5
    4b90:	f001 fddd 	bl	674e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    4b94:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    4b96:	2318      	movs	r3, #24
    4b98:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    4b9c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    4b9e:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    4ba4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    4ba6:	429c      	cmp	r4, r3
    4ba8:	d818      	bhi.n	4bdc <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4baa:	fb00 bb0b 	mla	fp, r0, fp, fp
    4bae:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4bb0:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4bb2:	f8db 0004 	ldr.w	r0, [fp, #4]
    4bb6:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4bb8:	4428      	add	r0, r5
    4bba:	f001 fdc8 	bl	674e <memcpy>
      if (NumBytes) {
    4bbe:	ebb4 040a 	subs.w	r4, r4, sl
    4bc2:	d0e8      	beq.n	4b96 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    4bc4:	f8db 0004 	ldr.w	r0, [fp, #4]
    4bc8:	4622      	mov	r2, r4
    4bca:	eb08 0109 	add.w	r1, r8, r9
    4bce:	f001 fdbe 	bl	674e <memcpy>
      return 1;
    4bd2:	e7e0      	b.n	4b96 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    4bd4:	3b01      	subs	r3, #1
    4bd6:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    4bd8:	42a3      	cmp	r3, r4
    4bda:	d2d1      	bcs.n	4b80 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    4bdc:	2000      	movs	r0, #0
    4bde:	e7df      	b.n	4ba0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    4be0:	20000810 	.word	0x20000810

00004be4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    4be4:	4b03      	ldr	r3, [pc, #12]	; (4bf4 <SEGGER_RTT_HasDataUp+0x10>)
    4be6:	2218      	movs	r2, #24
    4be8:	fb02 3300 	mla	r3, r2, r0, r3
    4bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    4bee:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4bf0:	1a80      	subs	r0, r0, r2
    4bf2:	4770      	bx	lr
    4bf4:	20000810 	.word	0x20000810

00004bf8 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    4bf8:	4803      	ldr	r0, [pc, #12]	; (4c08 <zephyr_rtt_mutex_lock+0x10>)
    4bfa:	f04f 32ff 	mov.w	r2, #4294967295
    4bfe:	f04f 33ff 	mov.w	r3, #4294967295
    4c02:	f000 ba4f 	b.w	50a4 <z_impl_k_mutex_lock>
    4c06:	bf00      	nop
    4c08:	200000d8 	.word	0x200000d8

00004c0c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    4c0c:	4801      	ldr	r0, [pc, #4]	; (4c14 <zephyr_rtt_mutex_unlock+0x8>)
    4c0e:	f000 bac3 	b.w	5198 <z_impl_k_mutex_unlock>
    4c12:	bf00      	nop
    4c14:	200000d8 	.word	0x200000d8

00004c18 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c1c:	b086      	sub	sp, #24
    4c1e:	4605      	mov	r5, r0
    4c20:	af00      	add	r7, sp, #0
    4c22:	460e      	mov	r6, r1
	__asm__ volatile(
    4c24:	f04f 0320 	mov.w	r3, #32
    4c28:	f3ef 8811 	mrs	r8, BASEPRI
    4c2c:	f383 8812 	msr	BASEPRI_MAX, r3
    4c30:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4c34:	f000 fe10 	bl	5858 <z_impl_z_current_get>
    4c38:	2d04      	cmp	r5, #4
    4c3a:	bf96      	itet	ls
    4c3c:	4b2c      	ldrls	r3, [pc, #176]	; (4cf0 <z_fatal_error+0xd8>)
    4c3e:	4b2d      	ldrhi	r3, [pc, #180]	; (4cf4 <z_fatal_error+0xdc>)
    4c40:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4c44:	46e9      	mov	r9, sp
    4c46:	b08a      	sub	sp, #40	; 0x28
    4c48:	4604      	mov	r4, r0
    4c4a:	466a      	mov	r2, sp
    4c4c:	492a      	ldr	r1, [pc, #168]	; (4cf8 <z_fatal_error+0xe0>)
    4c4e:	61d3      	str	r3, [r2, #28]
    4c50:	f240 3301 	movw	r3, #769	; 0x301
    4c54:	8493      	strh	r3, [r2, #36]	; 0x24
    4c56:	f04f 0a00 	mov.w	sl, #0
    4c5a:	4b28      	ldr	r3, [pc, #160]	; (4cfc <z_fatal_error+0xe4>)
    4c5c:	f8c2 a020 	str.w	sl, [r2, #32]
    4c60:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4c64:	f842 3f10 	str.w	r3, [r2, #16]!
    4c68:	4825      	ldr	r0, [pc, #148]	; (4d00 <z_fatal_error+0xe8>)
    4c6a:	4653      	mov	r3, sl
    4c6c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    4c70:	f7fc ffc4 	bl	1bfc <z_impl_z_log_msg_static_create>
    4c74:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4c76:	b17e      	cbz	r6, 4c98 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4c78:	69f3      	ldr	r3, [r6, #28]
    4c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4c7e:	b15b      	cbz	r3, 4c98 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    4c80:	4b20      	ldr	r3, [pc, #128]	; (4d04 <z_fatal_error+0xec>)
    4c82:	617b      	str	r3, [r7, #20]
    4c84:	2302      	movs	r3, #2
    4c86:	613b      	str	r3, [r7, #16]
    4c88:	481d      	ldr	r0, [pc, #116]	; (4d00 <z_fatal_error+0xe8>)
    4c8a:	4653      	mov	r3, sl
    4c8c:	f107 0210 	add.w	r2, r7, #16
    4c90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4c94:	f7fc ffb2 	bl	1bfc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4c98:	b12c      	cbz	r4, 4ca6 <z_fatal_error+0x8e>
    4c9a:	4620      	mov	r0, r4
    4c9c:	f001 ffc6 	bl	6c2c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4ca0:	b108      	cbz	r0, 4ca6 <z_fatal_error+0x8e>
    4ca2:	7803      	ldrb	r3, [r0, #0]
    4ca4:	b903      	cbnz	r3, 4ca8 <z_fatal_error+0x90>
		thread_name = "unknown";
    4ca6:	4818      	ldr	r0, [pc, #96]	; (4d08 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4ca8:	46e9      	mov	r9, sp
    4caa:	b08a      	sub	sp, #40	; 0x28
    4cac:	466a      	mov	r2, sp
    4cae:	4b17      	ldr	r3, [pc, #92]	; (4d0c <z_fatal_error+0xf4>)
    4cb0:	61d0      	str	r0, [r2, #28]
    4cb2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4cb6:	f240 3301 	movw	r3, #769	; 0x301
    4cba:	8413      	strh	r3, [r2, #32]
    4cbc:	4b14      	ldr	r3, [pc, #80]	; (4d10 <z_fatal_error+0xf8>)
    4cbe:	f842 3f10 	str.w	r3, [r2, #16]!
    4cc2:	2300      	movs	r3, #0
    4cc4:	480e      	ldr	r0, [pc, #56]	; (4d00 <z_fatal_error+0xe8>)
    4cc6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    4cca:	f7fc ff97 	bl	1bfc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4cce:	4631      	mov	r1, r6
    4cd0:	46cd      	mov	sp, r9
    4cd2:	4628      	mov	r0, r5
    4cd4:	f7ff f92e 	bl	3f34 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4cd8:	f388 8811 	msr	BASEPRI, r8
    4cdc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4ce0:	4620      	mov	r0, r4
    4ce2:	f7fe f959 	bl	2f98 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4ce6:	3718      	adds	r7, #24
    4ce8:	46bd      	mov	sp, r7
    4cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cee:	bf00      	nop
    4cf0:	000072e8 	.word	0x000072e8
    4cf4:	00007aeb 	.word	0x00007aeb
    4cf8:	00007b01 	.word	0x00007b01
    4cfc:	01000005 	.word	0x01000005
    4d00:	000070e4 	.word	0x000070e4
    4d04:	00007b29 	.word	0x00007b29
    4d08:	00007af9 	.word	0x00007af9
    4d0c:	00007b4a 	.word	0x00007b4a
    4d10:	01000004 	.word	0x01000004

00004d14 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d14:	4b10      	ldr	r3, [pc, #64]	; (4d58 <z_sys_init_run_level+0x44>)
{
    4d16:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d18:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4d1c:	3001      	adds	r0, #1
    4d1e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4d22:	42a6      	cmp	r6, r4
    4d24:	d800      	bhi.n	4d28 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    4d26:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    4d28:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    4d2c:	b18d      	cbz	r5, 4d52 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    4d2e:	4628      	mov	r0, r5
    4d30:	4798      	blx	r3
			if (rc != 0) {
    4d32:	b138      	cbz	r0, 4d44 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4d34:	2800      	cmp	r0, #0
    4d36:	bfb8      	it	lt
    4d38:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4d3a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    4d3c:	28ff      	cmp	r0, #255	; 0xff
    4d3e:	bfa8      	it	ge
    4d40:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    4d42:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4d44:	68ea      	ldr	r2, [r5, #12]
    4d46:	7853      	ldrb	r3, [r2, #1]
    4d48:	f043 0301 	orr.w	r3, r3, #1
    4d4c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d4e:	3408      	adds	r4, #8
    4d50:	e7e7      	b.n	4d22 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    4d52:	4798      	blx	r3
    4d54:	e7fb      	b.n	4d4e <z_sys_init_run_level+0x3a>
    4d56:	bf00      	nop
    4d58:	000072fc 	.word	0x000072fc

00004d5c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4d5c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4d5e:	4b0a      	ldr	r3, [pc, #40]	; (4d88 <bg_thread_main+0x2c>)
    4d60:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4d62:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    4d64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    4d66:	f7ff ffd5 	bl	4d14 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4d6a:	f000 ffd7 	bl	5d1c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    4d6e:	2004      	movs	r0, #4
    4d70:	f7ff ffd0 	bl	4d14 <z_sys_init_run_level>

	z_init_static_threads();
    4d74:	f000 f91e 	bl	4fb4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    4d78:	f7fb fb54 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4d7c:	4a03      	ldr	r2, [pc, #12]	; (4d8c <bg_thread_main+0x30>)
    4d7e:	7b13      	ldrb	r3, [r2, #12]
    4d80:	f023 0301 	bic.w	r3, r3, #1
    4d84:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4d86:	bd08      	pop	{r3, pc}
    4d88:	20000d16 	.word	0x20000d16
    4d8c:	20000660 	.word	0x20000660

00004d90 <z_bss_zero>:
{
    4d90:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4d92:	4803      	ldr	r0, [pc, #12]	; (4da0 <z_bss_zero+0x10>)
    4d94:	4a03      	ldr	r2, [pc, #12]	; (4da4 <z_bss_zero+0x14>)
    4d96:	2100      	movs	r1, #0
    4d98:	1a12      	subs	r2, r2, r0
    4d9a:	f001 ff3a 	bl	6c12 <z_early_memset>
}
    4d9e:	bd08      	pop	{r3, pc}
    4da0:	20000100 	.word	0x20000100
    4da4:	20000d18 	.word	0x20000d18

00004da8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4da8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4daa:	2300      	movs	r3, #0
{
    4dac:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4dae:	2201      	movs	r2, #1
    4db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4db4:	4e13      	ldr	r6, [pc, #76]	; (4e04 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4db6:	4d14      	ldr	r5, [pc, #80]	; (4e08 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4db8:	9301      	str	r3, [sp, #4]
    4dba:	220f      	movs	r2, #15
    4dbc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4dc0:	4912      	ldr	r1, [pc, #72]	; (4e0c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4dc2:	2314      	movs	r3, #20
    4dc4:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4dc8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4dcc:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4dce:	f44f 70c0 	mov.w	r0, #384	; 0x180
    4dd2:	fb00 1104 	mla	r1, r0, r4, r1
    4dd6:	4b0e      	ldr	r3, [pc, #56]	; (4e10 <z_init_cpu+0x68>)
    4dd8:	9500      	str	r5, [sp, #0]
    4dda:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4dde:	4630      	mov	r0, r6
    4de0:	f000 f88a 	bl	4ef8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4de4:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4de6:	4a0b      	ldr	r2, [pc, #44]	; (4e14 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4de8:	60ee      	str	r6, [r5, #12]
    4dea:	f023 0304 	bic.w	r3, r3, #4
    4dee:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4df0:	f44f 6304 	mov.w	r3, #2112	; 0x840
    4df4:	fb04 3303 	mla	r3, r4, r3, r3
    4df8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    4dfa:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    4dfc:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4dfe:	b006      	add	sp, #24
    4e00:	bd70      	pop	{r4, r5, r6, pc}
    4e02:	bf00      	nop
    4e04:	200005e0 	.word	0x200005e0
    4e08:	200008b8 	.word	0x200008b8
    4e0c:	200018c0 	.word	0x200018c0
    4e10:	0000506d 	.word	0x0000506d
    4e14:	20001080 	.word	0x20001080

00004e18 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    4e18:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4e1a:	2000      	movs	r0, #0
{
    4e1c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4e1e:	f7ff ff79 	bl	4d14 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4e22:	4b2e      	ldr	r3, [pc, #184]	; (4edc <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4e24:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4e28:	4d2d      	ldr	r5, [pc, #180]	; (4ee0 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    4e2a:	4e2e      	ldr	r6, [pc, #184]	; (4ee4 <z_cstart+0xcc>)
    4e2c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e2e:	4f2e      	ldr	r7, [pc, #184]	; (4ee8 <z_cstart+0xd0>)
    4e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4e34:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e36:	2400      	movs	r4, #0
    4e38:	23e0      	movs	r3, #224	; 0xe0
    4e3a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4e3e:	77ec      	strb	r4, [r5, #31]
    4e40:	762c      	strb	r4, [r5, #24]
    4e42:	766c      	strb	r4, [r5, #25]
    4e44:	76ac      	strb	r4, [r5, #26]
    4e46:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4e4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4e4c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4e50:	626b      	str	r3, [r5, #36]	; 0x24
    4e52:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4e56:	f7fe f813 	bl	2e80 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4e5a:	f7fd fb79 	bl	2550 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4e5e:	f04f 33ff 	mov.w	r3, #4294967295
    4e62:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4e64:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4e66:	f7fe f967 	bl	3138 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4e6a:	f7fe f8ab 	bl	2fc4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4e6e:	f7fc fd51 	bl	1914 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4e72:	f240 1301 	movw	r3, #257	; 0x101
    4e76:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4e7a:	ab06      	add	r3, sp, #24
    4e7c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4e7e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4e82:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4e84:	f001 feb9 	bl	6bfa <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    4e88:	2001      	movs	r0, #1
    4e8a:	f7ff ff43 	bl	4d14 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4e8e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    4e90:	4d16      	ldr	r5, [pc, #88]	; (4eec <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    4e92:	f7ff ff3f 	bl	4d14 <z_sys_init_run_level>
	z_sched_init();
    4e96:	f000 fc3b 	bl	5710 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e9a:	4b15      	ldr	r3, [pc, #84]	; (4ef0 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    4e9c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4e9e:	9305      	str	r3, [sp, #20]
    4ea0:	2301      	movs	r3, #1
    4ea2:	4914      	ldr	r1, [pc, #80]	; (4ef4 <z_cstart+0xdc>)
    4ea4:	9400      	str	r4, [sp, #0]
    4ea6:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4eaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4eae:	463b      	mov	r3, r7
    4eb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4eb4:	4628      	mov	r0, r5
    4eb6:	f000 f81f 	bl	4ef8 <z_setup_new_thread>
    4eba:	7b6a      	ldrb	r2, [r5, #13]
    4ebc:	4606      	mov	r6, r0
    4ebe:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4ec2:	4628      	mov	r0, r5
    4ec4:	736a      	strb	r2, [r5, #13]
    4ec6:	f001 ff08 	bl	6cda <z_ready_thread>
	z_init_cpu(0);
    4eca:	4620      	mov	r0, r4
    4ecc:	f7ff ff6c 	bl	4da8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4ed0:	463a      	mov	r2, r7
    4ed2:	4631      	mov	r1, r6
    4ed4:	4628      	mov	r0, r5
    4ed6:	f7fd fc9b 	bl	2810 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4eda:	bf00      	nop
    4edc:	200018c0 	.word	0x200018c0
    4ee0:	e000ed00 	.word	0xe000ed00
    4ee4:	200008b8 	.word	0x200008b8
    4ee8:	00004d5d 	.word	0x00004d5d
    4eec:	20000660 	.word	0x20000660
    4ef0:	00007bac 	.word	0x00007bac
    4ef4:	20001a40 	.word	0x20001a40

00004ef8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4ef8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4efc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4efe:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4f00:	2604      	movs	r6, #4
    4f02:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4f04:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4f06:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4f08:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4f0c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f0e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4f10:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4f16:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f18:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4f1c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4f1e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4f22:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4f26:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4f28:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4f2a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4f2c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f30:	9202      	str	r2, [sp, #8]
    4f32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4f34:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4f36:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4f3a:	9200      	str	r2, [sp, #0]
    4f3c:	4642      	mov	r2, r8
{
    4f3e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4f40:	f7fd fc34 	bl	27ac <arch_new_thread>
	if (!_current) {
    4f44:	4b04      	ldr	r3, [pc, #16]	; (4f58 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4f46:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4f48:	689b      	ldr	r3, [r3, #8]
    4f4a:	b103      	cbz	r3, 4f4e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4f4e:	6723      	str	r3, [r4, #112]	; 0x70
}
    4f50:	4640      	mov	r0, r8
    4f52:	b004      	add	sp, #16
    4f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f58:	200008b8 	.word	0x200008b8

00004f5c <z_impl_k_thread_create>:
{
    4f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f5e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f60:	2500      	movs	r5, #0
    4f62:	9505      	str	r5, [sp, #20]
    4f64:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4f66:	9504      	str	r5, [sp, #16]
    4f68:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    4f6a:	9503      	str	r5, [sp, #12]
    4f6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4f6e:	9502      	str	r5, [sp, #8]
{
    4f70:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f74:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4f76:	9501      	str	r5, [sp, #4]
    4f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4f7a:	9500      	str	r5, [sp, #0]
{
    4f7c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f7e:	f7ff ffbb 	bl	4ef8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4f82:	f1b6 3fff 	cmp.w	r6, #4294967295
    4f86:	bf08      	it	eq
    4f88:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    4f8c:	d005      	beq.n	4f9a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4f8e:	ea56 0307 	orrs.w	r3, r6, r7
    4f92:	d105      	bne.n	4fa0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4f94:	4620      	mov	r0, r4
    4f96:	f000 fb3b 	bl	5610 <z_sched_start>
}
    4f9a:	4620      	mov	r0, r4
    4f9c:	b007      	add	sp, #28
    4f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4fa0:	4903      	ldr	r1, [pc, #12]	; (4fb0 <z_impl_k_thread_create+0x54>)
    4fa2:	463a      	mov	r2, r7
    4fa4:	4633      	mov	r3, r6
    4fa6:	f104 0018 	add.w	r0, r4, #24
    4faa:	f000 fd1b 	bl	59e4 <z_add_timeout>
    4fae:	e7f4      	b.n	4f9a <z_impl_k_thread_create+0x3e>
    4fb0:	00006d63 	.word	0x00006d63

00004fb4 <z_init_static_threads>:
{
    4fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4fb8:	4c29      	ldr	r4, [pc, #164]	; (5060 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4fba:	4d2a      	ldr	r5, [pc, #168]	; (5064 <z_init_static_threads+0xb0>)
{
    4fbc:	b087      	sub	sp, #28
    4fbe:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4fc0:	42ae      	cmp	r6, r5
    4fc2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    4fc6:	d30f      	bcc.n	4fe8 <z_init_static_threads+0x34>
	k_sched_lock();
    4fc8:	f000 fb72 	bl	56b0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4fcc:	4c24      	ldr	r4, [pc, #144]	; (5060 <z_init_static_threads+0xac>)
    4fce:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5068 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    4fd2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4fd6:	f240 37e7 	movw	r7, #999	; 0x3e7
    4fda:	42ac      	cmp	r4, r5
    4fdc:	d320      	bcc.n	5020 <z_init_static_threads+0x6c>
}
    4fde:	b007      	add	sp, #28
    4fe0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4fe4:	f000 bb78 	b.w	56d8 <k_sched_unlock>
		z_setup_new_thread(
    4fe8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4fec:	9305      	str	r3, [sp, #20]
    4fee:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    4ff2:	9304      	str	r3, [sp, #16]
    4ff4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4ff8:	9303      	str	r3, [sp, #12]
    4ffa:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4ffe:	9302      	str	r3, [sp, #8]
    5000:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5004:	9301      	str	r3, [sp, #4]
    5006:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    500a:	9300      	str	r3, [sp, #0]
    500c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    5010:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    5014:	f7ff ff70 	bl	4ef8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5018:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    501c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    501e:	e7ce      	b.n	4fbe <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5020:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5022:	1c5a      	adds	r2, r3, #1
    5024:	d00d      	beq.n	5042 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    502a:	2100      	movs	r1, #0
    502c:	4638      	mov	r0, r7
    502e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5032:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5036:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    503a:	d104      	bne.n	5046 <z_init_static_threads+0x92>
	z_sched_start(thread);
    503c:	4640      	mov	r0, r8
    503e:	f000 fae7 	bl	5610 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5042:	342c      	adds	r4, #44	; 0x2c
    5044:	e7c9      	b.n	4fda <z_init_static_threads+0x26>
    5046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    504a:	2300      	movs	r3, #0
    504c:	f7fb f846 	bl	dc <__aeabi_uldivmod>
    5050:	4602      	mov	r2, r0
    5052:	460b      	mov	r3, r1
    5054:	f108 0018 	add.w	r0, r8, #24
    5058:	4649      	mov	r1, r9
    505a:	f000 fcc3 	bl	59e4 <z_add_timeout>
    505e:	e7f0      	b.n	5042 <z_init_static_threads+0x8e>
    5060:	00007078 	.word	0x00007078
    5064:	00007078 	.word	0x00007078
    5068:	00006d63 	.word	0x00006d63

0000506c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    506c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    506e:	4c0b      	ldr	r4, [pc, #44]	; (509c <idle+0x30>)
	return !z_sys_post_kernel;
    5070:	4d0b      	ldr	r5, [pc, #44]	; (50a0 <idle+0x34>)
	__asm__ volatile(
    5072:	f04f 0220 	mov.w	r2, #32
    5076:	f3ef 8311 	mrs	r3, BASEPRI
    507a:	f382 8812 	msr	BASEPRI_MAX, r2
    507e:	f3bf 8f6f 	isb	sy
    5082:	f001 fed1 	bl	6e28 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5086:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5088:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    508a:	b913      	cbnz	r3, 5092 <idle+0x26>
	arch_cpu_idle();
    508c:	f7fd fa66 	bl	255c <arch_cpu_idle>
}
    5090:	e7ef      	b.n	5072 <idle+0x6>
    5092:	f7fd f98f 	bl	23b4 <pm_system_suspend>
    5096:	2800      	cmp	r0, #0
    5098:	d1eb      	bne.n	5072 <idle+0x6>
    509a:	e7f7      	b.n	508c <idle+0x20>
    509c:	200008b8 	.word	0x200008b8
    50a0:	20000d16 	.word	0x20000d16

000050a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    50a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    50a8:	4604      	mov	r4, r0
    50aa:	4617      	mov	r7, r2
    50ac:	461e      	mov	r6, r3
    50ae:	f04f 0320 	mov.w	r3, #32
    50b2:	f3ef 8811 	mrs	r8, BASEPRI
    50b6:	f383 8812 	msr	BASEPRI_MAX, r3
    50ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    50be:	68c3      	ldr	r3, [r0, #12]
    50c0:	4a33      	ldr	r2, [pc, #204]	; (5190 <z_impl_k_mutex_lock+0xec>)
    50c2:	b17b      	cbz	r3, 50e4 <z_impl_k_mutex_lock+0x40>
    50c4:	6880      	ldr	r0, [r0, #8]
    50c6:	6891      	ldr	r1, [r2, #8]
    50c8:	4288      	cmp	r0, r1
    50ca:	d019      	beq.n	5100 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    50cc:	ea57 0306 	orrs.w	r3, r7, r6
    50d0:	d118      	bne.n	5104 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    50d2:	f388 8811 	msr	BASEPRI, r8
    50d6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    50da:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    50de:	b002      	add	sp, #8
    50e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    50e4:	6891      	ldr	r1, [r2, #8]
    50e6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    50ea:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    50ec:	3301      	adds	r3, #1
    50ee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    50f0:	6893      	ldr	r3, [r2, #8]
    50f2:	60a3      	str	r3, [r4, #8]
    50f4:	f388 8811 	msr	BASEPRI, r8
    50f8:	f3bf 8f6f 	isb	sy
		return 0;
    50fc:	2000      	movs	r0, #0
    50fe:	e7ee      	b.n	50de <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5100:	6921      	ldr	r1, [r4, #16]
    5102:	e7f2      	b.n	50ea <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5104:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5108:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    510c:	4299      	cmp	r1, r3
    510e:	bfa8      	it	ge
    5110:	4619      	movge	r1, r3
    5112:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5116:	4291      	cmp	r1, r2
    5118:	bfb8      	it	lt
    511a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    511c:	428b      	cmp	r3, r1
    511e:	dd2e      	ble.n	517e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5120:	f001 fd8d 	bl	6c3e <adjust_owner_prio.isra.0>
    5124:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5126:	e9cd 7600 	strd	r7, r6, [sp]
    512a:	481a      	ldr	r0, [pc, #104]	; (5194 <z_impl_k_mutex_lock+0xf0>)
    512c:	4622      	mov	r2, r4
    512e:	4641      	mov	r1, r8
    5130:	f000 f9f8 	bl	5524 <z_pend_curr>
	if (got_mutex == 0) {
    5134:	2800      	cmp	r0, #0
    5136:	d0e1      	beq.n	50fc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    5138:	f04f 0320 	mov.w	r3, #32
    513c:	f3ef 8611 	mrs	r6, BASEPRI
    5140:	f383 8812 	msr	BASEPRI_MAX, r3
    5144:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    5148:	68a0      	ldr	r0, [r4, #8]
    514a:	b1d0      	cbz	r0, 5182 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    514c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    514e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5150:	429c      	cmp	r4, r3
    5152:	d00a      	beq.n	516a <z_impl_k_mutex_lock+0xc6>
    5154:	b14b      	cbz	r3, 516a <z_impl_k_mutex_lock+0xc6>
    5156:	f993 300e 	ldrsb.w	r3, [r3, #14]
    515a:	4299      	cmp	r1, r3
    515c:	bfa8      	it	ge
    515e:	4619      	movge	r1, r3
    5160:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5164:	4299      	cmp	r1, r3
    5166:	bfb8      	it	lt
    5168:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    516a:	f001 fd68 	bl	6c3e <adjust_owner_prio.isra.0>
    516e:	b140      	cbz	r0, 5182 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5170:	4808      	ldr	r0, [pc, #32]	; (5194 <z_impl_k_mutex_lock+0xf0>)
    5172:	4631      	mov	r1, r6
    5174:	f000 fa3a 	bl	55ec <z_reschedule>
	return -EAGAIN;
    5178:	f06f 000a 	mvn.w	r0, #10
    517c:	e7af      	b.n	50de <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    517e:	2500      	movs	r5, #0
    5180:	e7d1      	b.n	5126 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    5182:	2d00      	cmp	r5, #0
    5184:	d1f4      	bne.n	5170 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    5186:	f386 8811 	msr	BASEPRI, r6
    518a:	f3bf 8f6f 	isb	sy
    518e:	e7f3      	b.n	5178 <z_impl_k_mutex_lock+0xd4>
    5190:	200008b8 	.word	0x200008b8
    5194:	20000d17 	.word	0x20000d17

00005198 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5198:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    519a:	6883      	ldr	r3, [r0, #8]
{
    519c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    519e:	b36b      	cbz	r3, 51fc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    51a0:	4a19      	ldr	r2, [pc, #100]	; (5208 <z_impl_k_mutex_unlock+0x70>)
    51a2:	6892      	ldr	r2, [r2, #8]
    51a4:	4293      	cmp	r3, r2
    51a6:	d12c      	bne.n	5202 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    51a8:	68c3      	ldr	r3, [r0, #12]
    51aa:	2b01      	cmp	r3, #1
    51ac:	d903      	bls.n	51b6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    51ae:	3b01      	subs	r3, #1
    51b0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    51b2:	2000      	movs	r0, #0
}
    51b4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    51b6:	f04f 0320 	mov.w	r3, #32
    51ba:	f3ef 8511 	mrs	r5, BASEPRI
    51be:	f383 8812 	msr	BASEPRI_MAX, r3
    51c2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    51c6:	6901      	ldr	r1, [r0, #16]
    51c8:	6880      	ldr	r0, [r0, #8]
    51ca:	f001 fd38 	bl	6c3e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    51ce:	4620      	mov	r0, r4
    51d0:	f001 fde2 	bl	6d98 <z_unpend_first_thread>
	mutex->owner = new_owner;
    51d4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    51d6:	b158      	cbz	r0, 51f0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    51d8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    51dc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    51de:	2200      	movs	r2, #0
    51e0:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    51e2:	f001 fd7a 	bl	6cda <z_ready_thread>
		z_reschedule(&lock, key);
    51e6:	4809      	ldr	r0, [pc, #36]	; (520c <z_impl_k_mutex_unlock+0x74>)
    51e8:	4629      	mov	r1, r5
    51ea:	f000 f9ff 	bl	55ec <z_reschedule>
    51ee:	e7e0      	b.n	51b2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    51f0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    51f2:	f385 8811 	msr	BASEPRI, r5
    51f6:	f3bf 8f6f 	isb	sy
    51fa:	e7da      	b.n	51b2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    51fc:	f06f 0015 	mvn.w	r0, #21
    5200:	e7d8      	b.n	51b4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    5202:	f04f 30ff 	mov.w	r0, #4294967295
    5206:	e7d5      	b.n	51b4 <z_impl_k_mutex_unlock+0x1c>
    5208:	200008b8 	.word	0x200008b8
    520c:	20000d17 	.word	0x20000d17

00005210 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5210:	b538      	push	{r3, r4, r5, lr}
    5212:	4604      	mov	r4, r0
	__asm__ volatile(
    5214:	f04f 0320 	mov.w	r3, #32
    5218:	f3ef 8511 	mrs	r5, BASEPRI
    521c:	f383 8812 	msr	BASEPRI_MAX, r3
    5220:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5224:	f001 fdb8 	bl	6d98 <z_unpend_first_thread>

	if (thread != NULL) {
    5228:	b148      	cbz	r0, 523e <z_impl_k_sem_give+0x2e>
    522a:	2200      	movs	r2, #0
    522c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    522e:	f001 fd54 	bl	6cda <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5232:	4629      	mov	r1, r5
    5234:	4805      	ldr	r0, [pc, #20]	; (524c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    523a:	f000 b9d7 	b.w	55ec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    523e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5242:	429a      	cmp	r2, r3
    5244:	bf18      	it	ne
    5246:	3301      	addne	r3, #1
    5248:	60a3      	str	r3, [r4, #8]
}
    524a:	e7f2      	b.n	5232 <z_impl_k_sem_give+0x22>
    524c:	20000d17 	.word	0x20000d17

00005250 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5250:	b513      	push	{r0, r1, r4, lr}
    5252:	f04f 0420 	mov.w	r4, #32
    5256:	f3ef 8111 	mrs	r1, BASEPRI
    525a:	f384 8812 	msr	BASEPRI_MAX, r4
    525e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5262:	6884      	ldr	r4, [r0, #8]
    5264:	b144      	cbz	r4, 5278 <z_impl_k_sem_take+0x28>
		sem->count--;
    5266:	3c01      	subs	r4, #1
    5268:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    526a:	f381 8811 	msr	BASEPRI, r1
    526e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5272:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5274:	b002      	add	sp, #8
    5276:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5278:	ea52 0403 	orrs.w	r4, r2, r3
    527c:	d106      	bne.n	528c <z_impl_k_sem_take+0x3c>
    527e:	f381 8811 	msr	BASEPRI, r1
    5282:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5286:	f06f 000f 	mvn.w	r0, #15
    528a:	e7f3      	b.n	5274 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    528c:	e9cd 2300 	strd	r2, r3, [sp]
    5290:	4602      	mov	r2, r0
    5292:	4802      	ldr	r0, [pc, #8]	; (529c <z_impl_k_sem_take+0x4c>)
    5294:	f000 f946 	bl	5524 <z_pend_curr>
	return ret;
    5298:	e7ec      	b.n	5274 <z_impl_k_sem_take+0x24>
    529a:	bf00      	nop
    529c:	20000d17 	.word	0x20000d17

000052a0 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    52a0:	89c3      	ldrh	r3, [r0, #14]
    52a2:	2b7f      	cmp	r3, #127	; 0x7f
    52a4:	d812      	bhi.n	52cc <sliceable+0x2c>
	int ret = slice_ticks;
    52a6:	4b0a      	ldr	r3, [pc, #40]	; (52d0 <sliceable+0x30>)
    52a8:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    52aa:	b163      	cbz	r3, 52c6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    52ac:	4b09      	ldr	r3, [pc, #36]	; (52d4 <sliceable+0x34>)
    52ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
    52b2:	681b      	ldr	r3, [r3, #0]
    52b4:	429a      	cmp	r2, r3
    52b6:	db09      	blt.n	52cc <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    52b8:	7b43      	ldrb	r3, [r0, #13]
    52ba:	06db      	lsls	r3, r3, #27
    52bc:	d106      	bne.n	52cc <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    52be:	4b06      	ldr	r3, [pc, #24]	; (52d8 <sliceable+0x38>)
    52c0:	1ac3      	subs	r3, r0, r3
    52c2:	bf18      	it	ne
    52c4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    52c6:	f003 0001 	and.w	r0, r3, #1
    52ca:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    52cc:	2300      	movs	r3, #0
    52ce:	e7fa      	b.n	52c6 <sliceable+0x26>
    52d0:	200008e4 	.word	0x200008e4
    52d4:	200008e0 	.word	0x200008e0
    52d8:	200005e0 	.word	0x200005e0

000052dc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    52dc:	4b04      	ldr	r3, [pc, #16]	; (52f0 <slice_timeout+0x14>)
    52de:	1ac0      	subs	r0, r0, r3
    52e0:	4b04      	ldr	r3, [pc, #16]	; (52f4 <slice_timeout+0x18>)
    52e2:	10c0      	asrs	r0, r0, #3
    52e4:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    52e6:	4b04      	ldr	r3, [pc, #16]	; (52f8 <slice_timeout+0x1c>)
    52e8:	2201      	movs	r2, #1
    52ea:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    52ec:	4770      	bx	lr
    52ee:	bf00      	nop
    52f0:	200006e0 	.word	0x200006e0
    52f4:	aaaaaaab 	.word	0xaaaaaaab
    52f8:	20000d17 	.word	0x20000d17

000052fc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    52fc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    52fe:	4b0e      	ldr	r3, [pc, #56]	; (5338 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    5300:	4c0e      	ldr	r4, [pc, #56]	; (533c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    5302:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    5304:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    5308:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    530c:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    530e:	4620      	mov	r0, r4
    5310:	f001 fd74 	bl	6dfc <z_abort_timeout>
	slice_expired[cpu] = false;
    5314:	4b0a      	ldr	r3, [pc, #40]	; (5340 <z_reset_time_slice+0x44>)
    5316:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    5318:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    531a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    531c:	f7ff ffc0 	bl	52a0 <sliceable>
    5320:	b148      	cbz	r0, 5336 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    5322:	4b08      	ldr	r3, [pc, #32]	; (5344 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5324:	4908      	ldr	r1, [pc, #32]	; (5348 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    5326:	681a      	ldr	r2, [r3, #0]
    5328:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    532a:	4620      	mov	r0, r4
    532c:	17d3      	asrs	r3, r2, #31
	}
}
    532e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5332:	f000 bb57 	b.w	59e4 <z_add_timeout>
}
    5336:	bd70      	pop	{r4, r5, r6, pc}
    5338:	200008b8 	.word	0x200008b8
    533c:	200006e0 	.word	0x200006e0
    5340:	20000d17 	.word	0x20000d17
    5344:	200008e4 	.word	0x200008e4
    5348:	000052dd 	.word	0x000052dd

0000534c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    534c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    534e:	4d0d      	ldr	r5, [pc, #52]	; (5384 <update_cache+0x38>)
    5350:	462b      	mov	r3, r5
    5352:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5356:	429c      	cmp	r4, r3
    5358:	d000      	beq.n	535c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    535a:	b904      	cbnz	r4, 535e <update_cache+0x12>
    535c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    535e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5360:	b938      	cbnz	r0, 5372 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    5362:	7b5a      	ldrb	r2, [r3, #13]
    5364:	06d2      	lsls	r2, r2, #27
    5366:	d104      	bne.n	5372 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5368:	69a2      	ldr	r2, [r4, #24]
    536a:	b912      	cbnz	r2, 5372 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    536c:	89da      	ldrh	r2, [r3, #14]
    536e:	2a7f      	cmp	r2, #127	; 0x7f
    5370:	d805      	bhi.n	537e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5372:	429c      	cmp	r4, r3
    5374:	d002      	beq.n	537c <update_cache+0x30>
			z_reset_time_slice(thread);
    5376:	4620      	mov	r0, r4
    5378:	f7ff ffc0 	bl	52fc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    537c:	4623      	mov	r3, r4
    537e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5380:	bd38      	pop	{r3, r4, r5, pc}
    5382:	bf00      	nop
    5384:	200008b8 	.word	0x200008b8

00005388 <move_thread_to_end_of_prio_q>:
{
    5388:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    538a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    538e:	7b43      	ldrb	r3, [r0, #13]
    5390:	2a00      	cmp	r2, #0
{
    5392:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5394:	da04      	bge.n	53a0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    539a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    539c:	f001 fc63 	bl	6c66 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    53a0:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    53a2:	4a15      	ldr	r2, [pc, #84]	; (53f8 <move_thread_to_end_of_prio_q+0x70>)
    53a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    53a8:	4610      	mov	r0, r2
    53aa:	734b      	strb	r3, [r1, #13]
    53ac:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    53b0:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53b2:	4283      	cmp	r3, r0
    53b4:	bf08      	it	eq
    53b6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53b8:	b923      	cbnz	r3, 53c4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    53ba:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    53be:	6021      	str	r1, [r4, #0]
	list->tail = node;
    53c0:	6211      	str	r1, [r2, #32]
}
    53c2:	e00c      	b.n	53de <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    53c4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    53c8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    53cc:	42b5      	cmp	r5, r6
    53ce:	d00e      	beq.n	53ee <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    53d0:	42ae      	cmp	r6, r5
    53d2:	dd0c      	ble.n	53ee <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    53d4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    53d6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    53da:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    53dc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    53de:	6890      	ldr	r0, [r2, #8]
    53e0:	1a43      	subs	r3, r0, r1
    53e2:	4258      	negs	r0, r3
}
    53e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    53e8:	4158      	adcs	r0, r3
    53ea:	f7ff bfaf 	b.w	534c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    53ee:	429c      	cmp	r4, r3
    53f0:	d0e3      	beq.n	53ba <move_thread_to_end_of_prio_q+0x32>
    53f2:	681b      	ldr	r3, [r3, #0]
    53f4:	e7e0      	b.n	53b8 <move_thread_to_end_of_prio_q+0x30>
    53f6:	bf00      	nop
    53f8:	200008b8 	.word	0x200008b8

000053fc <ready_thread>:
{
    53fc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    53fe:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5402:	7b42      	ldrb	r2, [r0, #13]
    5404:	2b00      	cmp	r3, #0
    5406:	db29      	blt.n	545c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5408:	06d3      	lsls	r3, r2, #27
    540a:	d127      	bne.n	545c <ready_thread+0x60>
	return node->next != NULL;
    540c:	6983      	ldr	r3, [r0, #24]
    540e:	bb2b      	cbnz	r3, 545c <ready_thread+0x60>
	return list->head == list;
    5410:	4913      	ldr	r1, [pc, #76]	; (5460 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5412:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5416:	7342      	strb	r2, [r0, #13]
    5418:	460a      	mov	r2, r1
    541a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    541e:	4294      	cmp	r4, r2
    5420:	bf18      	it	ne
    5422:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    5424:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5426:	b923      	cbnz	r3, 5432 <ready_thread+0x36>
	node->prev = tail;
    5428:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    542c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    542e:	6208      	str	r0, [r1, #32]
}
    5430:	e00c      	b.n	544c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    5432:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5436:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    543a:	42b5      	cmp	r5, r6
    543c:	d00a      	beq.n	5454 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    543e:	42ae      	cmp	r6, r5
    5440:	dd08      	ble.n	5454 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    5442:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5444:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5448:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    544a:	6058      	str	r0, [r3, #4]
}
    544c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    544e:	2000      	movs	r0, #0
    5450:	f7ff bf7c 	b.w	534c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5454:	42a3      	cmp	r3, r4
    5456:	d0e7      	beq.n	5428 <ready_thread+0x2c>
    5458:	681b      	ldr	r3, [r3, #0]
    545a:	e7e4      	b.n	5426 <ready_thread+0x2a>
}
    545c:	bc70      	pop	{r4, r5, r6}
    545e:	4770      	bx	lr
    5460:	200008b8 	.word	0x200008b8

00005464 <unready_thread>:
{
    5464:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5466:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    546a:	7b43      	ldrb	r3, [r0, #13]
    546c:	2a00      	cmp	r2, #0
{
    546e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5470:	da04      	bge.n	547c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5476:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5478:	f001 fbf5 	bl	6c66 <sys_dlist_remove>
	update_cache(thread == _current);
    547c:	4b04      	ldr	r3, [pc, #16]	; (5490 <unready_thread+0x2c>)
    547e:	6898      	ldr	r0, [r3, #8]
    5480:	1a43      	subs	r3, r0, r1
    5482:	4258      	negs	r0, r3
    5484:	4158      	adcs	r0, r3
}
    5486:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    548a:	f7ff bf5f 	b.w	534c <update_cache>
    548e:	bf00      	nop
    5490:	200008b8 	.word	0x200008b8

00005494 <pend_locked>:
{
    5494:	b570      	push	{r4, r5, r6, lr}
    5496:	4615      	mov	r5, r2
    5498:	461c      	mov	r4, r3
    549a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    549c:	f001 fbf5 	bl	6c8a <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    54a0:	f1b4 3fff 	cmp.w	r4, #4294967295
    54a4:	bf08      	it	eq
    54a6:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    54aa:	d008      	beq.n	54be <pend_locked+0x2a>
    54ac:	462a      	mov	r2, r5
    54ae:	4623      	mov	r3, r4
    54b0:	f106 0018 	add.w	r0, r6, #24
    54b4:	4902      	ldr	r1, [pc, #8]	; (54c0 <pend_locked+0x2c>)
}
    54b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    54ba:	f000 ba93 	b.w	59e4 <z_add_timeout>
    54be:	bd70      	pop	{r4, r5, r6, pc}
    54c0:	00006d63 	.word	0x00006d63

000054c4 <z_time_slice>:
{
    54c4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    54c6:	f04f 0320 	mov.w	r3, #32
    54ca:	f3ef 8511 	mrs	r5, BASEPRI
    54ce:	f383 8812 	msr	BASEPRI_MAX, r3
    54d2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    54d6:	4b10      	ldr	r3, [pc, #64]	; (5518 <z_time_slice+0x54>)
	if (pending_current == curr) {
    54d8:	4a10      	ldr	r2, [pc, #64]	; (551c <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    54da:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    54dc:	6810      	ldr	r0, [r2, #0]
    54de:	42a0      	cmp	r0, r4
    54e0:	d106      	bne.n	54f0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    54e2:	f7ff ff0b 	bl	52fc <z_reset_time_slice>
	__asm__ volatile(
    54e6:	f385 8811 	msr	BASEPRI, r5
    54ea:	f3bf 8f6f 	isb	sy
}
    54ee:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    54f0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    54f2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    54f4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    54f6:	4a0a      	ldr	r2, [pc, #40]	; (5520 <z_time_slice+0x5c>)
    54f8:	5cd3      	ldrb	r3, [r2, r3]
    54fa:	2b00      	cmp	r3, #0
    54fc:	d0f3      	beq.n	54e6 <z_time_slice+0x22>
    54fe:	4620      	mov	r0, r4
    5500:	f7ff fece 	bl	52a0 <sliceable>
    5504:	2800      	cmp	r0, #0
    5506:	d0ee      	beq.n	54e6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    5508:	7b63      	ldrb	r3, [r4, #13]
    550a:	06db      	lsls	r3, r3, #27
    550c:	d102      	bne.n	5514 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    550e:	4620      	mov	r0, r4
    5510:	f7ff ff3a 	bl	5388 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    5514:	4620      	mov	r0, r4
    5516:	e7e4      	b.n	54e2 <z_time_slice+0x1e>
    5518:	200008b8 	.word	0x200008b8
    551c:	200008dc 	.word	0x200008dc
    5520:	20000d17 	.word	0x20000d17

00005524 <z_pend_curr>:
{
    5524:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    5526:	480c      	ldr	r0, [pc, #48]	; (5558 <z_pend_curr+0x34>)
    5528:	4d0c      	ldr	r5, [pc, #48]	; (555c <z_pend_curr+0x38>)
    552a:	6886      	ldr	r6, [r0, #8]
    552c:	602e      	str	r6, [r5, #0]
{
    552e:	460c      	mov	r4, r1
    5530:	4611      	mov	r1, r2
    5532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    5536:	f04f 0620 	mov.w	r6, #32
    553a:	f3ef 8511 	mrs	r5, BASEPRI
    553e:	f386 8812 	msr	BASEPRI_MAX, r6
    5542:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    5546:	6880      	ldr	r0, [r0, #8]
    5548:	f7ff ffa4 	bl	5494 <pend_locked>
	ret = arch_swap(key);
    554c:	4620      	mov	r0, r4
}
    554e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5552:	f7fd b8d7 	b.w	2704 <arch_swap>
    5556:	bf00      	nop
    5558:	200008b8 	.word	0x200008b8
    555c:	200008dc 	.word	0x200008dc

00005560 <z_set_prio>:
{
    5560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5562:	4604      	mov	r4, r0
    5564:	f04f 0320 	mov.w	r3, #32
    5568:	f3ef 8611 	mrs	r6, BASEPRI
    556c:	f383 8812 	msr	BASEPRI_MAX, r3
    5570:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5574:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5576:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5578:	b249      	sxtb	r1, r1
    557a:	d119      	bne.n	55b0 <z_set_prio+0x50>
	return node->next != NULL;
    557c:	6985      	ldr	r5, [r0, #24]
    557e:	b9bd      	cbnz	r5, 55b0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5584:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5586:	f001 fb6e 	bl	6c66 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    558a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    558c:	4a16      	ldr	r2, [pc, #88]	; (55e8 <z_set_prio+0x88>)
				thread->base.prio = prio;
    558e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5590:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5594:	7343      	strb	r3, [r0, #13]
    5596:	4613      	mov	r3, r2
    5598:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    559c:	4298      	cmp	r0, r3
    559e:	bf18      	it	ne
    55a0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    55a2:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    55a4:	b95d      	cbnz	r5, 55be <z_set_prio+0x5e>
	node->prev = tail;
    55a6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    55aa:	6004      	str	r4, [r0, #0]
	list->tail = node;
    55ac:	6214      	str	r4, [r2, #32]
}
    55ae:	e011      	b.n	55d4 <z_set_prio+0x74>
			thread->base.prio = prio;
    55b0:	73a1      	strb	r1, [r4, #14]
    55b2:	2000      	movs	r0, #0
	__asm__ volatile(
    55b4:	f386 8811 	msr	BASEPRI, r6
    55b8:	f3bf 8f6f 	isb	sy
}
    55bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    55be:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    55c2:	42b9      	cmp	r1, r7
    55c4:	d00b      	beq.n	55de <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    55c6:	428f      	cmp	r7, r1
    55c8:	dd09      	ble.n	55de <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    55ca:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    55cc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    55d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    55d2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    55d4:	2001      	movs	r0, #1
    55d6:	f7ff feb9 	bl	534c <update_cache>
    55da:	2001      	movs	r0, #1
    55dc:	e7ea      	b.n	55b4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    55de:	42a8      	cmp	r0, r5
    55e0:	d0e1      	beq.n	55a6 <z_set_prio+0x46>
    55e2:	682d      	ldr	r5, [r5, #0]
    55e4:	e7de      	b.n	55a4 <z_set_prio+0x44>
    55e6:	bf00      	nop
    55e8:	200008b8 	.word	0x200008b8

000055ec <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    55ec:	b949      	cbnz	r1, 5602 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    55ee:	f3ef 8005 	mrs	r0, IPSR
    55f2:	b930      	cbnz	r0, 5602 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    55f4:	4b05      	ldr	r3, [pc, #20]	; (560c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    55f6:	699a      	ldr	r2, [r3, #24]
    55f8:	689b      	ldr	r3, [r3, #8]
    55fa:	429a      	cmp	r2, r3
    55fc:	d001      	beq.n	5602 <z_reschedule+0x16>
    55fe:	f7fd b881 	b.w	2704 <arch_swap>
    5602:	f381 8811 	msr	BASEPRI, r1
    5606:	f3bf 8f6f 	isb	sy
}
    560a:	4770      	bx	lr
    560c:	200008b8 	.word	0x200008b8

00005610 <z_sched_start>:
{
    5610:	b510      	push	{r4, lr}
	__asm__ volatile(
    5612:	f04f 0220 	mov.w	r2, #32
    5616:	f3ef 8411 	mrs	r4, BASEPRI
    561a:	f382 8812 	msr	BASEPRI_MAX, r2
    561e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5622:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5624:	0751      	lsls	r1, r2, #29
    5626:	d404      	bmi.n	5632 <z_sched_start+0x22>
	__asm__ volatile(
    5628:	f384 8811 	msr	BASEPRI, r4
    562c:	f3bf 8f6f 	isb	sy
}
    5630:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5632:	f022 0204 	bic.w	r2, r2, #4
    5636:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5638:	f7ff fee0 	bl	53fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    563c:	4621      	mov	r1, r4
    563e:	4802      	ldr	r0, [pc, #8]	; (5648 <z_sched_start+0x38>)
}
    5640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5644:	f7ff bfd2 	b.w	55ec <z_reschedule>
    5648:	20000d18 	.word	0x20000d18

0000564c <z_impl_k_thread_suspend>:
{
    564c:	b570      	push	{r4, r5, r6, lr}
    564e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5650:	3018      	adds	r0, #24
    5652:	f001 fbd3 	bl	6dfc <z_abort_timeout>
	__asm__ volatile(
    5656:	f04f 0320 	mov.w	r3, #32
    565a:	f3ef 8611 	mrs	r6, BASEPRI
    565e:	f383 8812 	msr	BASEPRI_MAX, r3
    5662:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5666:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    566a:	7b63      	ldrb	r3, [r4, #13]
    566c:	2a00      	cmp	r2, #0
    566e:	da05      	bge.n	567c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5674:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5676:	4620      	mov	r0, r4
    5678:	f001 faf5 	bl	6c66 <sys_dlist_remove>
		update_cache(thread == _current);
    567c:	4d0b      	ldr	r5, [pc, #44]	; (56ac <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    567e:	7b63      	ldrb	r3, [r4, #13]
    5680:	68a8      	ldr	r0, [r5, #8]
    5682:	f043 0310 	orr.w	r3, r3, #16
    5686:	7363      	strb	r3, [r4, #13]
    5688:	1b03      	subs	r3, r0, r4
    568a:	4258      	negs	r0, r3
    568c:	4158      	adcs	r0, r3
    568e:	f7ff fe5d 	bl	534c <update_cache>
	__asm__ volatile(
    5692:	f386 8811 	msr	BASEPRI, r6
    5696:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    569a:	68ab      	ldr	r3, [r5, #8]
    569c:	42a3      	cmp	r3, r4
    569e:	d103      	bne.n	56a8 <z_impl_k_thread_suspend+0x5c>
}
    56a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    56a4:	f001 bba0 	b.w	6de8 <z_reschedule_unlocked>
}
    56a8:	bd70      	pop	{r4, r5, r6, pc}
    56aa:	bf00      	nop
    56ac:	200008b8 	.word	0x200008b8

000056b0 <k_sched_lock>:
	__asm__ volatile(
    56b0:	f04f 0320 	mov.w	r3, #32
    56b4:	f3ef 8111 	mrs	r1, BASEPRI
    56b8:	f383 8812 	msr	BASEPRI_MAX, r3
    56bc:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    56c0:	4b04      	ldr	r3, [pc, #16]	; (56d4 <k_sched_lock+0x24>)
    56c2:	689a      	ldr	r2, [r3, #8]
    56c4:	7bd3      	ldrb	r3, [r2, #15]
    56c6:	3b01      	subs	r3, #1
    56c8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    56ca:	f381 8811 	msr	BASEPRI, r1
    56ce:	f3bf 8f6f 	isb	sy
}
    56d2:	4770      	bx	lr
    56d4:	200008b8 	.word	0x200008b8

000056d8 <k_sched_unlock>:
{
    56d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    56da:	f04f 0320 	mov.w	r3, #32
    56de:	f3ef 8411 	mrs	r4, BASEPRI
    56e2:	f383 8812 	msr	BASEPRI_MAX, r3
    56e6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    56ea:	4b08      	ldr	r3, [pc, #32]	; (570c <k_sched_unlock+0x34>)
    56ec:	689a      	ldr	r2, [r3, #8]
    56ee:	7bd3      	ldrb	r3, [r2, #15]
    56f0:	3301      	adds	r3, #1
    56f2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    56f4:	2000      	movs	r0, #0
    56f6:	f7ff fe29 	bl	534c <update_cache>
	__asm__ volatile(
    56fa:	f384 8811 	msr	BASEPRI, r4
    56fe:	f3bf 8f6f 	isb	sy
}
    5702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5706:	f001 bb6f 	b.w	6de8 <z_reschedule_unlocked>
    570a:	bf00      	nop
    570c:	200008b8 	.word	0x200008b8

00005710 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5710:	4b02      	ldr	r3, [pc, #8]	; (571c <z_sched_init+0xc>)
    5712:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    5716:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    571a:	4770      	bx	lr
    571c:	200008b8 	.word	0x200008b8

00005720 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5722:	f04f 0320 	mov.w	r3, #32
    5726:	f3ef 8511 	mrs	r5, BASEPRI
    572a:	f383 8812 	msr	BASEPRI_MAX, r3
    572e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5732:	4919      	ldr	r1, [pc, #100]	; (5798 <z_impl_k_yield+0x78>)
    5734:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5736:	7b43      	ldrb	r3, [r0, #13]
    5738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    573c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    573e:	f001 fa92 	bl	6c66 <sys_dlist_remove>
	}
	queue_thread(_current);
    5742:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5744:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5746:	4608      	mov	r0, r1
    5748:	f062 027f 	orn	r2, r2, #127	; 0x7f
    574c:	735a      	strb	r2, [r3, #13]
    574e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    5752:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5754:	4282      	cmp	r2, r0
    5756:	bf08      	it	eq
    5758:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    575a:	b922      	cbnz	r2, 5766 <z_impl_k_yield+0x46>
	node->prev = tail;
    575c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    5760:	6023      	str	r3, [r4, #0]
	list->tail = node;
    5762:	620b      	str	r3, [r1, #32]
}
    5764:	e00c      	b.n	5780 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    5766:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    576a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    576e:	42be      	cmp	r6, r7
    5770:	d00e      	beq.n	5790 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5772:	42b7      	cmp	r7, r6
    5774:	dd0c      	ble.n	5790 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    5776:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5778:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    577c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    577e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5780:	2001      	movs	r0, #1
    5782:	f7ff fde3 	bl	534c <update_cache>
    5786:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    578c:	f7fc bfba 	b.w	2704 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5790:	42a2      	cmp	r2, r4
    5792:	d0e3      	beq.n	575c <z_impl_k_yield+0x3c>
    5794:	6812      	ldr	r2, [r2, #0]
    5796:	e7e0      	b.n	575a <z_impl_k_yield+0x3a>
    5798:	200008b8 	.word	0x200008b8

0000579c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    579c:	ea50 0301 	orrs.w	r3, r0, r1
{
    57a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57a4:	4605      	mov	r5, r0
    57a6:	460e      	mov	r6, r1
	if (ticks == 0) {
    57a8:	d103      	bne.n	57b2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    57aa:	f7ff ffb9 	bl	5720 <z_impl_k_yield>
		k_yield();
		return 0;
    57ae:	2000      	movs	r0, #0
    57b0:	e02c      	b.n	580c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    57b2:	1c83      	adds	r3, r0, #2
    57b4:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    57b8:	db2a      	blt.n	5810 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    57ba:	f001 fb45 	bl	6e48 <sys_clock_tick_get_32>
    57be:	182c      	adds	r4, r5, r0
    57c0:	f04f 0320 	mov.w	r3, #32
    57c4:	f3ef 8811 	mrs	r8, BASEPRI
    57c8:	f383 8812 	msr	BASEPRI_MAX, r3
    57cc:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    57d0:	4f11      	ldr	r7, [pc, #68]	; (5818 <z_tick_sleep+0x7c>)
    57d2:	4b12      	ldr	r3, [pc, #72]	; (581c <z_tick_sleep+0x80>)
    57d4:	68b8      	ldr	r0, [r7, #8]
    57d6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    57d8:	f7ff fe44 	bl	5464 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    57dc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    57de:	4910      	ldr	r1, [pc, #64]	; (5820 <z_tick_sleep+0x84>)
    57e0:	462a      	mov	r2, r5
    57e2:	4633      	mov	r3, r6
    57e4:	3018      	adds	r0, #24
    57e6:	f000 f8fd 	bl	59e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    57ea:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    57ec:	7b53      	ldrb	r3, [r2, #13]
    57ee:	f043 0310 	orr.w	r3, r3, #16
    57f2:	7353      	strb	r3, [r2, #13]
    57f4:	4640      	mov	r0, r8
    57f6:	f7fc ff85 	bl	2704 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    57fa:	f001 fb25 	bl	6e48 <sys_clock_tick_get_32>
    57fe:	1a20      	subs	r0, r4, r0
    5800:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5804:	2801      	cmp	r0, #1
    5806:	f173 0300 	sbcs.w	r3, r3, #0
    580a:	dbd0      	blt.n	57ae <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5810:	f06f 0401 	mvn.w	r4, #1
    5814:	1a24      	subs	r4, r4, r0
    5816:	e7d3      	b.n	57c0 <z_tick_sleep+0x24>
    5818:	200008b8 	.word	0x200008b8
    581c:	200008dc 	.word	0x200008dc
    5820:	00006d63 	.word	0x00006d63

00005824 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5824:	f1b1 3fff 	cmp.w	r1, #4294967295
    5828:	bf08      	it	eq
    582a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    582e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5830:	d106      	bne.n	5840 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5832:	4b08      	ldr	r3, [pc, #32]	; (5854 <z_impl_k_sleep+0x30>)
    5834:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5836:	f7ff ff09 	bl	564c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    583a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    583e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5840:	f7ff ffac 	bl	579c <z_tick_sleep>
    5844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5848:	fb80 0303 	smull	r0, r3, r0, r3
    584c:	0bc0      	lsrs	r0, r0, #15
    584e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5852:	e7f4      	b.n	583e <z_impl_k_sleep+0x1a>
    5854:	200008b8 	.word	0x200008b8

00005858 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5858:	4b01      	ldr	r3, [pc, #4]	; (5860 <z_impl_z_current_get+0x8>)
    585a:	6898      	ldr	r0, [r3, #8]
    585c:	4770      	bx	lr
    585e:	bf00      	nop
    5860:	200008b8 	.word	0x200008b8

00005864 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5868:	4604      	mov	r4, r0
    586a:	f04f 0320 	mov.w	r3, #32
    586e:	f3ef 8611 	mrs	r6, BASEPRI
    5872:	f383 8812 	msr	BASEPRI_MAX, r3
    5876:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    587a:	7b03      	ldrb	r3, [r0, #12]
    587c:	07d9      	lsls	r1, r3, #31
    587e:	d50b      	bpl.n	5898 <z_thread_abort+0x34>
	__asm__ volatile(
    5880:	f386 8811 	msr	BASEPRI, r6
    5884:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5888:	4040      	eors	r0, r0
    588a:	f380 8811 	msr	BASEPRI, r0
    588e:	f04f 0004 	mov.w	r0, #4
    5892:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5898:	7b43      	ldrb	r3, [r0, #13]
    589a:	071a      	lsls	r2, r3, #28
    589c:	d504      	bpl.n	58a8 <z_thread_abort+0x44>
    589e:	f386 8811 	msr	BASEPRI, r6
    58a2:	f3bf 8f6f 	isb	sy
    58a6:	e7f5      	b.n	5894 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    58a8:	f023 0220 	bic.w	r2, r3, #32
    58ac:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    58b0:	09d2      	lsrs	r2, r2, #7
    58b2:	d120      	bne.n	58f6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    58b4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    58b6:	68a3      	ldr	r3, [r4, #8]
    58b8:	b113      	cbz	r3, 58c0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    58ba:	4620      	mov	r0, r4
    58bc:	f001 f9db 	bl	6c76 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    58c0:	f104 0018 	add.w	r0, r4, #24
    58c4:	f001 fa9a 	bl	6dfc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    58c8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    58cc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    58d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58d2:	42bd      	cmp	r5, r7
    58d4:	d000      	beq.n	58d8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    58d6:	b9b5      	cbnz	r5, 5906 <z_thread_abort+0xa2>
		update_cache(1);
    58d8:	2001      	movs	r0, #1
    58da:	f7ff fd37 	bl	534c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    58de:	4b10      	ldr	r3, [pc, #64]	; (5920 <z_thread_abort+0xbc>)
    58e0:	689b      	ldr	r3, [r3, #8]
    58e2:	42a3      	cmp	r3, r4
    58e4:	d1db      	bne.n	589e <z_thread_abort+0x3a>
    58e6:	f3ef 8305 	mrs	r3, IPSR
    58ea:	2b00      	cmp	r3, #0
    58ec:	d1d7      	bne.n	589e <z_thread_abort+0x3a>
    58ee:	4630      	mov	r0, r6
    58f0:	f7fc ff08 	bl	2704 <arch_swap>
	return ret;
    58f4:	e7d3      	b.n	589e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58f6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    58fa:	f043 0308 	orr.w	r3, r3, #8
    58fe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5900:	f001 f9b1 	bl	6c66 <sys_dlist_remove>
}
    5904:	e7d7      	b.n	58b6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    5906:	4628      	mov	r0, r5
    5908:	f001 f9b5 	bl	6c76 <unpend_thread_no_timeout>
    590c:	f105 0018 	add.w	r0, r5, #24
    5910:	f001 fa74 	bl	6dfc <z_abort_timeout>
    5914:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5918:	4628      	mov	r0, r5
    591a:	f7ff fd6f 	bl	53fc <ready_thread>
    591e:	e7d7      	b.n	58d0 <z_thread_abort+0x6c>
    5920:	200008b8 	.word	0x200008b8

00005924 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5924:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5926:	4806      	ldr	r0, [pc, #24]	; (5940 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5928:	4a06      	ldr	r2, [pc, #24]	; (5944 <z_data_copy+0x20>)
    592a:	4907      	ldr	r1, [pc, #28]	; (5948 <z_data_copy+0x24>)
    592c:	1a12      	subs	r2, r2, r0
    592e:	f001 f972 	bl	6c16 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5932:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5936:	4a05      	ldr	r2, [pc, #20]	; (594c <z_data_copy+0x28>)
    5938:	4905      	ldr	r1, [pc, #20]	; (5950 <z_data_copy+0x2c>)
    593a:	4806      	ldr	r0, [pc, #24]	; (5954 <z_data_copy+0x30>)
    593c:	f001 b96b 	b.w	6c16 <z_early_memcpy>
    5940:	20000000 	.word	0x20000000
    5944:	200000fc 	.word	0x200000fc
    5948:	00007be4 	.word	0x00007be4
    594c:	00000000 	.word	0x00000000
    5950:	00007be4 	.word	0x00007be4
    5954:	20000000 	.word	0x20000000

00005958 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5958:	4b03      	ldr	r3, [pc, #12]	; (5968 <elapsed+0x10>)
    595a:	681b      	ldr	r3, [r3, #0]
    595c:	b90b      	cbnz	r3, 5962 <elapsed+0xa>
    595e:	f7fe badf 	b.w	3f20 <sys_clock_elapsed>
}
    5962:	2000      	movs	r0, #0
    5964:	4770      	bx	lr
    5966:	bf00      	nop
    5968:	200008e8 	.word	0x200008e8

0000596c <next_timeout>:

static int32_t next_timeout(void)
{
    596c:	b510      	push	{r4, lr}
	return list->head == list;
    596e:	4b0e      	ldr	r3, [pc, #56]	; (59a8 <next_timeout+0x3c>)
    5970:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5972:	429c      	cmp	r4, r3
    5974:	d104      	bne.n	5980 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5976:	f7ff ffef 	bl	5958 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    597a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    597e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    5980:	f7ff ffea 	bl	5958 <elapsed>
	if ((to == NULL) ||
    5984:	2c00      	cmp	r4, #0
    5986:	d0f8      	beq.n	597a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5988:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    598c:	1a1b      	subs	r3, r3, r0
    598e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    5992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5996:	f172 0100 	sbcs.w	r1, r2, #0
    599a:	daee      	bge.n	597a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    599c:	2a00      	cmp	r2, #0
    599e:	bfac      	ite	ge
    59a0:	4618      	movge	r0, r3
    59a2:	2000      	movlt	r0, #0
	return ret;
    59a4:	e7eb      	b.n	597e <next_timeout+0x12>
    59a6:	bf00      	nop
    59a8:	2000008c 	.word	0x2000008c

000059ac <remove_timeout>:
{
    59ac:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    59ae:	b170      	cbz	r0, 59ce <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    59b0:	4b0b      	ldr	r3, [pc, #44]	; (59e0 <remove_timeout+0x34>)
    59b2:	685b      	ldr	r3, [r3, #4]
    59b4:	4298      	cmp	r0, r3
    59b6:	d00a      	beq.n	59ce <remove_timeout+0x22>
    59b8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    59ba:	b143      	cbz	r3, 59ce <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    59bc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    59c0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    59c4:	1912      	adds	r2, r2, r4
    59c6:	eb41 0105 	adc.w	r1, r1, r5
    59ca:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    59ce:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    59d2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    59d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    59d6:	2300      	movs	r3, #0
	node->prev = NULL;
    59d8:	e9c0 3300 	strd	r3, r3, [r0]
}
    59dc:	bd30      	pop	{r4, r5, pc}
    59de:	bf00      	nop
    59e0:	2000008c 	.word	0x2000008c

000059e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59e4:	f1b3 3fff 	cmp.w	r3, #4294967295
    59e8:	bf08      	it	eq
    59ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    59ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59f0:	4604      	mov	r4, r0
    59f2:	461d      	mov	r5, r3
    59f4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59f6:	d05c      	beq.n	5ab2 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    59f8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    59fa:	f04f 0320 	mov.w	r3, #32
    59fe:	f3ef 8711 	mrs	r7, BASEPRI
    5a02:	f383 8812 	msr	BASEPRI_MAX, r3
    5a06:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5a0a:	3201      	adds	r2, #1
    5a0c:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    5a10:	da24      	bge.n	5a5c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5a12:	492d      	ldr	r1, [pc, #180]	; (5ac8 <z_add_timeout+0xe4>)
    5a14:	e9d1 2000 	ldrd	r2, r0, [r1]
    5a18:	f06f 0301 	mvn.w	r3, #1
    5a1c:	1a9b      	subs	r3, r3, r2
    5a1e:	f04f 32ff 	mov.w	r2, #4294967295
    5a22:	eb62 0000 	sbc.w	r0, r2, r0
    5a26:	1b9e      	subs	r6, r3, r6
    5a28:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    5a2c:	2e01      	cmp	r6, #1
    5a2e:	f170 0300 	sbcs.w	r3, r0, #0
    5a32:	da01      	bge.n	5a38 <z_add_timeout+0x54>
    5a34:	2601      	movs	r6, #1
    5a36:	2000      	movs	r0, #0
    5a38:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    5a3c:	4e23      	ldr	r6, [pc, #140]	; (5acc <z_add_timeout+0xe8>)
    5a3e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    5a42:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a44:	45b4      	cmp	ip, r6
    5a46:	bf08      	it	eq
    5a48:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    5a4c:	f1bc 0f00 	cmp.w	ip, #0
    5a50:	d10d      	bne.n	5a6e <z_add_timeout+0x8a>
	node->prev = tail;
    5a52:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    5a56:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5a58:	6074      	str	r4, [r6, #4]
}
    5a5a:	e01c      	b.n	5a96 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    5a5c:	f7ff ff7c 	bl	5958 <elapsed>
    5a60:	3601      	adds	r6, #1
    5a62:	f145 0500 	adc.w	r5, r5, #0
    5a66:	1836      	adds	r6, r6, r0
    5a68:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    5a6c:	e7e4      	b.n	5a38 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    5a6e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    5a72:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    5a76:	4293      	cmp	r3, r2
    5a78:	eb71 0e00 	sbcs.w	lr, r1, r0
    5a7c:	da1a      	bge.n	5ab4 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    5a7e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    5a80:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5a84:	eb60 0001 	sbc.w	r0, r0, r1
    5a88:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    5a8c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    5a90:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5a92:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    5a96:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a98:	42b3      	cmp	r3, r6
    5a9a:	d006      	beq.n	5aaa <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5a9c:	429c      	cmp	r4, r3
    5a9e:	d104      	bne.n	5aaa <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    5aa0:	f7ff ff64 	bl	596c <next_timeout>
    5aa4:	2100      	movs	r1, #0
    5aa6:	f7fe fa09 	bl	3ebc <sys_clock_set_timeout>
	__asm__ volatile(
    5aaa:	f387 8811 	msr	BASEPRI, r7
    5aae:	f3bf 8f6f 	isb	sy
		}
	}
}
    5ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    5ab4:	1a9b      	subs	r3, r3, r2
    5ab6:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    5aba:	45ac      	cmp	ip, r5
    5abc:	e9c4 3104 	strd	r3, r1, [r4, #16]
    5ac0:	d0c7      	beq.n	5a52 <z_add_timeout+0x6e>
    5ac2:	f8dc c000 	ldr.w	ip, [ip]
    5ac6:	e7c1      	b.n	5a4c <z_add_timeout+0x68>
    5ac8:	200006f8 	.word	0x200006f8
    5acc:	2000008c 	.word	0x2000008c

00005ad0 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    5ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    5ad4:	f04f 0320 	mov.w	r3, #32
    5ad8:	f3ef 8c11 	mrs	ip, BASEPRI
    5adc:	f383 8812 	msr	BASEPRI_MAX, r3
    5ae0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5ae4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 5b98 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5ae8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 5b9c <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    5aec:	4f2c      	ldr	r7, [pc, #176]	; (5ba0 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    5aee:	f8c9 0000 	str.w	r0, [r9]
    5af2:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    5af6:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5af8:	4550      	cmp	r0, sl
    5afa:	bf08      	it	eq
    5afc:	2000      	moveq	r0, #0
    5afe:	2500      	movs	r5, #0
		curr_tick += dt;
    5b00:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    5b04:	f8d9 3000 	ldr.w	r3, [r9]
    5b08:	46e0      	mov	r8, ip
    5b0a:	b380      	cbz	r0, 5b6e <sys_clock_announce+0x9e>
    5b0c:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    5b10:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    5b14:	42b3      	cmp	r3, r6
    5b16:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    5b1a:	da05      	bge.n	5b28 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    5b1c:	1af6      	subs	r6, r6, r3
    5b1e:	eb6c 040e 	sbc.w	r4, ip, lr
    5b22:	e9c0 6404 	strd	r6, r4, [r0, #16]
    5b26:	e022      	b.n	5b6e <sys_clock_announce+0x9e>
		curr_tick += dt;
    5b28:	18b2      	adds	r2, r6, r2
    5b2a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    5b2e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    5b32:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    5b36:	f7ff ff39 	bl	59ac <remove_timeout>
	__asm__ volatile(
    5b3a:	f388 8811 	msr	BASEPRI, r8
    5b3e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5b42:	6883      	ldr	r3, [r0, #8]
    5b44:	4798      	blx	r3
	__asm__ volatile(
    5b46:	f04f 0320 	mov.w	r3, #32
    5b4a:	f3ef 8811 	mrs	r8, BASEPRI
    5b4e:	f383 8812 	msr	BASEPRI_MAX, r3
    5b52:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    5b56:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    5b5a:	f8da 0000 	ldr.w	r0, [sl]
    5b5e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b60:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    5b62:	46c4      	mov	ip, r8
    5b64:	f8c9 3000 	str.w	r3, [r9]
    5b68:	d1ca      	bne.n	5b00 <sys_clock_announce+0x30>
		curr_tick += dt;
    5b6a:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    5b6e:	189a      	adds	r2, r3, r2
    5b70:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    5b74:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5b76:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    5b7a:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    5b7e:	f7ff fef5 	bl	596c <next_timeout>
    5b82:	4621      	mov	r1, r4
    5b84:	f7fe f99a 	bl	3ebc <sys_clock_set_timeout>
	__asm__ volatile(
    5b88:	f388 8811 	msr	BASEPRI, r8
    5b8c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    5b90:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    5b94:	f7ff bc96 	b.w	54c4 <z_time_slice>
    5b98:	2000008c 	.word	0x2000008c
    5b9c:	200008e8 	.word	0x200008e8
    5ba0:	200006f8 	.word	0x200006f8

00005ba4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5ba4:	b510      	push	{r4, lr}
	__asm__ volatile(
    5ba6:	f04f 0320 	mov.w	r3, #32
    5baa:	f3ef 8411 	mrs	r4, BASEPRI
    5bae:	f383 8812 	msr	BASEPRI_MAX, r3
    5bb2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    5bb6:	f7ff fecf 	bl	5958 <elapsed>
    5bba:	4a06      	ldr	r2, [pc, #24]	; (5bd4 <sys_clock_tick_get+0x30>)
    5bbc:	4603      	mov	r3, r0
    5bbe:	e9d2 0100 	ldrd	r0, r1, [r2]
    5bc2:	1818      	adds	r0, r3, r0
    5bc4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    5bc8:	f384 8811 	msr	BASEPRI, r4
    5bcc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5bd0:	bd10      	pop	{r4, pc}
    5bd2:	bf00      	nop
    5bd4:	200006f8 	.word	0x200006f8

00005bd8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bda:	4604      	mov	r4, r0
	__asm__ volatile(
    5bdc:	f04f 0320 	mov.w	r3, #32
    5be0:	f3ef 8711 	mrs	r7, BASEPRI
    5be4:	f383 8812 	msr	BASEPRI_MAX, r3
    5be8:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    5bec:	6802      	ldr	r2, [r0, #0]
    5bee:	b122      	cbz	r2, 5bfa <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    5bf0:	f387 8811 	msr	BASEPRI, r7
    5bf4:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5bfa:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    5bfe:	1c58      	adds	r0, r3, #1
    5c00:	f146 0100 	adc.w	r1, r6, #0
    5c04:	2802      	cmp	r0, #2
    5c06:	f171 0100 	sbcs.w	r1, r1, #0
    5c0a:	d327      	bcc.n	5c5c <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    5c0c:	2b01      	cmp	r3, #1
    5c0e:	f176 0100 	sbcs.w	r1, r6, #0
    5c12:	bfbc      	itt	lt
    5c14:	2301      	movlt	r3, #1
    5c16:	4616      	movlt	r6, r2
    5c18:	1e5d      	subs	r5, r3, #1
    5c1a:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    5c1e:	f001 f917 	bl	6e50 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    5c22:	3001      	adds	r0, #1
    5c24:	f141 0100 	adc.w	r1, r1, #0
    5c28:	1940      	adds	r0, r0, r5
    5c2a:	eb46 0101 	adc.w	r1, r6, r1
    5c2e:	2801      	cmp	r0, #1
    5c30:	f171 0100 	sbcs.w	r1, r1, #0
    5c34:	db3a      	blt.n	5cac <z_timer_expiration_handler+0xd4>
    5c36:	f001 f90b 	bl	6e50 <z_impl_k_uptime_ticks>
    5c3a:	3001      	adds	r0, #1
    5c3c:	f141 0100 	adc.w	r1, r1, #0
    5c40:	f06f 0201 	mvn.w	r2, #1
    5c44:	1940      	adds	r0, r0, r5
    5c46:	eb46 0301 	adc.w	r3, r6, r1
    5c4a:	1a12      	subs	r2, r2, r0
    5c4c:	f04f 31ff 	mov.w	r1, #4294967295
    5c50:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5c54:	4918      	ldr	r1, [pc, #96]	; (5cb8 <z_timer_expiration_handler+0xe0>)
    5c56:	4620      	mov	r0, r4
    5c58:	f7ff fec4 	bl	59e4 <z_add_timeout>
	timer->status += 1U;
    5c5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c5e:	3301      	adds	r3, #1
    5c60:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    5c62:	6a23      	ldr	r3, [r4, #32]
    5c64:	b173      	cbz	r3, 5c84 <z_timer_expiration_handler+0xac>
    5c66:	f387 8811 	msr	BASEPRI, r7
    5c6a:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    5c6e:	6a23      	ldr	r3, [r4, #32]
    5c70:	4620      	mov	r0, r4
    5c72:	4798      	blx	r3
	__asm__ volatile(
    5c74:	f04f 0320 	mov.w	r3, #32
    5c78:	f3ef 8711 	mrs	r7, BASEPRI
    5c7c:	f383 8812 	msr	BASEPRI_MAX, r3
    5c80:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5c84:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c88:	42a5      	cmp	r5, r4
    5c8a:	d0b1      	beq.n	5bf0 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    5c8c:	2d00      	cmp	r5, #0
    5c8e:	d0af      	beq.n	5bf0 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    5c90:	4628      	mov	r0, r5
    5c92:	f001 f832 	bl	6cfa <z_unpend_thread_no_timeout>
    5c96:	2300      	movs	r3, #0
    5c98:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    5c9a:	f387 8811 	msr	BASEPRI, r7
    5c9e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5ca2:	4628      	mov	r0, r5
}
    5ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    5ca8:	f001 b817 	b.w	6cda <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    5cac:	f06f 0201 	mvn.w	r2, #1
    5cb0:	f04f 33ff 	mov.w	r3, #4294967295
    5cb4:	e7ce      	b.n	5c54 <z_timer_expiration_handler+0x7c>
    5cb6:	bf00      	nop
    5cb8:	00005bd9 	.word	0x00005bd9

00005cbc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
    5cc4:	bf08      	it	eq
    5cc6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    5cca:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    5cce:	4605      	mov	r5, r0
    5cd0:	461c      	mov	r4, r3
    5cd2:	4691      	mov	r9, r2
    5cd4:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5cd6:	d01c      	beq.n	5d12 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5cd8:	1c53      	adds	r3, r2, #1
    5cda:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    5cde:	db09      	blt.n	5cf4 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5ce0:	2a01      	cmp	r2, #1
    5ce2:	f174 0300 	sbcs.w	r3, r4, #0
    5ce6:	bfbc      	itt	lt
    5ce8:	2201      	movlt	r2, #1
    5cea:	2400      	movlt	r4, #0
    5cec:	f112 39ff 	adds.w	r9, r2, #4294967295
    5cf0:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    5cf4:	4628      	mov	r0, r5
    5cf6:	f001 f881 	bl	6dfc <z_abort_timeout>
	timer->period = period;
    5cfa:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    5cfe:	2300      	movs	r3, #0
    5d00:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5d02:	464a      	mov	r2, r9
    5d04:	4643      	mov	r3, r8
    5d06:	4628      	mov	r0, r5
    5d08:	4903      	ldr	r1, [pc, #12]	; (5d18 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    5d0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5d0e:	f7ff be69 	b.w	59e4 <z_add_timeout>
}
    5d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d16:	bf00      	nop
    5d18:	00005bd9 	.word	0x00005bd9

00005d1c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    5d1c:	4801      	ldr	r0, [pc, #4]	; (5d24 <boot_banner+0x8>)
    5d1e:	f000 b88d 	b.w	5e3c <printk>
    5d22:	bf00      	nop
    5d24:	00007bb4 	.word	0x00007bb4

00005d28 <gpio_pin_configure_dt>:
{
    5d28:	b4f0      	push	{r4, r5, r6, r7}
    5d2a:	4603      	mov	r3, r0
    5d2c:	460a      	mov	r2, r1
				  spec->pin,
    5d2e:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    5d30:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    5d32:	6800      	ldr	r0, [r0, #0]
    5d34:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5d36:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
    5d38:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    5d3a:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5d3c:	d506      	bpl.n	5d4c <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5d3e:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    5d42:	d003      	beq.n	5d4c <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5d44:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5d46:	bf48      	it	mi
    5d48:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5d4c:	6834      	ldr	r4, [r6, #0]
    5d4e:	2501      	movs	r5, #1
    5d50:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5d52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5d56:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5d58:	bf4c      	ite	mi
    5d5a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5d5c:	43ac      	bicpl	r4, r5
    5d5e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    5d60:	683b      	ldr	r3, [r7, #0]
}
    5d62:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    5d64:	4718      	bx	r3

00005d66 <cbpprintf_external>:
{
    5d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d6a:	4606      	mov	r6, r0
    5d6c:	460d      	mov	r5, r1
    5d6e:	4617      	mov	r7, r2
	if (buf == NULL) {
    5d70:	4698      	mov	r8, r3
    5d72:	b32b      	cbz	r3, 5dc0 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    5d74:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    5d78:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    5d7c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    5d7e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    5d80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    5d84:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    5d88:	441c      	add	r4, r3
    5d8a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    5d8c:	f04f 0a00 	mov.w	sl, #0
    5d90:	45ca      	cmp	sl, r9
    5d92:	d309      	bcc.n	5da8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    5d94:	f8d8 2004 	ldr.w	r2, [r8, #4]
    5d98:	f108 0308 	add.w	r3, r8, #8
    5d9c:	4639      	mov	r1, r7
    5d9e:	4630      	mov	r0, r6
    5da0:	46ac      	mov	ip, r5
}
    5da2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    5da6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    5da8:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    5dac:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    5db0:	4620      	mov	r0, r4
    5db2:	f000 fcbc 	bl	672e <strlen>
    5db6:	3001      	adds	r0, #1
    5db8:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    5dba:	f10a 0a01 	add.w	sl, sl, #1
    5dbe:	e7e7      	b.n	5d90 <cbpprintf_external+0x2a>
}
    5dc0:	f06f 0015 	mvn.w	r0, #21
    5dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005dc8 <is_ptr>:
{
    5dc8:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    5dca:	2500      	movs	r5, #0
{
    5dcc:	4602      	mov	r2, r0
	bool mod = false;
    5dce:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    5dd0:	4614      	mov	r4, r2
    5dd2:	f814 3b01 	ldrb.w	r3, [r4], #1
    5dd6:	b90b      	cbnz	r3, 5ddc <is_ptr+0x14>
					return false;
    5dd8:	4618      	mov	r0, r3
    5dda:	e009      	b.n	5df0 <is_ptr+0x28>
		if (mod) {
    5ddc:	b198      	cbz	r0, 5e06 <is_ptr+0x3e>
			if (cnt == n) {
    5dde:	428d      	cmp	r5, r1
    5de0:	d107      	bne.n	5df2 <is_ptr+0x2a>
				if (c == 'p') {
    5de2:	2b70      	cmp	r3, #112	; 0x70
    5de4:	d004      	beq.n	5df0 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    5de6:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    5dea:	2a3a      	cmp	r2, #58	; 0x3a
    5dec:	d80b      	bhi.n	5e06 <is_ptr+0x3e>
					return false;
    5dee:	2000      	movs	r0, #0
}
    5df0:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    5df2:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    5df6:	2e3a      	cmp	r6, #58	; 0x3a
    5df8:	d805      	bhi.n	5e06 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    5dfa:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    5dfc:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    5dfe:	1c94      	adds	r4, r2, #2
    5e00:	2b00      	cmp	r3, #0
    5e02:	d0e9      	beq.n	5dd8 <is_ptr+0x10>
    5e04:	2000      	movs	r0, #0
		if (c == '%') {
    5e06:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    5e08:	bf08      	it	eq
    5e0a:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    5e0e:	4622      	mov	r2, r4
    5e10:	e7de      	b.n	5dd0 <is_ptr+0x8>

00005e12 <arch_printk_char_out>:
}
    5e12:	2000      	movs	r0, #0
    5e14:	4770      	bx	lr

00005e16 <str_out>:
{
    5e16:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5e18:	688a      	ldr	r2, [r1, #8]
    5e1a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    5e1c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    5e1e:	b114      	cbz	r4, 5e26 <str_out+0x10>
    5e20:	684b      	ldr	r3, [r1, #4]
    5e22:	4293      	cmp	r3, r2
    5e24:	dc01      	bgt.n	5e2a <str_out+0x14>
		ctx->count++;
    5e26:	608d      	str	r5, [r1, #8]
}
    5e28:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    5e2a:	3b01      	subs	r3, #1
    5e2c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    5e2e:	bf08      	it	eq
    5e30:	2200      	moveq	r2, #0
    5e32:	608d      	str	r5, [r1, #8]
    5e34:	bf0c      	ite	eq
    5e36:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    5e38:	54a0      	strbne	r0, [r4, r2]
    5e3a:	e7f5      	b.n	5e28 <str_out+0x12>

00005e3c <printk>:
{
    5e3c:	b40f      	push	{r0, r1, r2, r3}
    5e3e:	b507      	push	{r0, r1, r2, lr}
    5e40:	a904      	add	r1, sp, #16
    5e42:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    5e46:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    5e48:	f000 fbc8 	bl	65dc <z_log_vprintk>
}
    5e4c:	b003      	add	sp, #12
    5e4e:	f85d eb04 	ldr.w	lr, [sp], #4
    5e52:	b004      	add	sp, #16
    5e54:	4770      	bx	lr

00005e56 <snprintk>:
{
    5e56:	b40c      	push	{r2, r3}
    5e58:	b507      	push	{r0, r1, r2, lr}
    5e5a:	ab04      	add	r3, sp, #16
    5e5c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    5e60:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    5e62:	f7fa ff5d 	bl	d20 <vsnprintk>
}
    5e66:	b003      	add	sp, #12
    5e68:	f85d eb04 	ldr.w	lr, [sp], #4
    5e6c:	b002      	add	sp, #8
    5e6e:	4770      	bx	lr

00005e70 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5e70:	4604      	mov	r4, r0
    5e72:	b508      	push	{r3, lr}
    5e74:	4608      	mov	r0, r1
    5e76:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5e78:	461a      	mov	r2, r3
    5e7a:	47a0      	blx	r4
	return z_impl_z_current_get();
    5e7c:	f7ff fcec 	bl	5858 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    5e80:	f7fd f88a 	bl	2f98 <z_impl_k_thread_abort>

00005e84 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5e84:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5e86:	f013 0307 	ands.w	r3, r3, #7
    5e8a:	d105      	bne.n	5e98 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5e8c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5e8e:	2b00      	cmp	r3, #0
    5e90:	bf0c      	ite	eq
    5e92:	2000      	moveq	r0, #0
    5e94:	2003      	movne	r0, #3
    5e96:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5e98:	2b02      	cmp	r3, #2
    5e9a:	d105      	bne.n	5ea8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5e9c:	8b40      	ldrh	r0, [r0, #26]
    5e9e:	fab0 f080 	clz	r0, r0
    5ea2:	0940      	lsrs	r0, r0, #5
    5ea4:	0080      	lsls	r0, r0, #2
    5ea6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5ea8:	2b01      	cmp	r3, #1
    5eaa:	d105      	bne.n	5eb8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5eac:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5eae:	2b00      	cmp	r3, #0
    5eb0:	bf0c      	ite	eq
    5eb2:	2000      	moveq	r0, #0
    5eb4:	2005      	movne	r0, #5
    5eb6:	4770      	bx	lr
	int evt = EVT_NOP;
    5eb8:	2000      	movs	r0, #0
}
    5eba:	4770      	bx	lr

00005ebc <validate_args>:
{
    5ebc:	b510      	push	{r4, lr}
    5ebe:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5ec0:	b100      	cbz	r0, 5ec4 <validate_args+0x8>
    5ec2:	b911      	cbnz	r1, 5eca <validate_args+0xe>
		return -EINVAL;
    5ec4:	f06f 0015 	mvn.w	r0, #21
}
    5ec8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    5eca:	1d08      	adds	r0, r1, #4
    5ecc:	f000 f895 	bl	5ffa <sys_notify_validate>
	if ((rv == 0)
    5ed0:	2800      	cmp	r0, #0
    5ed2:	d1f9      	bne.n	5ec8 <validate_args+0xc>
	    && ((cli->notify.flags
    5ed4:	68a3      	ldr	r3, [r4, #8]
    5ed6:	2b03      	cmp	r3, #3
    5ed8:	d9f6      	bls.n	5ec8 <validate_args+0xc>
    5eda:	e7f3      	b.n	5ec4 <validate_args+0x8>

00005edc <notify_one>:
{
    5edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ee0:	460d      	mov	r5, r1
    5ee2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5ee4:	4619      	mov	r1, r3
    5ee6:	1d28      	adds	r0, r5, #4
{
    5ee8:	4690      	mov	r8, r2
    5eea:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5eec:	f000 f896 	bl	601c <sys_notify_finalize>
	if (cb) {
    5ef0:	4604      	mov	r4, r0
    5ef2:	b138      	cbz	r0, 5f04 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5ef4:	4633      	mov	r3, r6
    5ef6:	4642      	mov	r2, r8
    5ef8:	4629      	mov	r1, r5
    5efa:	4638      	mov	r0, r7
    5efc:	46a4      	mov	ip, r4
}
    5efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5f02:	4760      	bx	ip
}
    5f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f08 <transition_complete>:
{
    5f08:	b410      	push	{r4}
	__asm__ volatile(
    5f0a:	f04f 0420 	mov.w	r4, #32
    5f0e:	f3ef 8211 	mrs	r2, BASEPRI
    5f12:	f384 8812 	msr	BASEPRI_MAX, r4
    5f16:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5f1a:	6141      	str	r1, [r0, #20]
}
    5f1c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5f1e:	2101      	movs	r1, #1
    5f20:	f7fa bf14 	b.w	d4c <process_event>

00005f24 <onoff_manager_init>:
{
    5f24:	b538      	push	{r3, r4, r5, lr}
    5f26:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5f28:	4605      	mov	r5, r0
    5f2a:	b158      	cbz	r0, 5f44 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5f2c:	b151      	cbz	r1, 5f44 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5f2e:	680b      	ldr	r3, [r1, #0]
    5f30:	b143      	cbz	r3, 5f44 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5f32:	684b      	ldr	r3, [r1, #4]
    5f34:	b133      	cbz	r3, 5f44 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5f36:	221c      	movs	r2, #28
    5f38:	2100      	movs	r1, #0
    5f3a:	f000 fc13 	bl	6764 <memset>
    5f3e:	612c      	str	r4, [r5, #16]
	return 0;
    5f40:	2000      	movs	r0, #0
}
    5f42:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5f44:	f06f 0015 	mvn.w	r0, #21
    5f48:	e7fb      	b.n	5f42 <onoff_manager_init+0x1e>

00005f4a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5f4a:	b570      	push	{r4, r5, r6, lr}
    5f4c:	4605      	mov	r5, r0
    5f4e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5f50:	f7ff ffb4 	bl	5ebc <validate_args>

	if (rv < 0) {
    5f54:	1e04      	subs	r4, r0, #0
    5f56:	db15      	blt.n	5f84 <onoff_request+0x3a>
    5f58:	f04f 0320 	mov.w	r3, #32
    5f5c:	f3ef 8211 	mrs	r2, BASEPRI
    5f60:	f383 8812 	msr	BASEPRI_MAX, r3
    5f64:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5f68:	8b6b      	ldrh	r3, [r5, #26]
    5f6a:	8b2c      	ldrh	r4, [r5, #24]
    5f6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5f70:	428b      	cmp	r3, r1
    5f72:	f004 0407 	and.w	r4, r4, #7
    5f76:	d107      	bne.n	5f88 <onoff_request+0x3e>
	__asm__ volatile(
    5f78:	f382 8811 	msr	BASEPRI, r2
    5f7c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    5f80:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    5f84:	4620      	mov	r0, r4
    5f86:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5f88:	2c02      	cmp	r4, #2
    5f8a:	d10c      	bne.n	5fa6 <onoff_request+0x5c>
		mgr->refs += 1U;
    5f8c:	3301      	adds	r3, #1
    5f8e:	836b      	strh	r3, [r5, #26]
    5f90:	f382 8811 	msr	BASEPRI, r2
    5f94:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    5f98:	2300      	movs	r3, #0
    5f9a:	4622      	mov	r2, r4
    5f9c:	4631      	mov	r1, r6
    5f9e:	4628      	mov	r0, r5
    5fa0:	f7ff ff9c 	bl	5edc <notify_one>
    5fa4:	e7ee      	b.n	5f84 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    5fa6:	2c06      	cmp	r4, #6
    5fa8:	d814      	bhi.n	5fd4 <onoff_request+0x8a>
    5faa:	e8df f004 	tbb	[pc, r4]
    5fae:	1304      	.short	0x1304
    5fb0:	1a041313 	.word	0x1a041313
    5fb4:	04          	.byte	0x04
    5fb5:	00          	.byte	0x00
	parent->next = child;
    5fb6:	2300      	movs	r3, #0
    5fb8:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    5fba:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5fbc:	b93b      	cbnz	r3, 5fce <onoff_request+0x84>
	list->head = node;
    5fbe:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    5fc2:	b9ac      	cbnz	r4, 5ff0 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    5fc4:	2102      	movs	r1, #2
    5fc6:	4628      	mov	r0, r5
    5fc8:	f7fa fec0 	bl	d4c <process_event>
    5fcc:	e7da      	b.n	5f84 <onoff_request+0x3a>
	parent->next = child;
    5fce:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5fd0:	606e      	str	r6, [r5, #4]
}
    5fd2:	e7f6      	b.n	5fc2 <onoff_request+0x78>
    5fd4:	f382 8811 	msr	BASEPRI, r2
    5fd8:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    5fdc:	f06f 0404 	mvn.w	r4, #4
    5fe0:	e7d0      	b.n	5f84 <onoff_request+0x3a>
    5fe2:	f382 8811 	msr	BASEPRI, r2
    5fe6:	f3bf 8f6f 	isb	sy
    5fea:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5fee:	e7c9      	b.n	5f84 <onoff_request+0x3a>
    5ff0:	f382 8811 	msr	BASEPRI, r2
    5ff4:	f3bf 8f6f 	isb	sy
		if (notify) {
    5ff8:	e7c4      	b.n	5f84 <onoff_request+0x3a>

00005ffa <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5ffa:	4603      	mov	r3, r0
    5ffc:	b158      	cbz	r0, 6016 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5ffe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6000:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6004:	2a01      	cmp	r2, #1
    6006:	d003      	beq.n	6010 <sys_notify_validate+0x16>
    6008:	2a03      	cmp	r2, #3
    600a:	d104      	bne.n	6016 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    600c:	6802      	ldr	r2, [r0, #0]
    600e:	b112      	cbz	r2, 6016 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6010:	2000      	movs	r0, #0
    6012:	6098      	str	r0, [r3, #8]
    6014:	4770      	bx	lr
    6016:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    601a:	4770      	bx	lr

0000601c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    601c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    601e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6020:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6024:	2a03      	cmp	r2, #3
    6026:	f04f 0200 	mov.w	r2, #0
{
    602a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    602c:	bf0c      	ite	eq
    602e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6030:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6032:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6034:	4770      	bx	lr

00006036 <encode_uint>:
{
    6036:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    603a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    603c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    603e:	2b6f      	cmp	r3, #111	; 0x6f
{
    6040:	4680      	mov	r8, r0
    6042:	460f      	mov	r7, r1
    6044:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6046:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    604a:	d029      	beq.n	60a0 <encode_uint+0x6a>
    604c:	d824      	bhi.n	6098 <encode_uint+0x62>
		return 10;
    604e:	2b58      	cmp	r3, #88	; 0x58
    6050:	bf0c      	ite	eq
    6052:	2610      	moveq	r6, #16
    6054:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    6056:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    605a:	4632      	mov	r2, r6
    605c:	2300      	movs	r3, #0
    605e:	4640      	mov	r0, r8
    6060:	4639      	mov	r1, r7
    6062:	f7fa f83b 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6066:	2a09      	cmp	r2, #9
    6068:	b2d4      	uxtb	r4, r2
    606a:	d81e      	bhi.n	60aa <encode_uint+0x74>
    606c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    606e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6070:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6072:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6076:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    607a:	d301      	bcc.n	6080 <encode_uint+0x4a>
    607c:	45d1      	cmp	r9, sl
    607e:	d811      	bhi.n	60a4 <encode_uint+0x6e>
	if (conv->flag_hash) {
    6080:	782b      	ldrb	r3, [r5, #0]
    6082:	069b      	lsls	r3, r3, #26
    6084:	d505      	bpl.n	6092 <encode_uint+0x5c>
		if (radix == 8) {
    6086:	2e08      	cmp	r6, #8
    6088:	d115      	bne.n	60b6 <encode_uint+0x80>
			conv->altform_0 = true;
    608a:	78ab      	ldrb	r3, [r5, #2]
    608c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6090:	70ab      	strb	r3, [r5, #2]
}
    6092:	4648      	mov	r0, r9
    6094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6098:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    609c:	2b70      	cmp	r3, #112	; 0x70
    609e:	e7d7      	b.n	6050 <encode_uint+0x1a>
	switch (specifier) {
    60a0:	2608      	movs	r6, #8
    60a2:	e7d8      	b.n	6056 <encode_uint+0x20>
		value /= radix;
    60a4:	4680      	mov	r8, r0
    60a6:	460f      	mov	r7, r1
    60a8:	e7d7      	b.n	605a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    60aa:	f1bb 0f19 	cmp.w	fp, #25
    60ae:	bf94      	ite	ls
    60b0:	3437      	addls	r4, #55	; 0x37
    60b2:	3457      	addhi	r4, #87	; 0x57
    60b4:	e7db      	b.n	606e <encode_uint+0x38>
		} else if (radix == 16) {
    60b6:	2e10      	cmp	r6, #16
    60b8:	d1eb      	bne.n	6092 <encode_uint+0x5c>
			conv->altform_0c = true;
    60ba:	78ab      	ldrb	r3, [r5, #2]
    60bc:	f043 0310 	orr.w	r3, r3, #16
    60c0:	e7e6      	b.n	6090 <encode_uint+0x5a>

000060c2 <outs>:
{
    60c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60c6:	4607      	mov	r7, r0
    60c8:	4688      	mov	r8, r1
    60ca:	4615      	mov	r5, r2
    60cc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    60ce:	4614      	mov	r4, r2
    60d0:	42b4      	cmp	r4, r6
    60d2:	d305      	bcc.n	60e0 <outs+0x1e>
    60d4:	b10e      	cbz	r6, 60da <outs+0x18>
	return (int)count;
    60d6:	1b60      	subs	r0, r4, r5
    60d8:	e008      	b.n	60ec <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    60da:	7823      	ldrb	r3, [r4, #0]
    60dc:	2b00      	cmp	r3, #0
    60de:	d0fa      	beq.n	60d6 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    60e0:	f814 0b01 	ldrb.w	r0, [r4], #1
    60e4:	4641      	mov	r1, r8
    60e6:	47b8      	blx	r7
		if (rc < 0) {
    60e8:	2800      	cmp	r0, #0
    60ea:	daf1      	bge.n	60d0 <outs+0xe>
}
    60ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000060f0 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    60f0:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    60f2:	6903      	ldr	r3, [r0, #16]
{
    60f4:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    60f6:	f013 0008 	ands.w	r0, r3, #8
    60fa:	d109      	bne.n	6110 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    60fc:	6813      	ldr	r3, [r2, #0]
    60fe:	68d4      	ldr	r4, [r2, #12]
    6100:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    6102:	bf97      	itett	ls
    6104:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    6106:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    6108:	1ad3      	subls	r3, r2, r3

	return true;
    610a:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    610c:	600b      	str	r3, [r1, #0]
}
    610e:	bd10      	pop	{r4, pc}
    6110:	2300      	movs	r3, #0
		return false;
    6112:	4618      	mov	r0, r3
    6114:	e7fa      	b.n	610c <free_space+0x1c>

00006116 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    6116:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    6118:	a901      	add	r1, sp, #4
{
    611a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    611c:	f7ff ffe8 	bl	60f0 <free_space>
    6120:	b120      	cbz	r0, 612c <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    6122:	9b01      	ldr	r3, [sp, #4]
    6124:	68e2      	ldr	r2, [r4, #12]
    6126:	3b01      	subs	r3, #1
    6128:	4413      	add	r3, r2
    612a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    612c:	6a20      	ldr	r0, [r4, #32]
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	1ac0      	subs	r0, r0, r3
}
    6132:	3801      	subs	r0, #1
    6134:	b002      	add	sp, #8
    6136:	bd10      	pop	{r4, pc}

00006138 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    6138:	b510      	push	{r4, lr}
    613a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    613c:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    613e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    6140:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6142:	07d2      	lsls	r2, r2, #31
    6144:	d502      	bpl.n	614c <idx_inc+0x14>
		return i & (buffer->size - 1);
    6146:	3b01      	subs	r3, #1
    6148:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    614a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    614c:	4298      	cmp	r0, r3
    614e:	bf28      	it	cs
    6150:	1ac0      	subcs	r0, r0, r3
    6152:	e7fa      	b.n	614a <idx_inc+0x12>

00006154 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    6154:	b510      	push	{r4, lr}
    6156:	4604      	mov	r4, r0
    6158:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    615a:	68c1      	ldr	r1, [r0, #12]
    615c:	f7ff ffec 	bl	6138 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    6160:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6162:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    6164:	f023 0308 	bic.w	r3, r3, #8
    6168:	6123      	str	r3, [r4, #16]
}
    616a:	bd10      	pop	{r4, pc}

0000616c <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    616c:	b538      	push	{r3, r4, r5, lr}
    616e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6170:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    6172:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6174:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    6176:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    617a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    617e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6180:	6801      	ldr	r1, [r0, #0]
    6182:	462a      	mov	r2, r5
    6184:	f7ff ffd8 	bl	6138 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    6188:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    618a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    618c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    618e:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    6190:	bf02      	ittt	eq
    6192:	6923      	ldreq	r3, [r4, #16]
    6194:	f043 0308 	orreq.w	r3, r3, #8
    6198:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    619a:	462a      	mov	r2, r5
    619c:	4620      	mov	r0, r4
    619e:	f7ff ffcb 	bl	6138 <idx_inc>
    61a2:	6060      	str	r0, [r4, #4]
}
    61a4:	bd38      	pop	{r3, r4, r5, pc}

000061a6 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    61a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    61aa:	68c7      	ldr	r7, [r0, #12]
    61ac:	69c6      	ldr	r6, [r0, #28]
{
    61ae:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    61b0:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    61b4:	f003 0303 	and.w	r3, r3, #3
    61b8:	2b02      	cmp	r3, #2
{
    61ba:	4604      	mov	r4, r0
    61bc:	4688      	mov	r8, r1
    61be:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    61c0:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    61c4:	f04f 0300 	mov.w	r3, #0
    61c8:	d009      	beq.n	61de <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    61ca:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    61cc:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    61d0:	6923      	ldr	r3, [r4, #16]
    61d2:	0799      	lsls	r1, r3, #30
    61d4:	d410      	bmi.n	61f8 <drop_item_locked+0x52>
		return false;
    61d6:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    61d8:	b003      	add	sp, #12
    61da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    61de:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    61e2:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    61e4:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    61e6:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    61ea:	d0f1      	beq.n	61d0 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    61ec:	f7ff ffb2 	bl	6154 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    61f0:	68e3      	ldr	r3, [r4, #12]
    61f2:	60a3      	str	r3, [r4, #8]
		return true;
    61f4:	2001      	movs	r0, #1
    61f6:	e7ef      	b.n	61d8 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    61f8:	69a3      	ldr	r3, [r4, #24]
    61fa:	4650      	mov	r0, sl
    61fc:	4798      	blx	r3
	return item->hdr.valid;
    61fe:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    6202:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    6204:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    6206:	d5e6      	bpl.n	61d6 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    6208:	f013 0302 	ands.w	r3, r3, #2
    620c:	d01d      	beq.n	624a <drop_item_locked+0xa4>
		if (free_wlen) {
    620e:	f1b8 0f00 	cmp.w	r8, #0
    6212:	d003      	beq.n	621c <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    6214:	4641      	mov	r1, r8
    6216:	4620      	mov	r0, r4
    6218:	f7ff ffa8 	bl	616c <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    621c:	6861      	ldr	r1, [r4, #4]
    621e:	462a      	mov	r2, r5
    6220:	4620      	mov	r0, r4
    6222:	f7ff ff89 	bl	6138 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    6226:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    622a:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    622c:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    622e:	d104      	bne.n	623a <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    6230:	462a      	mov	r2, r5
    6232:	4620      	mov	r0, r4
    6234:	f7ff ff80 	bl	6138 <idx_inc>
    6238:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    623a:	68a3      	ldr	r3, [r4, #8]
    623c:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    623e:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    6240:	6923      	ldr	r3, [r4, #16]
    6242:	f043 0308 	orr.w	r3, r3, #8
    6246:	6123      	str	r3, [r4, #16]
    6248:	e7d4      	b.n	61f4 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    624a:	4601      	mov	r1, r0
    624c:	4620      	mov	r0, r4
    624e:	9301      	str	r3, [sp, #4]
    6250:	f7ff ff80 	bl	6154 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    6254:	68e2      	ldr	r2, [r4, #12]
    6256:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    6258:	f1b8 0f00 	cmp.w	r8, #0
    625c:	d004      	beq.n	6268 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    625e:	6821      	ldr	r1, [r4, #0]
    6260:	69e2      	ldr	r2, [r4, #28]
    6262:	9b01      	ldr	r3, [sp, #4]
    6264:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    6268:	eb05 0208 	add.w	r2, r5, r8
    626c:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    6270:	6821      	ldr	r1, [r4, #0]
    6272:	4620      	mov	r0, r4
    6274:	f7ff ff60 	bl	6138 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    6278:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    627a:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    627c:	f043 0308 	orr.w	r3, r3, #8
    6280:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    6282:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    6286:	f36f 0300 	bfc	r3, #0, #1
    628a:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    628e:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    6292:	e7af      	b.n	61f4 <drop_item_locked+0x4e>

00006294 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    6294:	b570      	push	{r4, r5, r6, lr}
    6296:	4604      	mov	r4, r0
    6298:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    629a:	f7ff ff4d 	bl	6138 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    629e:	6823      	ldr	r3, [r4, #0]
    62a0:	4283      	cmp	r3, r0
    62a2:	d105      	bne.n	62b0 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    62a4:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    62a6:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    62a8:	f023 0308 	bic.w	r3, r3, #8
    62ac:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    62ae:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    62b0:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    62b2:	00ab      	lsls	r3, r5, #2
    62b4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    62b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    62bc:	4620      	mov	r0, r4
    62be:	6861      	ldr	r1, [r4, #4]
    62c0:	462a      	mov	r2, r5
    62c2:	f7ff ff39 	bl	6138 <idx_inc>
    62c6:	6060      	str	r0, [r4, #4]
    62c8:	e7f1      	b.n	62ae <post_drop_action+0x1a>

000062ca <max_utilization_update>:
{
    62ca:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    62cc:	6903      	ldr	r3, [r0, #16]
    62ce:	075b      	lsls	r3, r3, #29
{
    62d0:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    62d2:	d506      	bpl.n	62e2 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    62d4:	6a45      	ldr	r5, [r0, #36]	; 0x24
    62d6:	f7ff ff1e 	bl	6116 <get_usage>
    62da:	4285      	cmp	r5, r0
    62dc:	bf2c      	ite	cs
    62de:	6265      	strcs	r5, [r4, #36]	; 0x24
    62e0:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    62e2:	bd38      	pop	{r3, r4, r5, pc}

000062e4 <mpsc_pbuf_init>:
{
    62e4:	b538      	push	{r3, r4, r5, lr}
    62e6:	460d      	mov	r5, r1
    62e8:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    62ea:	221c      	movs	r2, #28
    62ec:	2100      	movs	r1, #0
    62ee:	f000 fa39 	bl	6764 <memset>
	buffer->get_wlen = cfg->get_wlen;
    62f2:	68eb      	ldr	r3, [r5, #12]
    62f4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    62f6:	68ab      	ldr	r3, [r5, #8]
    62f8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    62fa:	682b      	ldr	r3, [r5, #0]
    62fc:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    62fe:	686b      	ldr	r3, [r5, #4]
    6300:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    6302:	2200      	movs	r2, #0
    6304:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    6306:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    6308:	b123      	cbz	r3, 6314 <mpsc_pbuf_init+0x30>
    630a:	1e59      	subs	r1, r3, #1
    630c:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    630e:	bf08      	it	eq
    6310:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    6314:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6316:	2201      	movs	r2, #1
    6318:	f104 0028 	add.w	r0, r4, #40	; 0x28
    631c:	2100      	movs	r1, #0
}
    631e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6322:	f000 bc94 	b.w	6c4e <z_impl_k_sem_init>

00006326 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    6326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    632a:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    632c:	2500      	movs	r5, #0
{
    632e:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    6330:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    6332:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    6334:	428b      	cmp	r3, r1
{
    6336:	4604      	mov	r4, r0
    6338:	460e      	mov	r6, r1
    633a:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    633c:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    633e:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    6340:	d33a      	bcc.n	63b8 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    6342:	f04f 0320 	mov.w	r3, #32
    6346:	f3ef 8b11 	mrs	fp, BASEPRI
    634a:	f383 8812 	msr	BASEPRI_MAX, r3
    634e:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    6352:	9a05      	ldr	r2, [sp, #20]
    6354:	46d8      	mov	r8, fp
    6356:	b12a      	cbz	r2, 6364 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    6358:	4629      	mov	r1, r5
    635a:	4620      	mov	r0, r4
    635c:	f7ff ff9a 	bl	6294 <post_drop_action>
			tmp_wr_idx_shift = 0;
    6360:	2300      	movs	r3, #0
    6362:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    6364:	a904      	add	r1, sp, #16
    6366:	4620      	mov	r0, r4
    6368:	f7ff fec2 	bl	60f0 <free_space>

		if (free_wlen >= wlen) {
    636c:	9904      	ldr	r1, [sp, #16]
    636e:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    6370:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    6372:	d32a      	bcc.n	63ca <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    6374:	6822      	ldr	r2, [r4, #0]
			item =
    6376:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    6378:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    637c:	f021 0103 	bic.w	r1, r1, #3
    6380:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    6384:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6388:	6821      	ldr	r1, [r4, #0]
    638a:	4632      	mov	r2, r6
    638c:	4620      	mov	r0, r4
    638e:	f7ff fed3 	bl	6138 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    6392:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6394:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    6396:	4298      	cmp	r0, r3
    6398:	d012      	beq.n	63c0 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    639a:	2700      	movs	r7, #0
	__asm__ volatile(
    639c:	f388 8811 	msr	BASEPRI, r8
    63a0:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    63a4:	9903      	ldr	r1, [sp, #12]
    63a6:	b129      	cbz	r1, 63b4 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    63a8:	6962      	ldr	r2, [r4, #20]
    63aa:	b10a      	cbz	r2, 63b0 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    63ac:	4620      	mov	r0, r4
    63ae:	4790      	blx	r2
			}
			dropped_item = NULL;
    63b0:	2300      	movs	r3, #0
    63b2:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    63b4:	2f00      	cmp	r7, #0
    63b6:	d1c4      	bne.n	6342 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    63b8:	4648      	mov	r0, r9
    63ba:	b007      	add	sp, #28
    63bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    63c0:	6923      	ldr	r3, [r4, #16]
    63c2:	f043 0308 	orr.w	r3, r3, #8
    63c6:	6123      	str	r3, [r4, #16]
    63c8:	e7e7      	b.n	639a <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    63ca:	b118      	cbz	r0, 63d4 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    63cc:	4620      	mov	r0, r4
    63ce:	f7ff fecd 	bl	616c <add_skip_item>
			cont = true;
    63d2:	e7e3      	b.n	639c <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    63d4:	9b00      	ldr	r3, [sp, #0]
    63d6:	ea5a 0303 	orrs.w	r3, sl, r3
    63da:	d01a      	beq.n	6412 <mpsc_pbuf_alloc+0xec>
    63dc:	9101      	str	r1, [sp, #4]
    63de:	f000 fc1c 	bl	6c1a <k_is_in_isr>
    63e2:	9901      	ldr	r1, [sp, #4]
    63e4:	b9a8      	cbnz	r0, 6412 <mpsc_pbuf_alloc+0xec>
    63e6:	f38b 8811 	msr	BASEPRI, fp
    63ea:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    63ee:	9b00      	ldr	r3, [sp, #0]
    63f0:	4652      	mov	r2, sl
    63f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    63f6:	f7fe ff2b 	bl	5250 <z_impl_k_sem_take>
	__asm__ volatile(
    63fa:	f04f 0320 	mov.w	r3, #32
    63fe:	f3ef 8811 	mrs	r8, BASEPRI
    6402:	f383 8812 	msr	BASEPRI_MAX, r3
    6406:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    640a:	fab0 f780 	clz	r7, r0
    640e:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    6410:	e7c4      	b.n	639c <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    6412:	ab05      	add	r3, sp, #20
    6414:	aa03      	add	r2, sp, #12
    6416:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    6418:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    641a:	f7ff fec4 	bl	61a6 <drop_item_locked>
    641e:	4607      	mov	r7, r0
    6420:	e7bc      	b.n	639c <mpsc_pbuf_alloc+0x76>

00006422 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    6422:	b570      	push	{r4, r5, r6, lr}
    6424:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6426:	6983      	ldr	r3, [r0, #24]
    6428:	4608      	mov	r0, r1
{
    642a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    642c:	4798      	blx	r3
    642e:	4602      	mov	r2, r0
    6430:	f04f 0320 	mov.w	r3, #32
    6434:	f3ef 8611 	mrs	r6, BASEPRI
    6438:	f383 8812 	msr	BASEPRI_MAX, r3
    643c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    6440:	782b      	ldrb	r3, [r5, #0]
    6442:	f043 0301 	orr.w	r3, r3, #1
    6446:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6448:	6861      	ldr	r1, [r4, #4]
    644a:	4620      	mov	r0, r4
    644c:	f7ff fe74 	bl	6138 <idx_inc>
    6450:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    6452:	4620      	mov	r0, r4
    6454:	f7ff ff39 	bl	62ca <max_utilization_update>
	__asm__ volatile(
    6458:	f386 8811 	msr	BASEPRI, r6
    645c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    6460:	bd70      	pop	{r4, r5, r6, pc}

00006462 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    6462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6464:	4604      	mov	r4, r0
	__asm__ volatile(
    6466:	f04f 0320 	mov.w	r3, #32
    646a:	f3ef 8611 	mrs	r6, BASEPRI
    646e:	f383 8812 	msr	BASEPRI_MAX, r3
    6472:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    6476:	6923      	ldr	r3, [r4, #16]
    6478:	f013 0f08 	tst.w	r3, #8
    647c:	68a3      	ldr	r3, [r4, #8]
    647e:	d102      	bne.n	6486 <mpsc_pbuf_claim+0x24>
    6480:	6862      	ldr	r2, [r4, #4]
    6482:	4293      	cmp	r3, r2
    6484:	d900      	bls.n	6488 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    6486:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    6488:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    648a:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    648c:	b92a      	cbnz	r2, 649a <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    648e:	f386 8811 	msr	BASEPRI, r6
    6492:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    6496:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    6498:	e033      	b.n	6502 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    649a:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    649e:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    64a2:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    64a6:	d0f2      	beq.n	648e <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    64a8:	2802      	cmp	r0, #2
    64aa:	d103      	bne.n	64b4 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    64ac:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    64b0:	08ad      	lsrs	r5, r5, #2
    64b2:	d105      	bne.n	64c0 <mpsc_pbuf_claim+0x5e>
    64b4:	07d0      	lsls	r0, r2, #31
    64b6:	d412      	bmi.n	64de <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    64b8:	69a3      	ldr	r3, [r4, #24]
    64ba:	4638      	mov	r0, r7
    64bc:	4798      	blx	r3
    64be:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    64c0:	68a1      	ldr	r1, [r4, #8]
    64c2:	462a      	mov	r2, r5
    64c4:	4620      	mov	r0, r4
    64c6:	f7ff fe37 	bl	6138 <idx_inc>
				rd_idx_inc(buffer, inc);
    64ca:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    64cc:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    64ce:	4620      	mov	r0, r4
    64d0:	f7ff fe40 	bl	6154 <rd_idx_inc>
    64d4:	f386 8811 	msr	BASEPRI, r6
    64d8:	f3bf 8f6f 	isb	sy
	} while (cont);
    64dc:	e7c3      	b.n	6466 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    64de:	f042 0202 	orr.w	r2, r2, #2
    64e2:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    64e6:	4638      	mov	r0, r7
    64e8:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    64ea:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    64ec:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    64ee:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    64f0:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    64f2:	4620      	mov	r0, r4
    64f4:	f7ff fe20 	bl	6138 <idx_inc>
				buffer->tmp_rd_idx =
    64f8:	60a0      	str	r0, [r4, #8]
    64fa:	f386 8811 	msr	BASEPRI, r6
    64fe:	f3bf 8f6f 	isb	sy
}
    6502:	4638      	mov	r0, r7
    6504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006506 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    6506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6508:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    650a:	6983      	ldr	r3, [r0, #24]
    650c:	4608      	mov	r0, r1
{
    650e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6510:	4798      	blx	r3
    6512:	4606      	mov	r6, r0
	__asm__ volatile(
    6514:	f04f 0320 	mov.w	r3, #32
    6518:	f3ef 8711 	mrs	r7, BASEPRI
    651c:	f383 8812 	msr	BASEPRI_MAX, r3
    6520:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    6524:	782b      	ldrb	r3, [r5, #0]
    6526:	f36f 0300 	bfc	r3, #0, #1
    652a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    652c:	6923      	ldr	r3, [r4, #16]
    652e:	079b      	lsls	r3, r3, #30
    6530:	d505      	bpl.n	653e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    6532:	68e2      	ldr	r2, [r4, #12]
    6534:	69e3      	ldr	r3, [r4, #28]
    6536:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    653a:	429d      	cmp	r5, r3
    653c:	d11a      	bne.n	6574 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    653e:	782b      	ldrb	r3, [r5, #0]
    6540:	f36f 0341 	bfc	r3, #1, #1
    6544:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    6546:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    654a:	4299      	cmp	r1, r3
    654c:	d104      	bne.n	6558 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    654e:	4632      	mov	r2, r6
    6550:	4620      	mov	r0, r4
    6552:	f7ff fdf1 	bl	6138 <idx_inc>
    6556:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    6558:	4631      	mov	r1, r6
    655a:	4620      	mov	r0, r4
    655c:	f7ff fdfa 	bl	6154 <rd_idx_inc>
	__asm__ volatile(
    6560:	f387 8811 	msr	BASEPRI, r7
    6564:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6568:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    656c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6570:	f7fe be4e 	b.w	5210 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    6574:	682b      	ldr	r3, [r5, #0]
    6576:	f360 039f 	bfi	r3, r0, #2, #30
    657a:	602b      	str	r3, [r5, #0]
    657c:	e7f0      	b.n	6560 <mpsc_pbuf_free+0x5a>

0000657e <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    657e:	6902      	ldr	r2, [r0, #16]
    6580:	6883      	ldr	r3, [r0, #8]
    6582:	0712      	lsls	r2, r2, #28
    6584:	d402      	bmi.n	658c <mpsc_pbuf_is_pending+0xe>
    6586:	6842      	ldr	r2, [r0, #4]
    6588:	429a      	cmp	r2, r3
    658a:	d200      	bcs.n	658e <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    658c:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    658e:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    6590:	1e18      	subs	r0, r3, #0
    6592:	bf18      	it	ne
    6594:	2001      	movne	r0, #1
    6596:	4770      	bx	lr

00006598 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6598:	4770      	bx	lr

0000659a <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    659a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    659c:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    659e:	bf5f      	itttt	pl
    65a0:	6803      	ldrpl	r3, [r0, #0]
    65a2:	8842      	ldrhpl	r2, [r0, #2]
    65a4:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    65a8:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    65ac:	bf5d      	ittte	pl
    65ae:	3017      	addpl	r0, #23
    65b0:	f020 0007 	bicpl.w	r0, r0, #7
    65b4:	0880      	lsrpl	r0, r0, #2
	return 0;
    65b6:	2000      	movmi	r0, #0
}
    65b8:	4770      	bx	lr

000065ba <dummy_timestamp>:
}
    65ba:	2000      	movs	r0, #0
    65bc:	4770      	bx	lr

000065be <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    65be:	f000 bae3 	b.w	6b88 <sys_clock_cycle_get_32>

000065c2 <atomic_inc>:
{
    65c2:	4603      	mov	r3, r0
}
    65c4:	f3bf 8f5b 	dmb	ish
    65c8:	e853 0f00 	ldrex	r0, [r3]
    65cc:	1c42      	adds	r2, r0, #1
    65ce:	e843 2100 	strex	r1, r2, [r3]
    65d2:	2900      	cmp	r1, #0
    65d4:	d1f8      	bne.n	65c8 <atomic_inc+0x6>
    65d6:	f3bf 8f5b 	dmb	ish
    65da:	4770      	bx	lr

000065dc <z_log_vprintk>:
{
    65dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    65de:	2300      	movs	r3, #0
    65e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    65e4:	e9cd 3300 	strd	r3, r3, [sp]
    65e8:	461a      	mov	r2, r3
    65ea:	4619      	mov	r1, r3
    65ec:	4618      	mov	r0, r3
    65ee:	f7fb fb89 	bl	1d04 <z_impl_z_log_msg_runtime_vcreate>
}
    65f2:	b005      	add	sp, #20
    65f4:	f85d fb04 	ldr.w	pc, [sp], #4

000065f8 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    65f8:	2001      	movs	r0, #1
    65fa:	f7fb b93b 	b.w	1874 <z_log_dropped>

000065fe <z_log_get_tag>:
}
    65fe:	2000      	movs	r0, #0
    6600:	4770      	bx	lr

00006602 <z_cbprintf_cpy>:
{
    6602:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    6604:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    6608:	1b9b      	subs	r3, r3, r6
    660a:	428b      	cmp	r3, r1
{
    660c:	460c      	mov	r4, r1
    660e:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    6610:	d30a      	bcc.n	6628 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    6612:	6813      	ldr	r3, [r2, #0]
    6614:	460a      	mov	r2, r1
    6616:	4601      	mov	r1, r0
    6618:	1998      	adds	r0, r3, r6
    661a:	f000 f898 	bl	674e <memcpy>
	desc->off += len;
    661e:	68ab      	ldr	r3, [r5, #8]
    6620:	4423      	add	r3, r4
    6622:	60ab      	str	r3, [r5, #8]
	return len;
    6624:	4620      	mov	r0, r4
}
    6626:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    6628:	f06f 001b 	mvn.w	r0, #27
    662c:	e7fb      	b.n	6626 <z_cbprintf_cpy+0x24>

0000662e <z_log_msg_finalize>:
{
    662e:	b570      	push	{r4, r5, r6, lr}
    6630:	460e      	mov	r6, r1
    6632:	4615      	mov	r5, r2
    6634:	4619      	mov	r1, r3
	if (!msg) {
    6636:	4604      	mov	r4, r0
    6638:	b918      	cbnz	r0, 6642 <z_log_msg_finalize+0x14>
}
    663a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    663e:	f7fb b919 	b.w	1874 <z_log_dropped>
	if (data) {
    6642:	b133      	cbz	r3, 6652 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    6644:	f3c2 234a 	ubfx	r3, r2, #9, #11
    6648:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    664a:	0d12      	lsrs	r2, r2, #20
    664c:	4418      	add	r0, r3
    664e:	f000 f87e 	bl	674e <memcpy>
	msg->hdr.source = source;
    6652:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    6656:	4620      	mov	r0, r4
}
    6658:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    665c:	f7fb ba9a 	b.w	1b94 <z_log_msg_commit>

00006660 <buffer_write>:
{
    6660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6662:	4606      	mov	r6, r0
    6664:	460d      	mov	r5, r1
    6666:	4614      	mov	r4, r2
    6668:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    666a:	4621      	mov	r1, r4
    666c:	4628      	mov	r0, r5
    666e:	463a      	mov	r2, r7
    6670:	47b0      	blx	r6
	} while (len != 0);
    6672:	1a24      	subs	r4, r4, r0
		buf += processed;
    6674:	4405      	add	r5, r0
	} while (len != 0);
    6676:	d1f8      	bne.n	666a <buffer_write+0xa>
}
    6678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000667a <cbvprintf>:
{
    667a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    667c:	2400      	movs	r4, #0
    667e:	9400      	str	r4, [sp, #0]
    6680:	f7fa fc72 	bl	f68 <z_cbvprintf_impl>
}
    6684:	b002      	add	sp, #8
    6686:	bd10      	pop	{r4, pc}

00006688 <log_output_flush>:
{
    6688:	b510      	push	{r4, lr}
		     output->control_block->offset,
    668a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    668c:	6881      	ldr	r1, [r0, #8]
{
    668e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6690:	e9d2 2300 	ldrd	r2, r3, [r2]
    6694:	6800      	ldr	r0, [r0, #0]
    6696:	f7ff ffe3 	bl	6660 <buffer_write>
	output->control_block->offset = 0;
    669a:	6863      	ldr	r3, [r4, #4]
    669c:	2200      	movs	r2, #0
    669e:	601a      	str	r2, [r3, #0]
}
    66a0:	bd10      	pop	{r4, pc}

000066a2 <out_func>:
{
    66a2:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    66a4:	684b      	ldr	r3, [r1, #4]
    66a6:	681a      	ldr	r2, [r3, #0]
    66a8:	68cb      	ldr	r3, [r1, #12]
    66aa:	429a      	cmp	r2, r3
{
    66ac:	4605      	mov	r5, r0
    66ae:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    66b0:	d102      	bne.n	66b8 <out_func+0x16>
		log_output_flush(out_ctx);
    66b2:	4608      	mov	r0, r1
    66b4:	f7ff ffe8 	bl	6688 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    66b8:	6863      	ldr	r3, [r4, #4]
    66ba:	f3bf 8f5b 	dmb	ish
    66be:	e853 2f00 	ldrex	r2, [r3]
    66c2:	1c51      	adds	r1, r2, #1
    66c4:	e843 1000 	strex	r0, r1, [r3]
    66c8:	2800      	cmp	r0, #0
    66ca:	d1f8      	bne.n	66be <out_func+0x1c>
    66cc:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    66d0:	68a3      	ldr	r3, [r4, #8]
    66d2:	549d      	strb	r5, [r3, r2]
}
    66d4:	2000      	movs	r0, #0
    66d6:	bd38      	pop	{r3, r4, r5, pc}

000066d8 <cr_out_func>:
	if (c == '\n') {
    66d8:	280a      	cmp	r0, #10
{
    66da:	b538      	push	{r3, r4, r5, lr}
    66dc:	4604      	mov	r4, r0
    66de:	460d      	mov	r5, r1
	if (c == '\n') {
    66e0:	d102      	bne.n	66e8 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    66e2:	200d      	movs	r0, #13
    66e4:	f7ff ffdd 	bl	66a2 <out_func>
	out_func(c, ctx);
    66e8:	4629      	mov	r1, r5
    66ea:	4620      	mov	r0, r4
    66ec:	f7ff ffd9 	bl	66a2 <out_func>
}
    66f0:	2000      	movs	r0, #0
    66f2:	bd38      	pop	{r3, r4, r5, pc}

000066f4 <log_backend_uart_init>:
}
    66f4:	4770      	bx	lr

000066f6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    66f6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    66f8:	6800      	ldr	r0, [r0, #0]
    66fa:	f7fb bf49 	b.w	2590 <z_arm_fatal_error>

000066fe <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    66fe:	2100      	movs	r1, #0
    6700:	2001      	movs	r0, #1
    6702:	f7fb bf45 	b.w	2590 <z_arm_fatal_error>

00006706 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6706:	b508      	push	{r3, lr}
	handler();
    6708:	f7fb ffdc 	bl	26c4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    670c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6710:	f7fc b8b4 	b.w	287c <z_arm_exc_exit>

00006714 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    6714:	2300      	movs	r3, #0
    6716:	f7fb ba71 	b.w	1bfc <z_impl_z_log_msg_static_create>

0000671a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    671a:	3901      	subs	r1, #1
    671c:	4603      	mov	r3, r0
    671e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6722:	b90a      	cbnz	r2, 6728 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6724:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6726:	4770      	bx	lr
		*d = *s;
    6728:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    672c:	e7f7      	b.n	671e <strcpy+0x4>

0000672e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    672e:	4603      	mov	r3, r0
	size_t n = 0;
    6730:	2000      	movs	r0, #0

	while (*s != '\0') {
    6732:	5c1a      	ldrb	r2, [r3, r0]
    6734:	b902      	cbnz	r2, 6738 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6736:	4770      	bx	lr
		n++;
    6738:	3001      	adds	r0, #1
    673a:	e7fa      	b.n	6732 <strlen+0x4>

0000673c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    673c:	4603      	mov	r3, r0
	size_t n = 0;
    673e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6740:	5c1a      	ldrb	r2, [r3, r0]
    6742:	b10a      	cbz	r2, 6748 <strnlen+0xc>
    6744:	4288      	cmp	r0, r1
    6746:	d100      	bne.n	674a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6748:	4770      	bx	lr
		n++;
    674a:	3001      	adds	r0, #1
    674c:	e7f8      	b.n	6740 <strnlen+0x4>

0000674e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    674e:	b510      	push	{r4, lr}
    6750:	1e43      	subs	r3, r0, #1
    6752:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6754:	4291      	cmp	r1, r2
    6756:	d100      	bne.n	675a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6758:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    675a:	f811 4b01 	ldrb.w	r4, [r1], #1
    675e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6762:	e7f7      	b.n	6754 <memcpy+0x6>

00006764 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6764:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6766:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6768:	4603      	mov	r3, r0
	while (n > 0) {
    676a:	4293      	cmp	r3, r2
    676c:	d100      	bne.n	6770 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    676e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6770:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6774:	e7f9      	b.n	676a <memset+0x6>

00006776 <_stdout_hook_default>:
}
    6776:	f04f 30ff 	mov.w	r0, #4294967295
    677a:	4770      	bx	lr

0000677c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    677c:	2806      	cmp	r0, #6
    677e:	d108      	bne.n	6792 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6784:	2201      	movs	r2, #1
    6786:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    678a:	f3bf 8f4f 	dsb	sy
        __WFE();
    678e:	bf20      	wfe
    while (true)
    6790:	e7fd      	b.n	678e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6792:	4770      	bx	lr

00006794 <pm_state_exit_post_ops>:
    6794:	2300      	movs	r3, #0
    6796:	f383 8811 	msr	BASEPRI, r3
    679a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    679e:	4770      	bx	lr

000067a0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    67a0:	6903      	ldr	r3, [r0, #16]
    67a2:	b2c9      	uxtb	r1, r1
    67a4:	220c      	movs	r2, #12
    67a6:	fb01 3302 	mla	r3, r1, r2, r3
    67aa:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    67ac:	f000 0007 	and.w	r0, r0, #7
    67b0:	4770      	bx	lr

000067b2 <set_on_state>:
	__asm__ volatile(
    67b2:	f04f 0320 	mov.w	r3, #32
    67b6:	f3ef 8211 	mrs	r2, BASEPRI
    67ba:	f383 8812 	msr	BASEPRI_MAX, r3
    67be:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    67c2:	6803      	ldr	r3, [r0, #0]
    67c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    67c8:	f043 0302 	orr.w	r3, r3, #2
    67cc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    67ce:	f382 8811 	msr	BASEPRI, r2
    67d2:	f3bf 8f6f 	isb	sy
}
    67d6:	4770      	bx	lr

000067d8 <stop>:
{
    67d8:	b570      	push	{r4, r5, r6, lr}
    67da:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    67dc:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    67de:	f04f 0420 	mov.w	r4, #32
    67e2:	f3ef 8511 	mrs	r5, BASEPRI
    67e6:	f384 8812 	msr	BASEPRI_MAX, r4
    67ea:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    67ee:	260c      	movs	r6, #12
    67f0:	fb06 3401 	mla	r4, r6, r1, r3
    67f4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    67f6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    67fa:	d008      	beq.n	680e <stop+0x36>
    67fc:	42a2      	cmp	r2, r4
    67fe:	d006      	beq.n	680e <stop+0x36>
	__asm__ volatile(
    6800:	f385 8811 	msr	BASEPRI, r5
    6804:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    6808:	f04f 30ff 	mov.w	r0, #4294967295
}
    680c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    680e:	4371      	muls	r1, r6
    6810:	440b      	add	r3, r1
    6812:	2201      	movs	r2, #1
    6814:	641a      	str	r2, [r3, #64]	; 0x40
    6816:	f385 8811 	msr	BASEPRI, r5
    681a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    681e:	6843      	ldr	r3, [r0, #4]
    6820:	440b      	add	r3, r1
    6822:	685b      	ldr	r3, [r3, #4]
    6824:	4798      	blx	r3
	return 0;
    6826:	2000      	movs	r0, #0
    6828:	e7f0      	b.n	680c <stop+0x34>

0000682a <api_stop>:
	return stop(dev, subsys, CTX_API);
    682a:	2280      	movs	r2, #128	; 0x80
    682c:	f7ff bfd4 	b.w	67d8 <stop>

00006830 <async_start>:
{
    6830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6832:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6834:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    6836:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6838:	f04f 0520 	mov.w	r5, #32
    683c:	f3ef 8611 	mrs	r6, BASEPRI
    6840:	f385 8812 	msr	BASEPRI_MAX, r5
    6844:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6848:	250c      	movs	r5, #12
    684a:	4369      	muls	r1, r5
    684c:	440c      	add	r4, r1
    684e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6850:	f005 0c07 	and.w	ip, r5, #7
    6854:	f1bc 0f01 	cmp.w	ip, #1
    6858:	d10b      	bne.n	6872 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    685a:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    685c:	f386 8811 	msr	BASEPRI, r6
    6860:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    6864:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6868:	6843      	ldr	r3, [r0, #4]
    686a:	585b      	ldr	r3, [r3, r1]
    686c:	4798      	blx	r3
	return 0;
    686e:	2000      	movs	r0, #0
}
    6870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6872:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6876:	42af      	cmp	r7, r5
    6878:	f386 8811 	msr	BASEPRI, r6
    687c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    6880:	bf0c      	ite	eq
    6882:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    6886:	f04f 30ff 	movne.w	r0, #4294967295
    688a:	e7f1      	b.n	6870 <async_start+0x40>

0000688c <api_start>:
{
    688c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    688e:	2480      	movs	r4, #128	; 0x80
    6890:	9400      	str	r4, [sp, #0]
    6892:	f7ff ffcd 	bl	6830 <async_start>
}
    6896:	b002      	add	sp, #8
    6898:	bd10      	pop	{r4, pc}

0000689a <onoff_started_callback>:
{
    689a:	b410      	push	{r4}
	return &data->mgr[type];
    689c:	6900      	ldr	r0, [r0, #16]
    689e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    68a0:	241c      	movs	r4, #28
    68a2:	fb03 0004 	mla	r0, r3, r4, r0
    68a6:	2100      	movs	r1, #0
}
    68a8:	bc10      	pop	{r4}
	notify(mgr, 0);
    68aa:	4710      	bx	r2

000068ac <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    68ac:	2000      	movs	r0, #0
    68ae:	f000 b98d 	b.w	6bcc <nrfx_clock_stop>

000068b2 <blocking_start_callback>:
{
    68b2:	4610      	mov	r0, r2
    68b4:	f7fe bcac 	b.w	5210 <z_impl_k_sem_give>

000068b8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    68b8:	6843      	ldr	r3, [r0, #4]
    68ba:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    68bc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    68c0:	600b      	str	r3, [r1, #0]
}
    68c2:	2000      	movs	r0, #0
    68c4:	4770      	bx	lr

000068c6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    68c6:	6843      	ldr	r3, [r0, #4]
    68c8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    68ca:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    68ce:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    68d2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    68d6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    68da:	2000      	movs	r0, #0
    68dc:	4770      	bx	lr

000068de <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    68de:	6843      	ldr	r3, [r0, #4]
    68e0:	685b      	ldr	r3, [r3, #4]
}
    68e2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    68e4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    68e8:	4770      	bx	lr

000068ea <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    68ea:	6843      	ldr	r3, [r0, #4]
    68ec:	685b      	ldr	r3, [r3, #4]
}
    68ee:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    68f0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    68f4:	4770      	bx	lr

000068f6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    68f6:	6843      	ldr	r3, [r0, #4]
    68f8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    68fa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    68fe:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    6902:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    6904:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    6908:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    690c:	2000      	movs	r0, #0
    690e:	4770      	bx	lr

00006910 <gpio_nrfx_manage_callback>:
{
    6910:	b510      	push	{r4, lr}
	return port->data;
    6912:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6914:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6916:	b1f8      	cbz	r0, 6958 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6918:	4288      	cmp	r0, r1
    691a:	d119      	bne.n	6950 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    691c:	689c      	ldr	r4, [r3, #8]
	return node->next;
    691e:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    6920:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6922:	42a1      	cmp	r1, r4
    6924:	d100      	bne.n	6928 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6926:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6928:	2000      	movs	r0, #0
    692a:	6008      	str	r0, [r1, #0]
	if (set) {
    692c:	b12a      	cbz	r2, 693a <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    692e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    6930:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6932:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    6934:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6936:	b902      	cbnz	r2, 693a <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    6938:	6099      	str	r1, [r3, #8]
	return 0;
    693a:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    693c:	e010      	b.n	6960 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    693e:	4281      	cmp	r1, r0
    6940:	d106      	bne.n	6950 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    6942:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    6944:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6946:	6898      	ldr	r0, [r3, #8]
    6948:	4281      	cmp	r1, r0
    694a:	d1ed      	bne.n	6928 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    694c:	609c      	str	r4, [r3, #8]
}
    694e:	e7eb      	b.n	6928 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    6950:	4604      	mov	r4, r0
    6952:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6954:	2800      	cmp	r0, #0
    6956:	d1f2      	bne.n	693e <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    6958:	2a00      	cmp	r2, #0
    695a:	d1e8      	bne.n	692e <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    695c:	f06f 0015 	mvn.w	r0, #21
}
    6960:	bd10      	pop	{r4, pc}

00006962 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6962:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6964:	6843      	ldr	r3, [r0, #4]
    6966:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    6968:	7a05      	ldrb	r5, [r0, #8]
    696a:	6844      	ldr	r4, [r0, #4]
    696c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    6970:	42a3      	cmp	r3, r4
    6972:	d302      	bcc.n	697a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    6974:	f06f 0001 	mvn.w	r0, #1
}
    6978:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    697a:	795c      	ldrb	r4, [r3, #5]
    697c:	428c      	cmp	r4, r1
    697e:	d001      	beq.n	6984 <pinctrl_lookup_state+0x22>
		(*state)++;
    6980:	3308      	adds	r3, #8
    6982:	e7f0      	b.n	6966 <pinctrl_lookup_state+0x4>
			return 0;
    6984:	2000      	movs	r0, #0
    6986:	e7f7      	b.n	6978 <pinctrl_lookup_state+0x16>

00006988 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    6988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    698c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6990:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    6992:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6996:	4281      	cmp	r1, r0
    6998:	d102      	bne.n	69a0 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    699a:	2000      	movs	r0, #0
}
    699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    69a0:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    69a2:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    69a6:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    69aa:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    69ac:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    69b0:	bf08      	it	eq
    69b2:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    69b6:	2d19      	cmp	r5, #25
    69b8:	d86a      	bhi.n	6a90 <pinctrl_configure_pins+0x108>
    69ba:	e8df f005 	tbb	[pc, r5]
    69be:	170d      	.short	0x170d
    69c0:	2e221f1c 	.word	0x2e221f1c
    69c4:	6969691f 	.word	0x6969691f
    69c8:	69553269 	.word	0x69553269
    69cc:	69696969 	.word	0x69696969
    69d0:	69696969 	.word	0x69696969
    69d4:	66636058 	.word	0x66636058
			NRF_PSEL_UART(reg, TXD) = pin;
    69d8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    69dc:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    69e0:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    69e4:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
    69e8:	2501      	movs	r5, #1
    69ea:	e002      	b.n	69f2 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
    69ec:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    69f0:	2500      	movs	r5, #0
    69f2:	46ac      	mov	ip, r5
    69f4:	e01c      	b.n	6a30 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
    69f6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    69fa:	e7ef      	b.n	69dc <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
    69fc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    6a00:	e7f6      	b.n	69f0 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    6a02:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    6a06:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    6a08:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    6a0c:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    6a10:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
    6a14:	f04f 0c01 	mov.w	ip, #1
    6a18:	e00a      	b.n	6a30 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    6a1a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    6a1e:	2501      	movs	r5, #1
    6a20:	e7f2      	b.n	6a08 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    6a22:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    6a26:	2c00      	cmp	r4, #0
    6a28:	d1e2      	bne.n	69f0 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    6a2a:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    6a2c:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
    6a2e:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    6a30:	f850 eb04 	ldr.w	lr, [r0], #4
    6a34:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    6a38:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6a3c:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    6a40:	ea4f 2404 	mov.w	r4, r4, lsl #8
    6a44:	bf18      	it	ne
    6a46:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
    6a4a:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6a4e:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    6a52:	bf18      	it	ne
    6a54:	2501      	movne	r5, #1
    6a56:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
    6a5a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6a5e:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    6a62:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6a66:	e796      	b.n	6996 <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    6a68:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    6a6c:	e7db      	b.n	6a26 <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    6a6e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    6a72:	6805      	ldr	r5, [r0, #0]
    6a74:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    6a78:	2d00      	cmp	r5, #0
    6a7a:	d0d0      	beq.n	6a1e <pinctrl_configure_pins+0x96>
    6a7c:	e7ae      	b.n	69dc <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    6a7e:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    6a82:	e7f6      	b.n	6a72 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    6a84:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    6a88:	e7f3      	b.n	6a72 <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    6a8a:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    6a8e:	e7f0      	b.n	6a72 <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
    6a90:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6a94:	e782      	b.n	699c <pinctrl_configure_pins+0x14>

00006a96 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    6a96:	6902      	ldr	r2, [r0, #16]
{
    6a98:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    6a9a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6a9e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6aa2:	2000      	movs	r0, #0
    6aa4:	4770      	bx	lr

00006aa6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6aa6:	6843      	ldr	r3, [r0, #4]
    6aa8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6aaa:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6aae:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6ab2:	4770      	bx	lr

00006ab4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6ab4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    6ab6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6ab8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6aba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6abe:	b150      	cbz	r0, 6ad6 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    6ac0:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ac2:	2000      	movs	r0, #0
    6ac4:	7812      	ldrb	r2, [r2, #0]
    6ac6:	700a      	strb	r2, [r1, #0]
    6ac8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6acc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ad0:	2201      	movs	r2, #1
    6ad2:	601a      	str	r2, [r3, #0]
	return 0;
    6ad4:	4770      	bx	lr
		return -1;
    6ad6:	f04f 30ff 	mov.w	r0, #4294967295
}
    6ada:	4770      	bx	lr

00006adc <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6adc:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    6ade:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ae0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6ae4:	b940      	cbnz	r0, 6af8 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6ae6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6ae8:	079b      	lsls	r3, r3, #30
    6aea:	d406      	bmi.n	6afa <is_tx_ready.isra.0+0x1e>
    6aec:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6af0:	3800      	subs	r0, #0
    6af2:	bf18      	it	ne
    6af4:	2001      	movne	r0, #1
    6af6:	4770      	bx	lr
    6af8:	2001      	movs	r0, #1
}
    6afa:	4770      	bx	lr

00006afc <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    6afc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6afe:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6b00:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6b04:	05c9      	lsls	r1, r1, #23
    6b06:	d518      	bpl.n	6b3a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b08:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6b0c:	b1a9      	cbz	r1, 6b3a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6b0e:	f04f 0020 	mov.w	r0, #32
    6b12:	f3ef 8111 	mrs	r1, BASEPRI
    6b16:	f380 8812 	msr	BASEPRI_MAX, r0
    6b1a:	f3bf 8f6f 	isb	sy
    6b1e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6b22:	b130      	cbz	r0, 6b32 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b24:	2000      	movs	r0, #0
    6b26:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    6b2a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b2e:	2001      	movs	r0, #1
    6b30:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    6b32:	f381 8811 	msr	BASEPRI, r1
    6b36:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6b3a:	6852      	ldr	r2, [r2, #4]
    6b3c:	06d2      	lsls	r2, r2, #27
    6b3e:	d515      	bpl.n	6b6c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    6b40:	f04f 0120 	mov.w	r1, #32
    6b44:	f3ef 8211 	mrs	r2, BASEPRI
    6b48:	f381 8812 	msr	BASEPRI_MAX, r1
    6b4c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b50:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6b54:	b111      	cbz	r1, 6b5c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6b56:	2100      	movs	r1, #0
    6b58:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6b5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    6b60:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6b64:	f382 8811 	msr	BASEPRI, r2
    6b68:	f3bf 8f6f 	isb	sy
}
    6b6c:	4770      	bx	lr

00006b6e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6b6e:	4770      	bx	lr

00006b70 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6b70:	f100 0350 	add.w	r3, r0, #80	; 0x50
    6b74:	009b      	lsls	r3, r3, #2
    6b76:	b29b      	uxth	r3, r3
    6b78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6b7c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6b80:	2200      	movs	r2, #0
    6b82:	601a      	str	r2, [r3, #0]
    6b84:	681b      	ldr	r3, [r3, #0]
}
    6b86:	4770      	bx	lr

00006b88 <sys_clock_cycle_get_32>:
{
    6b88:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    6b8a:	f7fd f837 	bl	3bfc <z_nrf_rtc_timer_read>
}
    6b8e:	bd08      	pop	{r3, pc}

00006b90 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    6b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6b94:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    6b98:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    6b9a:	bf04      	itt	eq
    6b9c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    6ba0:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    6ba4:	1f83      	subs	r3, r0, #6
    6ba6:	4258      	negs	r0, r3
    6ba8:	4158      	adcs	r0, r3
    6baa:	4770      	bx	lr

00006bac <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6bac:	4700      	bx	r0

00006bae <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6bae:	f000 b951 	b.w	6e54 <z_impl_k_busy_wait>

00006bb2 <nrfx_clock_enable>:
{
    6bb2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6bb4:	2000      	movs	r0, #0
    6bb6:	f7fb fd5f 	bl	2678 <arch_irq_is_enabled>
    6bba:	b908      	cbnz	r0, 6bc0 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6bbc:	f7fb fd4e 	bl	265c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6bc4:	2200      	movs	r2, #0
    6bc6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6bca:	bd08      	pop	{r3, pc}

00006bcc <nrfx_clock_stop>:
    clock_stop(domain);
    6bcc:	f7fd bb60 	b.w	4290 <clock_stop>

00006bd0 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    6bd0:	f000 001f 	and.w	r0, r0, #31
    6bd4:	0080      	lsls	r0, r0, #2
    6bd6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6bda:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    6bde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6be6:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    6bea:	4770      	bx	lr

00006bec <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6bec:	f7fd bf82 	b.w	4af4 <_DoInit>

00006bf0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    6bf0:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    6bf2:	f7ff fffb 	bl	6bec <SEGGER_RTT_Init>

	return 0;
}
    6bf6:	2000      	movs	r0, #0
    6bf8:	bd08      	pop	{r3, pc}

00006bfa <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    6bfa:	4770      	bx	lr

00006bfc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6bfc:	b140      	cbz	r0, 6c10 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6bfe:	68c3      	ldr	r3, [r0, #12]
    6c00:	7858      	ldrb	r0, [r3, #1]
    6c02:	f010 0001 	ands.w	r0, r0, #1
    6c06:	bf1e      	ittt	ne
    6c08:	7818      	ldrbne	r0, [r3, #0]
    6c0a:	fab0 f080 	clzne	r0, r0
    6c0e:	0940      	lsrne	r0, r0, #5
}
    6c10:	4770      	bx	lr

00006c12 <z_early_memset>:
	(void) memset(dst, c, n);
    6c12:	f7ff bda7 	b.w	6764 <memset>

00006c16 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6c16:	f7ff bd9a 	b.w	674e <memcpy>

00006c1a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6c1a:	f3ef 8005 	mrs	r0, IPSR
}
    6c1e:	3800      	subs	r0, #0
    6c20:	bf18      	it	ne
    6c22:	2001      	movne	r0, #1
    6c24:	4770      	bx	lr

00006c26 <z_impl_k_thread_name_set>:
}
    6c26:	f06f 0057 	mvn.w	r0, #87	; 0x57
    6c2a:	4770      	bx	lr

00006c2c <k_thread_name_get>:
}
    6c2c:	2000      	movs	r0, #0
    6c2e:	4770      	bx	lr

00006c30 <z_pm_save_idle_exit>:
{
    6c30:	b508      	push	{r3, lr}
	pm_system_resume();
    6c32:	f7fb fb83 	bl	233c <pm_system_resume>
}
    6c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6c3a:	f7ff bf98 	b.w	6b6e <sys_clock_idle_exit>

00006c3e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6c3e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6c42:	428b      	cmp	r3, r1
    6c44:	d001      	beq.n	6c4a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6c46:	f7fe bc8b 	b.w	5560 <z_set_prio>
}
    6c4a:	2000      	movs	r0, #0
    6c4c:	4770      	bx	lr

00006c4e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6c4e:	b13a      	cbz	r2, 6c60 <z_impl_k_sem_init+0x12>
    6c50:	428a      	cmp	r2, r1
    6c52:	d305      	bcc.n	6c60 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    6c54:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    6c58:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    6c5c:	2000      	movs	r0, #0
    6c5e:	4770      	bx	lr
		return -EINVAL;
    6c60:	f06f 0015 	mvn.w	r0, #21
}
    6c64:	4770      	bx	lr

00006c66 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6c66:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6c6a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6c6c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6c6e:	2300      	movs	r3, #0
	node->prev = NULL;
    6c70:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6c74:	4770      	bx	lr

00006c76 <unpend_thread_no_timeout>:
{
    6c76:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6c78:	f7ff fff5 	bl	6c66 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6c7c:	7b43      	ldrb	r3, [r0, #13]
    6c7e:	f023 0302 	bic.w	r3, r3, #2
    6c82:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6c84:	2300      	movs	r3, #0
    6c86:	6083      	str	r3, [r0, #8]
}
    6c88:	bd08      	pop	{r3, pc}

00006c8a <add_to_waitq_locked>:
{
    6c8a:	b538      	push	{r3, r4, r5, lr}
    6c8c:	4604      	mov	r4, r0
    6c8e:	460d      	mov	r5, r1
	unready_thread(thread);
    6c90:	f7fe fbe8 	bl	5464 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6c94:	7b63      	ldrb	r3, [r4, #13]
    6c96:	f043 0302 	orr.w	r3, r3, #2
    6c9a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6c9c:	b1e5      	cbz	r5, 6cd8 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    6c9e:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    6ca0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ca2:	429d      	cmp	r5, r3
    6ca4:	d109      	bne.n	6cba <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    6ca6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6ca8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6cac:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6cae:	606c      	str	r4, [r5, #4]
}
    6cb0:	e012      	b.n	6cd8 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    6cb2:	686a      	ldr	r2, [r5, #4]
    6cb4:	4293      	cmp	r3, r2
    6cb6:	d0f6      	beq.n	6ca6 <add_to_waitq_locked+0x1c>
    6cb8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6cba:	2b00      	cmp	r3, #0
    6cbc:	d0f3      	beq.n	6ca6 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    6cbe:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6cc2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    6cc6:	428a      	cmp	r2, r1
    6cc8:	d0f3      	beq.n	6cb2 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6cca:	4291      	cmp	r1, r2
    6ccc:	ddf1      	ble.n	6cb2 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    6cce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6cd0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6cd4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6cd6:	605c      	str	r4, [r3, #4]
}
    6cd8:	bd38      	pop	{r3, r4, r5, pc}

00006cda <z_ready_thread>:
{
    6cda:	b510      	push	{r4, lr}
	__asm__ volatile(
    6cdc:	f04f 0320 	mov.w	r3, #32
    6ce0:	f3ef 8411 	mrs	r4, BASEPRI
    6ce4:	f383 8812 	msr	BASEPRI_MAX, r3
    6ce8:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    6cec:	f7fe fb86 	bl	53fc <ready_thread>
	__asm__ volatile(
    6cf0:	f384 8811 	msr	BASEPRI, r4
    6cf4:	f3bf 8f6f 	isb	sy
}
    6cf8:	bd10      	pop	{r4, pc}

00006cfa <z_unpend_thread_no_timeout>:
{
    6cfa:	b508      	push	{r3, lr}
	__asm__ volatile(
    6cfc:	f04f 0220 	mov.w	r2, #32
    6d00:	f3ef 8111 	mrs	r1, BASEPRI
    6d04:	f382 8812 	msr	BASEPRI_MAX, r2
    6d08:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    6d0c:	6883      	ldr	r3, [r0, #8]
    6d0e:	b10b      	cbz	r3, 6d14 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    6d10:	f7ff ffb1 	bl	6c76 <unpend_thread_no_timeout>
	__asm__ volatile(
    6d14:	f381 8811 	msr	BASEPRI, r1
    6d18:	f3bf 8f6f 	isb	sy
}
    6d1c:	bd08      	pop	{r3, pc}

00006d1e <z_sched_wake_thread>:
{
    6d1e:	b538      	push	{r3, r4, r5, lr}
    6d20:	4604      	mov	r4, r0
	__asm__ volatile(
    6d22:	f04f 0320 	mov.w	r3, #32
    6d26:	f3ef 8511 	mrs	r5, BASEPRI
    6d2a:	f383 8812 	msr	BASEPRI_MAX, r3
    6d2e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    6d32:	7b43      	ldrb	r3, [r0, #13]
    6d34:	f013 0f28 	tst.w	r3, #40	; 0x28
    6d38:	d10b      	bne.n	6d52 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    6d3a:	6883      	ldr	r3, [r0, #8]
    6d3c:	b10b      	cbz	r3, 6d42 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    6d3e:	f7ff ff9a 	bl	6c76 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6d42:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    6d44:	b951      	cbnz	r1, 6d5c <z_sched_wake_thread+0x3e>
    6d46:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    6d4a:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    6d4c:	4620      	mov	r0, r4
    6d4e:	f7fe fb55 	bl	53fc <ready_thread>
	__asm__ volatile(
    6d52:	f385 8811 	msr	BASEPRI, r5
    6d56:	f3bf 8f6f 	isb	sy
}
    6d5a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6d5c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    6d60:	e7f3      	b.n	6d4a <z_sched_wake_thread+0x2c>

00006d62 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    6d62:	2101      	movs	r1, #1
    6d64:	3818      	subs	r0, #24
    6d66:	f7ff bfda 	b.w	6d1e <z_sched_wake_thread>

00006d6a <z_unpend1_no_timeout>:
{
    6d6a:	b508      	push	{r3, lr}
    6d6c:	4603      	mov	r3, r0
	__asm__ volatile(
    6d6e:	f04f 0220 	mov.w	r2, #32
    6d72:	f3ef 8111 	mrs	r1, BASEPRI
    6d76:	f382 8812 	msr	BASEPRI_MAX, r2
    6d7a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6d7e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d80:	4283      	cmp	r3, r0
    6d82:	d007      	beq.n	6d94 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    6d84:	b108      	cbz	r0, 6d8a <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    6d86:	f7ff ff76 	bl	6c76 <unpend_thread_no_timeout>
	__asm__ volatile(
    6d8a:	f381 8811 	msr	BASEPRI, r1
    6d8e:	f3bf 8f6f 	isb	sy
}
    6d92:	bd08      	pop	{r3, pc}
    6d94:	2000      	movs	r0, #0
    6d96:	e7f8      	b.n	6d8a <z_unpend1_no_timeout+0x20>

00006d98 <z_unpend_first_thread>:
{
    6d98:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6d9a:	f04f 0320 	mov.w	r3, #32
    6d9e:	f3ef 8511 	mrs	r5, BASEPRI
    6da2:	f383 8812 	msr	BASEPRI_MAX, r3
    6da6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6daa:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6dac:	42a0      	cmp	r0, r4
    6dae:	d00d      	beq.n	6dcc <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    6db0:	b134      	cbz	r4, 6dc0 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    6db2:	4620      	mov	r0, r4
    6db4:	f7ff ff5f 	bl	6c76 <unpend_thread_no_timeout>
    6db8:	f104 0018 	add.w	r0, r4, #24
    6dbc:	f000 f81e 	bl	6dfc <z_abort_timeout>
	__asm__ volatile(
    6dc0:	f385 8811 	msr	BASEPRI, r5
    6dc4:	f3bf 8f6f 	isb	sy
}
    6dc8:	4620      	mov	r0, r4
    6dca:	bd38      	pop	{r3, r4, r5, pc}
    6dcc:	2400      	movs	r4, #0
    6dce:	e7f7      	b.n	6dc0 <z_unpend_first_thread+0x28>

00006dd0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6dd0:	4603      	mov	r3, r0
    6dd2:	b920      	cbnz	r0, 6dde <z_reschedule_irqlock+0xe>
    6dd4:	f3ef 8205 	mrs	r2, IPSR
    6dd8:	b90a      	cbnz	r2, 6dde <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    6dda:	f7fb bc93 	b.w	2704 <arch_swap>
    6dde:	f383 8811 	msr	BASEPRI, r3
    6de2:	f3bf 8f6f 	isb	sy
}
    6de6:	4770      	bx	lr

00006de8 <z_reschedule_unlocked>:
	__asm__ volatile(
    6de8:	f04f 0320 	mov.w	r3, #32
    6dec:	f3ef 8011 	mrs	r0, BASEPRI
    6df0:	f383 8812 	msr	BASEPRI_MAX, r3
    6df4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6df8:	f7ff bfea 	b.w	6dd0 <z_reschedule_irqlock>

00006dfc <z_abort_timeout>:
{
    6dfc:	b510      	push	{r4, lr}
    6dfe:	f04f 0220 	mov.w	r2, #32
    6e02:	f3ef 8411 	mrs	r4, BASEPRI
    6e06:	f382 8812 	msr	BASEPRI_MAX, r2
    6e0a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    6e0e:	6803      	ldr	r3, [r0, #0]
    6e10:	b13b      	cbz	r3, 6e22 <z_abort_timeout+0x26>
			remove_timeout(to);
    6e12:	f7fe fdcb 	bl	59ac <remove_timeout>
			ret = 0;
    6e16:	2000      	movs	r0, #0
	__asm__ volatile(
    6e18:	f384 8811 	msr	BASEPRI, r4
    6e1c:	f3bf 8f6f 	isb	sy
}
    6e20:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    6e22:	f06f 0015 	mvn.w	r0, #21
    6e26:	e7f7      	b.n	6e18 <z_abort_timeout+0x1c>

00006e28 <z_get_next_timeout_expiry>:
{
    6e28:	b510      	push	{r4, lr}
	__asm__ volatile(
    6e2a:	f04f 0320 	mov.w	r3, #32
    6e2e:	f3ef 8411 	mrs	r4, BASEPRI
    6e32:	f383 8812 	msr	BASEPRI_MAX, r3
    6e36:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    6e3a:	f7fe fd97 	bl	596c <next_timeout>
	__asm__ volatile(
    6e3e:	f384 8811 	msr	BASEPRI, r4
    6e42:	f3bf 8f6f 	isb	sy
}
    6e46:	bd10      	pop	{r4, pc}

00006e48 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6e48:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6e4a:	f7fe feab 	bl	5ba4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6e4e:	bd08      	pop	{r3, pc}

00006e50 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    6e50:	f7fe bea8 	b.w	5ba4 <sys_clock_tick_get>

00006e54 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6e54:	b108      	cbz	r0, 6e5a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6e56:	f7fc b9d3 	b.w	3200 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6e5a:	4770      	bx	lr

00006e5c <k_timer_init>:
	timer->status = 0U;
    6e5c:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    6e5e:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    6e62:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    6e66:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    6e6a:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    6e6e:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    6e70:	6343      	str	r3, [r0, #52]	; 0x34
}
    6e72:	4770      	bx	lr

00006e74 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    6e74:	b510      	push	{r4, lr}
    6e76:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    6e78:	f7ff ffc0 	bl	6dfc <z_abort_timeout>

	if (inactive) {
    6e7c:	b9b0      	cbnz	r0, 6eac <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    6e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e80:	b10b      	cbz	r3, 6e86 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    6e82:	4620      	mov	r0, r4
    6e84:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    6e86:	f104 0018 	add.w	r0, r4, #24
    6e8a:	f7ff ff6e 	bl	6d6a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    6e8e:	b168      	cbz	r0, 6eac <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    6e90:	f7ff ff23 	bl	6cda <z_ready_thread>
	__asm__ volatile(
    6e94:	f04f 0320 	mov.w	r3, #32
    6e98:	f3ef 8011 	mrs	r0, BASEPRI
    6e9c:	f383 8812 	msr	BASEPRI_MAX, r3
    6ea0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    6ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ea8:	f7ff bf92 	b.w	6dd0 <z_reschedule_irqlock>
    6eac:	bd10      	pop	{r4, pc}

00006eae <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6eae:	4770      	bx	lr
